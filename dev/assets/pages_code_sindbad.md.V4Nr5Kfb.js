import{_ as l,C as p,c as d,o,aA as e,j as i,a,G as n}from"./chunks/framework.C07RQYAL.js";const vs=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/code/sindbad.md","filePath":"pages/code/sindbad.md","lastUpdated":null}'),h={name:"pages/code/sindbad.md"},r={class:"jldocstring custom-block"},k={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},c={class:"jldocstring custom-block"},u={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},E={class:"jldocstring custom-block"},m={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},C={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"},v={class:"jldocstring custom-block"},A={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},S={class:"jldocstring custom-block"},j={class:"jldocstring custom-block"},D={class:"jldocstring custom-block"},B={class:"jldocstring custom-block"},x={class:"jldocstring custom-block"},I={class:"jldocstring custom-block"},V={class:"jldocstring custom-block"},P={class:"jldocstring custom-block"},w={class:"jldocstring custom-block"},M={class:"jldocstring custom-block"},N={class:"jldocstring custom-block"},O={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},z={class:"jldocstring custom-block"},q={class:"jldocstring custom-block"},U={class:"jldocstring custom-block"},L={class:"jldocstring custom-block"},Z={class:"jldocstring custom-block"},G={class:"jldocstring custom-block"},K={class:"jldocstring custom-block"},$={class:"jldocstring custom-block"},W={class:"jldocstring custom-block"},Y={class:"jldocstring custom-block"},H={class:"jldocstring custom-block"},J={class:"jldocstring custom-block"},Q={class:"jldocstring custom-block"},X={class:"jldocstring custom-block"},ss={class:"jldocstring custom-block"},is={class:"jldocstring custom-block"},as={class:"jldocstring custom-block"},es={class:"jldocstring custom-block"},ts={class:"jldocstring custom-block"},ns={class:"jldocstring custom-block"},ls={class:"jldocstring custom-block"},ps={class:"jldocstring custom-block"},ds={class:"jldocstring custom-block"},os={class:"jldocstring custom-block"},hs={class:"jldocstring custom-block"},rs={class:"jldocstring custom-block"},ks={class:"jldocstring custom-block"},gs={class:"jldocstring custom-block"},cs={class:"jldocstring custom-block"},us={class:"jldocstring custom-block"},ys={class:"jldocstring custom-block"};function Es(ms,s,bs,Cs,fs,_s){const t=p("Badge");return o(),d("div",null,[s[180]||(s[180]=e('<div class="tip custom-block"><p class="custom-block-title">What are <code>Exported</code> and <code>Internal</code> entities?</p><ul><li><code>Exported</code> entities (functions, structs, types, constants):</li></ul><p>These are explicitly made available to users using the <code>export</code> keyword, allowing them to be accessed without prefixing them with the module name.</p><ul><li><code>Internal</code> entities (non-exported):</li></ul><p>These remain accessible but require qualification with the module name (e.g., <code>MyModule.SomeType</code>), indicating that they are intended for internal use.</p></div>',1)),i("details",r,[i("summary",null,[s[0]||(s[0]=i("a",{id:"Sindbad",href:"#Sindbad"},[i("span",{class:"jlbinding"},"Sindbad")],-1)),s[1]||(s[1]=a()),n(t,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),s[2]||(s[2]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Sindbad</span></span></code></pre></div><p>A Julia package for the terrestrial ecosystem models within <strong>S</strong>trategies to <strong>IN</strong>tegrate <strong>D</strong>ata and <strong>B</strong>iogeochemic<strong>A</strong>l mo<strong>D</strong>els <code>(SINDBAD)</code> framework.</p><p>The <code>Sindbad</code> package serves as the core of the SINDBAD framework, providing foundational types, utilities, and tools for building and managing SINDBAD models.</p><p><strong>Purpose:</strong></p><p>This package defines the <code>LandEcosystem</code> supertype, which serves as the base for all SINDBAD models. It also provides utilities for managing model variables, tools for model operations, and a catalog of variables used in SINDBAD workflows.</p><p><strong>Dependencies:</strong></p><ul><li><p><code>Reexport</code>: Simplifies re-exporting functionality from other packages, ensuring a clean and modular design.</p></li><li><p><code>CodeTracking</code>: Enables tracking of code definitions, useful for debugging and development workflows.</p></li><li><p><code>DataStructures</code>: Provides advanced data structures (e.g., <code>OrderedDict</code>, <code>Deque</code>) for efficient data handling in SINDBAD models.</p></li><li><p><code>DocStringExtensions</code>: Facilitates the creation of structured and extensible docstrings for improved documentation.</p></li><li><p><code>Flatten</code>: Supplies tools for flattening nested data structures, simplifying the handling of hierarchical model variables.</p></li><li><p><code>InteractiveUtils</code>: Enables interactive exploration and debugging during development.</p></li><li><p><code>Parameters</code>: Provides macros for defining and managing model parameters in a concise and readable manner.</p></li><li><p><code>StaticArraysCore</code>: Supports efficient, fixed-size arrays (e.g., <code>SVector</code>, <code>MArray</code>) for performance-critical operations in SINDBAD models.</p></li></ul><p><strong>Included Files:</strong></p><ol><li><strong><code>utilsCore.jl</code></strong>:</li></ol><ul><li>Contains core utility functions for SINDBAD, including helper methods for array operations and code generation macros for NamedTuple packing and unpacking.</li></ul><ol start="2"><li><strong><code>sindbadVariableCatalog.jl</code></strong>:</li></ol><ul><li>Defines a catalog of variables used in SINDBAD models, ensuring consistency and standardization across workflows. Note that every new variable would need a manual entry in the catalog so that the output files are written with correct information.</li></ul><ol start="3"><li><strong><code>Models/models.jl</code></strong>:</li></ol><ul><li>Implements the core SINDBAD models, inheriting from the <code>LandEcosystem</code> supertype. Also, introduces the fallback function for compute, precompute, etc. so that they are optional in every model.</li></ul><ol start="4"><li><strong><code>modelTools.jl</code></strong>:</li></ol><ul><li>Provides tools for extracting information from SINDBAD models, including mode code, variables, and parameters.</li></ul><p><strong>Notes:</strong></p><ul><li><p>The <code>LandEcosystem</code> supertype serves as the foundation for all SINDBAD models, enabling extensibility and modularity.</p></li><li><p>The package re-exports key functionality from other packages (e.g., <code>Flatten</code>, <code>StaticArraysCore</code>, <code>DataStructures</code>) to simplify usage and integration.</p></li><li><p>Designed to be lightweight and modular, allowing seamless integration with other SINDBAD packages.</p></li></ul><p><strong>Examples:</strong></p><ol><li><strong>Defining a new SINDBAD model</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LandEcosystem</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Define model-specific fields</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><ol><li><strong>Using utilities from the package</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Sindbad</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Access utilities or models</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flattened_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nested_data)</span></span></code></pre></div><ol><li><strong>Querying the variable catalog</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Sindbad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">catalog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getVariableCatalog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div>`,25))]),s[181]||(s[181]=i("h2",{id:"exported",tabindex:"-1"},[a("Exported "),i("a",{class:"header-anchor",href:"#exported","aria-label":'Permalink to "Exported"'},"​")],-1)),i("details",k,[i("summary",null,[s[3]||(s[3]=i("a",{id:"Sindbad.sindbad_variables",href:"#Sindbad.sindbad_variables"},[i("span",{class:"jlbinding"},"Sindbad.sindbad_variables")],-1)),s[4]||(s[4]=a()),n(t,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),s[5]||(s[5]=e("<p><code>sindbad_variables</code></p><p>A dictionary of dictionaries that contains information about the variables in the SINDBAD models. The keys of the outer dictionary are the variable names and the inner dictionaries contain the following keys:</p><ul><li><p><code>standard_name</code>: the standard name of the variable</p></li><li><p><code>long_name</code>: a longer description of the variable</p></li><li><p><code>units</code>: the units of the variable</p></li><li><p><code>land_field</code>: the field in the SINDBAD model where the variable is used</p></li><li><p><code>description</code>: a description of the variable</p></li></ul>",3))]),i("details",g,[i("summary",null,[s[6]||(s[6]=i("a",{id:"Sindbad.addToEachElem",href:"#Sindbad.addToEachElem"},[i("span",{class:"jlbinding"},"Sindbad.addToEachElem")],-1)),s[7]||(s[7]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[8]||(s[8]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addToEachElem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Δv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Real)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addToEachElem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Δv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Real)</span></span></code></pre></div><p>add Δv to each element of v when v is a StaticVector or a Vector.</p><p><strong>Arguments</strong></p><ul><li><p><code>v</code>: a StaticVector or AbstractVector</p></li><li><p><code>Δv</code>: the value to be added to each element</p></li></ul>`,4))]),i("details",c,[i("summary",null,[s[9]||(s[9]=i("a",{id:"Sindbad.addToElem",href:"#Sindbad.addToElem"},[i("span",{class:"jlbinding"},"Sindbad.addToElem")],-1)),s[10]||(s[10]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[11]||(s[11]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addToElem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Δv, v_zero, ind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addToElem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Δv, _, ind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>v</code>: a StaticVector or AbstractVector</p></li><li><p><code>Δv</code>: the value to be added</p></li><li><p><code>v_zero</code>: a StaticVector of zeros</p></li><li><p><code>ind::Int</code>: the index of the element to be added</p></li></ul>`,3))]),i("details",u,[i("summary",null,[s[12]||(s[12]=i("a",{id:"Sindbad.addVec",href:"#Sindbad.addVec"},[i("span",{class:"jlbinding"},"Sindbad.addVec")],-1)),s[13]||(s[13]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[14]||(s[14]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addVec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Δv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addVec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Δv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>add Δv to v when v is a StaticVector or a Vector.</p><p><strong>Arguments</strong></p><ul><li><p><code>v</code>: a StaticVector or AbstractVector</p></li><li><p><code>Δv</code>: a StaticVector or AbstractVector</p></li></ul>`,4))]),i("details",y,[i("summary",null,[s[15]||(s[15]=i("a",{id:"Sindbad.checkMissingVarInfo",href:"#Sindbad.checkMissingVarInfo"},[i("span",{class:"jlbinding"},"Sindbad.checkMissingVarInfo")],-1)),s[16]||(s[16]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[17]||(s[17]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkMissingVarInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appr)</span></span></code></pre></div><p>Check for missing variable information in the SINDBAD variable catalog for a given approach or model.</p><p><strong>Description</strong></p><p>The <code>checkMissingVarInfo</code> function identifies variables used in a SINDBAD model or approach that are missing detailed information in the SINDBAD variable catalog. It inspects the inputs and outputs of the model&#39;s methods (<code>define</code>, <code>precompute</code>, <code>compute</code>, <code>update</code>) and checks if their metadata (e.g., <code>long_name</code>, <code>description</code>, <code>units</code>) is properly defined. If any information is missing, it provides a warning and displays the missing details.</p><p><strong>Arguments</strong></p><ul><li><p><code>appr</code>: The SINDBAD model or approach to check for missing variable information. This can be a specific approach or a model containing multiple approaches.</p></li><li><p>if no argument is provided, it checks all approaches in the model.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>nothing</code>: The function does not return a value but prints warnings and missing variable details to the console.</li></ul><p><strong>Behavior</strong></p><ul><li><p>For a specific approach, it checks the inputs and outputs of the methods (<code>define</code>, <code>precompute</code>, <code>compute</code>, <code>update</code>) for missing variable information.</p></li><li><p>For a model, it recursively checks all sub-approaches for missing variable information.</p></li><li><p>If a variable is missing metadata, it displays the missing details and provides guidance for adding the variable to the SINDBAD variable catalog.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check for missing variable information in a specific approach</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkMissingVarInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ambientCO2_constant)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check for missing variable information in all approaches of a model</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkMissingVarInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cCycle)</span></span></code></pre></div>`,12))]),i("details",E,[i("summary",null,[s[18]||(s[18]=i("a",{id:"Sindbad.clampZeroOne-Tuple{Any}",href:"#Sindbad.clampZeroOne-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.clampZeroOne")],-1)),s[19]||(s[19]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[20]||(s[20]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clampZeroOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span></code></pre></div><p>returns max(min(num, 1), 0)</p>',2))]),i("details",m,[i("summary",null,[s[21]||(s[21]=i("a",{id:"Sindbad.cumSum!-Tuple{AbstractVector, AbstractVector}",href:"#Sindbad.cumSum!-Tuple{AbstractVector, AbstractVector}"},[i("span",{class:"jlbinding"},"Sindbad.cumSum!")],-1)),s[22]||(s[22]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cumSum!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i_n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, o_ut</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>fill out the output vector with the cumulative sum of elements from input vector</p>',2))]),i("details",b,[i("summary",null,[s[24]||(s[24]=i("a",{id:"Sindbad.defaultVariableInfo",href:"#Sindbad.defaultVariableInfo"},[i("span",{class:"jlbinding"},"Sindbad.defaultVariableInfo")],-1)),s[25]||(s[25]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[26]||(s[26]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">defaultVariableInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>a central helper function to get the default information of a sindbad variable as a dictionary</p>',2))]),i("details",C,[i("summary",null,[s[27]||(s[27]=i("a",{id:"Sindbad.flagLower-Tuple{AbstractMatrix}",href:"#Sindbad.flagLower-Tuple{AbstractMatrix}"},[i("span",{class:"jlbinding"},"Sindbad.flagLower")],-1)),s[28]||(s[28]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[29]||(s[29]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flagLower</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>returns a matrix of same shape as input with 1 for all below diagonal elements and 0 elsewhere</p>',2))]),i("details",f,[i("summary",null,[s[30]||(s[30]=i("a",{id:"Sindbad.flagUpper-Tuple{AbstractMatrix}",href:"#Sindbad.flagUpper-Tuple{AbstractMatrix}"},[i("span",{class:"jlbinding"},"Sindbad.flagUpper")],-1)),s[31]||(s[31]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[32]||(s[32]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flagUpper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>returns a matrix of same shape as input with 1 for all above diagonal elements and 0 elsewhere</p>',2))]),i("details",_,[i("summary",null,[s[33]||(s[33]=i("a",{id:"Sindbad.generateSindbadApproach-Tuple{Symbol, String, Symbol, String, Int64}",href:"#Sindbad.generateSindbadApproach-Tuple{Symbol, String, Symbol, String, Int64}"},[i("span",{class:"jlbinding"},"Sindbad.generateSindbadApproach")],-1)),s[34]||(s[34]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generateSindbadApproach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, model_purpose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, appr_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, appr_purpose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:precompute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), force_over_write</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate a SINDBAD model and/or approach with code templates.</p><p><strong>Due to risk of overwriting code, the function only succeeds if y|Y||Yes|Ya, etc., are given in the confirmation prompt. This function only works if the call is copy-pasted into the REPL and not evaluated from a file/line. See the example below for the syntax.</strong></p><p><strong>Description</strong></p><p>The <code>generateSindbadApproach</code> function creates a SINDBAD model and/or approach by generating code templates for their structure, parameters, methods, and documentation. It ensures consistency with the SINDBAD framework and adheres to naming conventions. If the model or approach already exists, it avoids overwriting existing files unless explicitly permitted. The generated code includes placeholders for methods (<code>define</code>, <code>precompute</code>, <code>compute</code>, <code>update</code>) and automatically generates docstrings for the model and approach.</p><p><strong>Arguments</strong></p><ul><li><p><code>model_name</code>: The name of the SINDBAD model to which the approach belongs.</p></li><li><p><code>model_purpose</code>: A string describing the purpose of the model.</p></li><li><p><code>appr_name</code>: The name of the approach to be generated.</p></li><li><p><code>appr_purpose</code>: A string describing the purpose of the approach.</p></li><li><p><code>n_parameters</code>: The number of parameters required by the approach.</p></li><li><p><code>methods</code>: A tuple of method names to include in the approach (default: <code>(:define, :precompute, :compute, :update)</code>).</p></li><li><p><code>force_over_write</code>: A symbol indicating whether to overwrite existing files or types. Options are:</p><ul><li><p><code>:none</code> (default): Do not overwrite existing files or types.</p></li><li><p><code>:model</code>: Overwrite the model file and type.</p></li><li><p><code>:approach</code>: Overwrite the approach file and type.</p></li><li><p><code>:both</code>: Overwrite both model and approach files and types.</p></li></ul></li></ul><p><strong>Returns</strong></p><ul><li><code>nothing</code>: The function generates the required files and writes them to the appropriate directory.</li></ul><p><strong>Behavior</strong></p><ul><li><p>If the model does not exist, it generates a new model file with the specified <code>model_name</code> and <code>model_purpose</code>.</p></li><li><p>If the approach does not exist, it generates a new approach file with the specified <code>appr_name</code>, <code>appr_purpose</code>, and <code>n_parameters</code>.</p></li><li><p>Ensures that the approach name follows the SINDBAD naming convention (<code>&lt;model_name&gt;_&lt;approach_name&gt;</code>).</p></li><li><p>Prompts the user for confirmation before generating files to avoid accidental overwrites.</p></li><li><p>Includes placeholders for methods (<code>define</code>, <code>precompute</code>, <code>compute</code>, <code>update</code>) and generates a consistent docstring for the approach.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generate a new SINDBAD approach for an existing model</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generateSindbadApproach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:ambientCO2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Represents ambient CO2 concentration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sets the value of ambient CO2 as a constant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generate a new SINDBAD model and approach</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generateSindbadApproach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:newModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Represents a new SINDBAD model&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:newApproach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Implements a new approach for the model&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generate a SINDBAD model and approach with force_over_write</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generateSindbadApproach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:newModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Represents a new SINDBAD model&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:newApproach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Implements a new approach for the model&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; force_over_write</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># overwrite both model and approach</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generateSindbadApproach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:newModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Represents a new SINDBAD model&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:newApproach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Implements a new approach for the model&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; force_over_write</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:approach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># overwrite just approach approach</span></span></code></pre></div><p><strong>Notes</strong></p><ul><li><p>The function ensures that the generated code adheres to SINDBAD conventions and includes all necessary metadata and documentation.</p></li><li><p>If the model or approach already exists, the function does not overwrite the files unless explicitly confirmed by the user.</p></li><li><p>The function provides warnings and prompts to ensure safe file generation and minimize the risk of accidental overwrites.</p></li></ul>`,15))]),i("details",F,[i("summary",null,[s[36]||(s[36]=i("a",{id:"Sindbad.getFrac-Tuple{Any, Any}",href:"#Sindbad.getFrac-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"Sindbad.getFrac")],-1)),s[37]||(s[37]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[38]||(s[38]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getFrac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num, den)</span></span></code></pre></div><p>return either a ratio or numerator depending on whether denomitor is a zero</p>',2))]),i("details",v,[i("summary",null,[s[39]||(s[39]=i("a",{id:"Sindbad.getInOutModel",href:"#Sindbad.getInOutModel"},[i("span",{class:"jlbinding"},"Sindbad.getInOutModel")],-1)),s[40]||(s[40]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[41]||(s[41]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getInOutModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LandEcosystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getInOutModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LandEcosystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, model_func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getInOutModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LandEcosystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, model_funcs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Parses and retrieves the inputs, outputs, and parameters (I/O/P) of SINDBAD models for specified functions or all functions.</p><p><strong>Arguments:</strong></p><ul><li><p><code>model::LandEcosystem</code>: A SINDBAD model instance. If no additional arguments are provided, parses all inputs, outputs, and parameters for all functions of the model.</p></li><li><p><code>model_func::Symbol</code>: (Optional) A single symbol representing a specific model function to parse (e.g., <code>:precompute</code>, <code>:parameters</code>, <code>:compute</code>).</p></li><li><p><code>model_funcs::Tuple</code>: (Optional) A tuple of symbols representing multiple model functions to parse (e.g., <code>(:precompute, :parameters)</code>).</p></li></ul><p><strong>Returns:</strong></p><ul><li>An <code>OrderedDict</code> containing the parsed inputs, outputs, and parameters for the specified functions or all functions of the model: <ul><li><p><code>:input</code>: A tuple of input variables for the model function(s).</p></li><li><p><code>:output</code>: A tuple of output variables for the model function(s).</p></li><li><p><code>:approach</code>: The name of the model or function being parsed.</p></li></ul></li></ul><p><strong>Notes:</strong></p><ul><li><p>If <code>model_func</code> or <code>model_funcs</code> is not provided, the function parses all default SINDBAD model functions (<code>:parameters</code>, <code>:compute</code>, <code>:define</code>, <code>:precompute</code>, <code>:update</code>).</p></li><li><p>For each function:</p><ul><li><p>Inputs are extracted from lines containing <code>⇐</code>, <code>land.</code>, or <code>forcing.</code>.</p></li><li><p>Outputs are extracted from lines containing <code>⇒</code>.</p></li><li><p>Warnings are issued for unextracted variables from <code>land</code> or <code>forcing</code> that do not follow the convention of unpacking variables locally using <code>@unpack_nt</code>.</p></li></ul></li><li><p>If <code>:parameters</code> is included in <code>model_funcs</code>, the function directly retrieves model parameters using <code>modelParameter</code>.</p></li></ul><p><strong>Examples:</strong></p><ol><li><strong>Parsing all functions of a model</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getInOutModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_model)</span></span></code></pre></div><ol><li><strong>Parsing a specific function of a model</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compute_io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getInOutModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_model, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol><li><strong>Parsing multiple functions of a model</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getInOutModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_model, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:precompute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><ol><li><strong>Handling warnings for unextracted variables</strong>:</li></ol><ul><li>If a variable from <code>land</code> or <code>forcing</code> is not unpacked using <code>@unpack_nt</code>, a warning is issued to encourage better coding practices.</li></ul>`,17))]),i("details",A,[i("summary",null,[s[42]||(s[42]=i("a",{id:"Sindbad.getInOutModels",href:"#Sindbad.getInOutModels"},[i("span",{class:"jlbinding"},"Sindbad.getInOutModels")],-1)),s[43]||(s[43]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[44]||(s[44]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getInOutModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ind_range</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UnitRange{Int64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getInOutModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getInOutModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models, model_funcs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getInOutModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models, model_func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Parses and retrieves the inputs, outputs, and parameters (I/O/P) of multiple SINDBAD models with varying levels of specificity.</p><p><strong>Arguments:</strong></p><ol><li><strong>For the first variant</strong>:</li></ol><ul><li><code>ind_range::UnitRange{Int64}</code>: A range to select models from all possible SINDBAD models (default: <code>1:10000</code>). This can be set to a smaller range (e.g., <code>1:10</code>) to parse a subset of models for testing purposes.</li></ul><ol start="2"><li><strong>For the second variant</strong>:</li></ol><ul><li><code>models::Tuple</code>: A tuple of instantiated SINDBAD models. Used when working with specific model instances rather than selecting from all possible models.</li></ul><ol start="3"><li><strong>For the third variant</strong>:</li></ol><ul><li><p><code>models</code>: A tuple of instantiated SINDBAD models.</p></li><li><p><code>model_funcs::Tuple</code>: A tuple of symbols representing model functions to parse (e.g., <code>(:precompute, :compute)</code>). Allows parsing multiple specific functions of the provided models.</p></li></ul><ol start="4"><li><strong>For the fourth variant</strong>:</li></ol><ul><li><p><code>models</code>: A tuple of instantiated SINDBAD models.</p></li><li><p><code>model_func::Symbol</code>: A single symbol specifying one model function to parse (e.g., <code>:precompute</code>). Used when only one function&#39;s inputs and outputs need to be analyzed.</p></li></ul><p><strong>Returns:</strong></p><ul><li>An <code>OrderedDict</code> containing the parsed inputs, outputs, and parameters for the specified models and functions: <ul><li><p>Keys represent the model names.</p></li><li><p>Values are <code>OrderedDict</code>s containing the parsed I/O/P for the specified functions.</p></li></ul></li></ul><p><strong>Notes:</strong></p><ul><li><p><strong>Default Behavior</strong>:</p><ul><li><p>If <code>ind_range</code> is provided, the function selects models from the global SINDBAD model dictionary using the specified range.</p></li><li><p>If <code>model_funcs</code> or <code>model_func</code> is not provided, the function parses all default SINDBAD model functions (<code>:parameters</code>, <code>:compute</code>, <code>:define</code>, <code>:precompute</code>, <code>:update</code>).</p></li></ul></li><li><p><strong>Input and Output Parsing</strong>:</p><ul><li><p>Inputs are extracted from lines containing <code>⇐</code>, <code>land.</code>, or <code>forcing.</code>.</p></li><li><p>Outputs are extracted from lines containing <code>⇒</code>.</p></li><li><p>Warnings are issued for unextracted variables from <code>land</code> or <code>forcing</code> that do not follow the convention of unpacking variables locally using <code>@unpack_nt</code>.</p></li></ul></li><li><p><strong>Integration with <code>getInOutModel</code></strong>:</p><ul><li>This function internally calls <code>getInOutModel</code> for each model and function to retrieve the I/O/P details.</li></ul></li></ul><p><strong>Examples:</strong></p><ol><li><strong>Parsing all models in a range</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getInOutModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol><li><strong>Parsing specific models</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getInOutModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((model1, model2))</span></span></code></pre></div><ol><li><strong>Parsing specific functions of models</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getInOutModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((model1, model2), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:precompute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><ol><li><strong>Parsing a single function of models</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getInOutModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((model1, model2), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol><li><strong>Handling warnings for unextracted variables</strong>:</li></ol><ul><li>If a variable from <code>land</code> or <code>forcing</code> is not unpacked using <code>@unpack_nt</code>, a warning is issued to encourage better coding practices.</li></ul>`,26))]),i("details",T,[i("summary",null,[s[45]||(s[45]=i("a",{id:"Sindbad.getMethodTypes-Tuple{Any}",href:"#Sindbad.getMethodTypes-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.getMethodTypes")],-1)),s[46]||(s[46]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getMethodTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fn)</span></span></code></pre></div><p>Retrieve the types of the arguments for all methods of a given function.</p><p><strong>Arguments</strong></p><ul><li><code>fn</code>: The function for which the method argument types are to be retrieved.</li></ul><p><strong>Returns</strong></p><ul><li>A vector containing the types of the arguments for each method of the function.</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">types </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getMethodTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(example_function)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(types) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: [Int64, Float64]</span></span></code></pre></div>`,8))]),i("details",S,[i("summary",null,[s[48]||(s[48]=i("a",{id:"Sindbad.getSindbadModelOrder-Tuple{Any}",href:"#Sindbad.getSindbadModelOrder-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.getSindbadModelOrder")],-1)),s[49]||(s[49]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[50]||(s[50]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getSindbadModelOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_name)</span></span></code></pre></div><p>helper function to return the default order of a sindbad model</p>',2))]),i("details",j,[i("summary",null,[s[51]||(s[51]=i("a",{id:"Sindbad.getSindbadModels-Tuple{}",href:"#Sindbad.getSindbadModels-Tuple{}"},[i("span",{class:"jlbinding"},"Sindbad.getSindbadModels")],-1)),s[52]||(s[52]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[53]||(s[53]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getSindbadModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>helper function to return a dictionary of sindbad model and approaches</p>',2))]),i("details",D,[i("summary",null,[s[54]||(s[54]=i("a",{id:"Sindbad.getTypedModel",href:"#Sindbad.getTypedModel"},[i("span",{class:"jlbinding"},"Sindbad.getTypedModel")],-1)),s[55]||(s[55]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[56]||(s[56]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTypedModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, model_timestep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;day&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTypedModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, model_timestep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;day&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float64)</span></span></code></pre></div><p>Get a SINDBAD model and instantiate it with the given datatype.</p><p><strong>Arguments</strong></p><ul><li><p><code>model::String or Symbol</code>: A SINDBAD model name.</p></li><li><p><code>model_timestep</code>: A time step for the model run (default: <code>&quot;day&quot;</code>).</p></li><li><p><code>num_type</code>: A number type to use for model parameters (default: Float64).</p></li></ul>`,4))]),i("details",B,[i("summary",null,[s[57]||(s[57]=i("a",{id:"Sindbad.getUniqueVarNames-Tuple{Any}",href:"#Sindbad.getUniqueVarNames-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.getUniqueVarNames")],-1)),s[58]||(s[58]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getUniqueVarNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_pairs)</span></span></code></pre></div><p>return the list of variable names to be used to write model outputs to a field. - checks if the variable name is duplicated across different fields of SINDBAD land</p><ul><li>uses <code>field__variablename</code> in case of duplicates, else uses the actual model variable name</li></ul>',3))]),i("details",x,[i("summary",null,[s[60]||(s[60]=i("a",{id:"Sindbad.getUnitConversionForParameter-Tuple{Any, Any}",href:"#Sindbad.getUnitConversionForParameter-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"Sindbad.getUnitConversionForParameter")],-1)),s[61]||(s[61]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[62]||(s[62]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getUnitConversionForParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p_timescale, model_timestep)</span></span></code></pre></div><p>helper/wrapper function to get unit conversion factors for model parameters that are timescale dependent</p><p><strong>Arguments:</strong></p><ul><li><p><code>p_timescale</code>: time scale of a SINDBAD model parameter</p></li><li><p><code>model_timestep</code>: time step of the model run</p></li></ul>',4))]),i("details",I,[i("summary",null,[s[63]||(s[63]=i("a",{id:"Sindbad.getVarFull-Tuple{Any}",href:"#Sindbad.getVarFull-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.getVarFull")],-1)),s[64]||(s[64]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[65]||(s[65]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getVarFull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_pair)</span></span></code></pre></div><p>return the variable full name used as the key in the catalog of sindbad_variables from a pair consisting of the field and subfield of SINDBAD land. Convention is <code>field__subfield</code> of land</p>',2))]),i("details",V,[i("summary",null,[s[66]||(s[66]=i("a",{id:"Sindbad.getVariableInfo",href:"#Sindbad.getVariableInfo"},[i("span",{class:"jlbinding"},"Sindbad.getVariableInfo")],-1)),s[67]||(s[67]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[68]||(s[68]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getVariableInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vari_b, t_step </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> day)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><p><code>vari_b</code>: a variable name in the form of field__subfield</p></li><li><p><code>t_step</code>: time step of the variable, default is &quot;day&quot;</p></li></ul>',3))]),i("details",P,[i("summary",null,[s[69]||(s[69]=i("a",{id:"Sindbad.getVariableInfo-2",href:"#Sindbad.getVariableInfo-2"},[i("span",{class:"jlbinding"},"Sindbad.getVariableInfo")],-1)),s[70]||(s[70]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[71]||(s[71]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getVariableInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vari_b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t_step </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> day)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><p><code>vari_b</code>: a variable name</p></li><li><p><code>t_step</code>: time step of the variable, default is &quot;day&quot;</p></li></ul>',3))]),i("details",w,[i("summary",null,[s[72]||(s[72]=i("a",{id:"Sindbad.getZix",href:"#Sindbad.getZix"},[i("span",{class:"jlbinding"},"Sindbad.getZix")],-1)),s[73]||(s[73]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[74]||(s[74]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getZix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SubArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getZix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SubArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zixhelpersPool)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getZix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zixhelpersPool)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getZix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zixhelpersPool)</span></span></code></pre></div><p>returns the indices of a view for a subArray</p>`,2))]),i("details",M,[i("summary",null,[s[75]||(s[75]=i("a",{id:"Sindbad.maxOne-Tuple{Any}",href:"#Sindbad.maxOne-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.maxOne")],-1)),s[76]||(s[76]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[77]||(s[77]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">maxOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span></code></pre></div><p>returns max(num, 1)</p>',2))]),i("details",N,[i("summary",null,[s[78]||(s[78]=i("a",{id:"Sindbad.maxZero-Tuple{Any}",href:"#Sindbad.maxZero-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.maxZero")],-1)),s[79]||(s[79]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[80]||(s[80]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">maxZero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span></code></pre></div><p>returns max(num, 0)</p>',2))]),i("details",O,[i("summary",null,[s[81]||(s[81]=i("a",{id:"Sindbad.minOne-Tuple{Any}",href:"#Sindbad.minOne-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.minOne")],-1)),s[82]||(s[82]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[83]||(s[83]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span></code></pre></div><p>returns min(num, 1)</p>',2))]),i("details",R,[i("summary",null,[s[84]||(s[84]=i("a",{id:"Sindbad.minZero-Tuple{Any}",href:"#Sindbad.minZero-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.minZero")],-1)),s[85]||(s[85]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[86]||(s[86]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minZero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span></code></pre></div><p>returns min(num, 0)</p>',2))]),i("details",z,[i("summary",null,[s[87]||(s[87]=i("a",{id:"Sindbad.modelParameter",href:"#Sindbad.modelParameter"},[i("span",{class:"jlbinding"},"Sindbad.modelParameter")],-1)),s[88]||(s[88]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[89]||(s[89]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">modelParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models, model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">modelParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LandEcosystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, show</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return and optionally display the current parameters of a given SINDBAD model.</p><p><strong>Arguments</strong></p><ul><li><p><code>models</code>: A list/collection of SINDBAD models, required when <code>model</code> is a Symbol.</p></li><li><p><code>model::Symbol</code>: A SINDBAD model name.</p></li><li><p><code>model::LandEcosystem</code>: A SINDBAD model instance of type LandEcosystem.</p></li><li><p><code>show::Bool</code>: A flag to print parameters to the screen (default: true).</p></li></ul>`,4))]),i("details",q,[i("summary",null,[s[90]||(s[90]=i("a",{id:"Sindbad.modelParameters-Tuple{Any}",href:"#Sindbad.modelParameters-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.modelParameters")],-1)),s[91]||(s[91]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[92]||(s[92]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">modelParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models)</span></span></code></pre></div><p>shows the current parameters of all given models</p><p><strong>Arguments:</strong></p><ul><li><code>models</code>: a list/collection of SINDBAD models</li></ul>',4))]),i("details",U,[i("summary",null,[s[93]||(s[93]=i("a",{id:"Sindbad.offDiag-Tuple{AbstractMatrix}",href:"#Sindbad.offDiag-Tuple{AbstractMatrix}"},[i("span",{class:"jlbinding"},"Sindbad.offDiag")],-1)),s[94]||(s[94]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[95]||(s[95]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">offDiag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>returns a vector comprising of off diagonal elements of a matrix</p>',2))]),i("details",L,[i("summary",null,[s[96]||(s[96]=i("a",{id:"Sindbad.offDiagLower-Tuple{AbstractMatrix}",href:"#Sindbad.offDiagLower-Tuple{AbstractMatrix}"},[i("span",{class:"jlbinding"},"Sindbad.offDiagLower")],-1)),s[97]||(s[97]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[98]||(s[98]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">offDiagLower</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>returns a vector comprising of below diagonal elements of a matrix</p>',2))]),i("details",Z,[i("summary",null,[s[99]||(s[99]=i("a",{id:"Sindbad.offDiagUpper-Tuple{AbstractMatrix}",href:"#Sindbad.offDiagUpper-Tuple{AbstractMatrix}"},[i("span",{class:"jlbinding"},"Sindbad.offDiagUpper")],-1)),s[100]||(s[100]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[101]||(s[101]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">offDiagUpper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>returns a vector comprising of above diagonal elements of a matrix</p>',2))]),i("details",G,[i("summary",null,[s[102]||(s[102]=i("a",{id:"Sindbad.repElem-Tuple{AbstractVector, Any, Any, Any, Int64}",href:"#Sindbad.repElem-Tuple{AbstractVector, Any, Any, Any, Int64}"},[i("span",{class:"jlbinding"},"Sindbad.repElem")],-1)),s[103]||(s[103]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[104]||(s[104]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repElem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, v_elem, _, _, ind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repElem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, v_elem, v_zero, v_one, ind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>v</code>: a StaticVector or AbstractVector</p></li><li><p><code>v_elem</code>: the value to be replaced with</p></li><li><p><code>v_zero</code>: a StaticVector of zeros</p></li><li><p><code>v_one</code>: a StaticVector of ones</p></li><li><p><code>ind::Int</code>: the index of the element to be replaced</p></li></ul>`,3))]),i("details",K,[i("summary",null,[s[105]||(s[105]=i("a",{id:"Sindbad.repVec",href:"#Sindbad.repVec"},[i("span",{class:"jlbinding"},"Sindbad.repVec")],-1)),s[106]||(s[106]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[107]||(s[107]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repVec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, v_new)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repVec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, v_new)</span></span></code></pre></div><p>replaces the values of a vector with a new value</p><p><strong>Arguments:</strong></p><ul><li><p><code>v</code>: an AbstractVector or a StaticVector</p></li><li><p><code>v_new</code>: a new value to replace the old one</p></li></ul>`,4))]),i("details",$,[i("summary",null,[s[108]||(s[108]=i("a",{id:"Sindbad.setComponentFromMainPool-Union{Tuple{zix}, Tuple{s_comps}, Tuple{s_main}, Tuple{Any, Any, Val{s_main}, Val{s_comps}, Val{zix}}} where {s_main, s_comps, zix}",href:"#Sindbad.setComponentFromMainPool-Union{Tuple{zix}, Tuple{s_comps}, Tuple{s_main}, Tuple{Any, Any, Val{s_main}, Val{s_comps}, Val{zix}}} where {s_main, s_comps, zix}"},[i("span",{class:"jlbinding"},"Sindbad.setComponentFromMainPool")],-1)),s[109]||(s[109]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[110]||(s[110]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setComponentFromMainPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(land, helpers, Val{s_main}, Val{s_comps}, Val{zix})</span></span></code></pre></div><ul><li><p>sets the component pools value using the values for the main pool</p></li><li><p>name are generated using the components in helpers so that the model formulations are not specific for poolnames and are dependent on model structure.json</p></li></ul><p><strong>Arguments:</strong></p><ul><li><p><code>land</code>: a core SINDBAD NT that contains all variables for a given time step that is overwritten at every timestep</p></li><li><p><code>helpers</code>: helper NT with necessary objects for model run and type consistencies</p></li><li><p><code>::Val{s_main}</code>: a NT with names of the main pools</p></li><li><p><code>::Val{s_comps}</code>: a NT with names of the component pools</p></li><li><p><code>::Val{zix}</code>: a NT with zix of each pool</p></li></ul>',4))]),i("details",W,[i("summary",null,[s[111]||(s[111]=i("a",{id:"Sindbad.setComponents-Union{Tuple{zix}, Tuple{s_comps}, Tuple{s_main}, Tuple{Any, Any, Val{s_main}, Val{s_comps}, Val{zix}}} where {s_main, s_comps, zix}",href:"#Sindbad.setComponents-Union{Tuple{zix}, Tuple{s_comps}, Tuple{s_main}, Tuple{Any, Any, Val{s_main}, Val{s_comps}, Val{zix}}} where {s_main, s_comps, zix}"},[i("span",{class:"jlbinding"},"Sindbad.setComponents")],-1)),s[112]||(s[112]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[113]||(s[113]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(land, helpers, Val{s_main}, Val{s_comps}, Val{zix})</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><p><code>land</code>: a core SINDBAD NT that contains all variables for a given time step that is overwritten at every timestep</p></li><li><p><code>helpers</code>: helper NT with necessary objects for model run and type consistencies</p></li><li><p><code>::Val{s_main}</code>: a NT with names of the main pools</p></li><li><p><code>::Val{s_comps}</code>: a NT with names of the component pools</p></li><li><p><code>::Val{zix}</code>: a NT with zix of each pool</p></li></ul>',3))]),i("details",Y,[i("summary",null,[s[114]||(s[114]=i("a",{id:"Sindbad.setMainFromComponentPool-Union{Tuple{zix}, Tuple{s_comps}, Tuple{s_main}, Tuple{Any, Any, Val{s_main}, Val{s_comps}, Val{zix}}} where {s_main, s_comps, zix}",href:"#Sindbad.setMainFromComponentPool-Union{Tuple{zix}, Tuple{s_comps}, Tuple{s_main}, Tuple{Any, Any, Val{s_main}, Val{s_comps}, Val{zix}}} where {s_main, s_comps, zix}"},[i("span",{class:"jlbinding"},"Sindbad.setMainFromComponentPool")],-1)),s[115]||(s[115]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[116]||(s[116]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setMainFromComponentPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(land, helpers, Val{s_main}, Val{s_comps}, Val{zix})</span></span></code></pre></div><ul><li><p>sets the main pool from the values of the component pools</p></li><li><p>name are generated using the components in helpers so that the model formulations are not specific for poolnames and are dependent on model structure.json</p></li></ul><p><strong>Arguments:</strong></p><ul><li><p><code>land</code>: a core SINDBAD NT that contains all variables for a given time step that is overwritten at every timestep</p></li><li><p><code>helpers</code>: helper NT with necessary objects for model run and type consistencies</p></li><li><p><code>::Val{s_main}</code>: a NT with names of the main pools</p></li><li><p><code>::Val{s_comps}</code>: a NT with names of the component pools</p></li><li><p><code>::Val{zix}</code>: a NT with zix of each pool</p></li></ul>',4))]),i("details",H,[i("summary",null,[s[117]||(s[117]=i("a",{id:"Sindbad.totalS-Tuple{Any, Any}",href:"#Sindbad.totalS-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"Sindbad.totalS")],-1)),s[118]||(s[118]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[119]||(s[119]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">totalS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s, sΔ)</span></span></code></pre></div><p>return total storage amount given the storage and the current delta storage without creating an allocation for a temporary array</p>',2))]),i("details",J,[i("summary",null,[s[120]||(s[120]=i("a",{id:"Sindbad.totalS-Tuple{Any}",href:"#Sindbad.totalS-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.totalS")],-1)),s[121]||(s[121]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[122]||(s[122]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">totalS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span></code></pre></div><p>return total storage amount given the storage without creating an allocation for a temporary array</p>',2))]),i("details",Q,[i("summary",null,[s[123]||(s[123]=i("a",{id:"Sindbad.whatIs",href:"#Sindbad.whatIs"},[i("span",{class:"jlbinding"},"Sindbad.whatIs")],-1)),s[124]||(s[124]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[125]||(s[125]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">whatIs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">whatIs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_field</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, var_sfield</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">whatIs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_field</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, var_sfield</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A helper function to return the information of a SINDBAD variable</p><p><strong>Arguments:</strong></p><ul><li><p><code>var_name</code>: name of the variable</p></li><li><p><code>var_field</code>: field of the variable</p></li><li><p><code>var_sfield</code>: subfield of the variable</p></li></ul>`,4))]),i("details",X,[i("summary",null,[s[126]||(s[126]=i("a",{id:"Sindbad.@add_to_elem-Tuple{Expr}",href:"#Sindbad.@add_to_elem-Tuple{Expr}"},[i("span",{class:"jlbinding"},"Sindbad.@add_to_elem")],-1)),s[127]||(s[127]=a()),n(t,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[128]||(s[128]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@add_to_elem</span></span></code></pre></div><p>macro to add to an element of a vector or a static vector.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">helpers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; pools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        zeros</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; cOther </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ones </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; cOther </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cOther </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># and then add 1.0f0 to the first element of cOther</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@add_to_elem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cOther, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:cOther</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,4))]),i("details",ss,[i("summary",null,[s[129]||(s[129]=i("a",{id:"Sindbad.@pack_nt-Tuple{Any}",href:"#Sindbad.@pack_nt-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.@pack_nt")],-1)),s[130]||(s[130]=a()),n(t,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[131]||(s[131]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@pack_nt</span></span></code></pre></div><p>macro to pack variables into a named tuple.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@pack_nt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> begin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (a, b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diagnostics</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (c, d, f) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fluxes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@pack_nt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a, b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diagnostics</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@pack_nt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diagnostics</span></span></code></pre></div>`,4))]),i("details",is,[i("summary",null,[s[132]||(s[132]=i("a",{id:"Sindbad.@rep_elem-Tuple{Expr}",href:"#Sindbad.@rep_elem-Tuple{Expr}"},[i("span",{class:"jlbinding"},"Sindbad.@rep_elem")],-1)),s[133]||(s[133]=a()),n(t,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[134]||(s[134]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@rep_elem</span></span></code></pre></div><p>macro to replace an element of a vector or a static vector.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">helpers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; pools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        zeros</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; cOther </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ones </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; cOther </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cOther </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># and then replace the first element of cOther with 1.0f0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@rep_elem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cOther, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:cOther</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,4))]),i("details",as,[i("summary",null,[s[135]||(s[135]=i("a",{id:"Sindbad.@rep_vec-Tuple{Expr}",href:"#Sindbad.@rep_vec-Tuple{Expr}"},[i("span",{class:"jlbinding"},"Sindbad.@rep_vec")],-1)),s[136]||(s[136]=a()),n(t,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[137]||(s[137]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@rep_vec</span></span></code></pre></div><p>macro to replace a vector or a static vector with a new value.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_vec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># and then replace the vector with 1.0f0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@rep_vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _vec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0f0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or with a new vector</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@rep_vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _vec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div>`,4))]),i("details",es,[i("summary",null,[s[138]||(s[138]=i("a",{id:"Sindbad.@unpack_nt-Tuple{Any}",href:"#Sindbad.@unpack_nt-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.@unpack_nt")],-1)),s[139]||(s[139]=a()),n(t,{type:"info",class:"jlObjectType jlMacro",text:"Macro"})]),s[140]||(s[140]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@unpack_nt</span></span></code></pre></div><p>macro to unpack variables from a named tuple.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@unpack_nt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (f1, f2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇐</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> forcing </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># named tuple</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@unpack_nt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇐</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diagnostics </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># named tuple</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@unpack_nt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> begin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (f1, f2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇐</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> forcing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    var1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇐</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diagnostics</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div>`,4))]),s[182]||(s[182]=i("h2",{id:"internal",tabindex:"-1"},[a("Internal "),i("a",{class:"header-anchor",href:"#internal","aria-label":'Permalink to "Internal"'},"​")],-1)),i("details",ts,[i("summary",null,[s[141]||(s[141]=i("a",{id:"DocStringExtensions.format-Tuple{Sindbad.BoundFields, Any, Any}",href:"#DocStringExtensions.format-Tuple{Sindbad.BoundFields, Any, Any}"},[i("span",{class:"jlbinding"},"DocStringExtensions.format")],-1)),s[142]||(s[142]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[143]||(s[143]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DocStringExtensions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(abbrv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BoundFields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, buf, doc)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(abbrv, buf, doc)</span></span></code></pre></div><p>Format documentation for bound fields extension.</p><p>This method extends the <code>DocStringExtensions.format</code> functionality to handle <code>BoundFields</code> type. It processes and formats the documentation for fields that are bound to a specific type or structure.</p><p><strong>Arguments</strong></p><ul><li><p><code>abbrv::BoundFields</code>: The bound fields abbreviation instance to be formatted</p></li><li><p><code>buf</code>: Buffer where the formatted documentation will be written</p></li><li><p><code>doc</code>: Documentation object containing the information to be formatted</p></li></ul><p><strong>Note</strong></p><p>This is an extension method for DocStringExtensions.jl package.</p>',8))]),i("details",ns,[i("summary",null,[s[144]||(s[144]=i("a",{id:"Sindbad.checkDisplayVariableDict-Tuple{Any}",href:"#Sindbad.checkDisplayVariableDict-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.checkDisplayVariableDict")],-1)),s[145]||(s[145]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[146]||(s[146]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkDisplayVariableDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_full)</span></span></code></pre></div>',1))]),i("details",ls,[i("summary",null,[s[147]||(s[147]=i("a",{id:"Sindbad.displayVariableDict",href:"#Sindbad.displayVariableDict"},[i("span",{class:"jlbinding"},"Sindbad.displayVariableDict")],-1)),s[148]||(s[148]=a()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[149]||(s[149]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">displayVariableDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dk, dv, exist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>a helper function to display the variable information in a dict form. This also allow for direct pasting when an unknown variable is queried</p><p><strong>Arguments:</strong></p><ul><li><p><code>dk</code>: a variable to use as the key</p></li><li><p><code>dv</code>: a variable to use as the key</p></li><li><p><code>exist</code>: whether the display is for an entry that exists or not</p></li></ul>',4))]),i("details",ps,[i("summary",null,[s[150]||(s[150]=i("a",{id:"Sindbad.flagOffDiag-Tuple{AbstractMatrix}",href:"#Sindbad.flagOffDiag-Tuple{AbstractMatrix}"},[i("span",{class:"jlbinding"},"Sindbad.flagOffDiag")],-1)),s[151]||(s[151]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[152]||(s[152]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flagOffDiag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>returns a matrix of same shape as input with 1 for all non diagonal elements</p>',2))]),i("details",ds,[i("summary",null,[s[153]||(s[153]=i("a",{id:"Sindbad.generateApproachCode-NTuple{4, Any}",href:"#Sindbad.generateApproachCode-NTuple{4, Any}"},[i("span",{class:"jlbinding"},"Sindbad.generateApproachCode")],-1)),s[154]||(s[154]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[155]||(s[155]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generateApproachCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_name, appr_name, appr_purpose, n_parameters; methods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:precompute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>Generate the code template for a SINDBAD approach.</p><p><strong>Description</strong></p><p>The <code>generateApproachCode</code> function creates a code template for a SINDBAD approach. It defines the structure, parameters, methods, and documentation for the approach, ensuring consistency with the SINDBAD framework. The generated code includes placeholders for methods (<code>define</code>, <code>precompute</code>, <code>compute</code>, <code>update</code>) and automatically generates a docstring for the approach.</p><p><strong>Arguments</strong></p><ul><li><p><code>model_name</code>: The name of the SINDBAD model to which the approach belongs.</p></li><li><p><code>appr_name</code>: The name of the approach to be generated.</p></li><li><p><code>appr_purpose</code>: A string describing the purpose of the approach.</p></li><li><p><code>n_parameters</code>: The number of parameters required by the approach.</p></li><li><p><code>methods</code>: A tuple of method names to include in the approach (default: <code>(:define, :precompute, :compute, :update)</code>).</p></li></ul><p><strong>Returns</strong></p><ul><li>A string containing the generated code template for the approach.</li></ul><p><strong>Behavior</strong></p><ul><li><p>If <code>n_parameters</code> is greater than 0, the function generates a parameterized structure for the approach, including default values and metadata for each parameter.</p></li><li><p>For each method in <code>methods</code>, the function generates a placeholder implementation with comments and instructions for customization.</p></li><li><p>The function also generates a purpose definition and a docstring for the approach, including placeholders for extended help, references, and versioning.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generate code for an approach with 2 parameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">approach_code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generateApproachCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:ambientCO2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:ambientCO2_constant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sets the value of ambient_CO2 as a constant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(approach_code)</span></span></code></pre></div>`,12))]),i("details",os,[i("summary",null,[s[156]||(s[156]=i("a",{id:"Sindbad.generateModelCode-Tuple{Any, Any}",href:"#Sindbad.generateModelCode-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"Sindbad.generateModelCode")],-1)),s[157]||(s[157]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[158]||(s[158]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">generateModelCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_name, model_purpose)</span></span></code></pre></div><p>Generate the code template for a SINDBAD model.</p><p><strong>Description</strong></p><p>The <code>generateModelCode</code> function creates a code template for a SINDBAD model. It defines the model&#39;s structure, purpose, and includes all associated approaches. The generated code ensures consistency with the SINDBAD framework and provides a standardized starting point for defining new models.</p><p><strong>Arguments</strong></p><ul><li><p><code>model_name</code>: The name of the SINDBAD model to be generated.</p></li><li><p><code>model_purpose</code>: A string describing the purpose of the model.</p></li></ul><p><strong>Returns</strong></p><ul><li>A string containing the generated code template for the model.</li></ul><p><strong>Behavior</strong></p><ul><li><p>Defines the model as an abstract type that inherits from <code>LandEcosystem</code>.</p></li><li><p>Sets the purpose of the model using the <code>purpose</code> function.</p></li><li><p>Includes all approaches associated with the model using the <code>includeApproaches</code> function.</p></li><li><p>Generates a placeholder docstring for the model, including a reference to <code>$(getBaseDocString)</code>.</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generate code for a SINDBAD model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generateModelCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:ambientCO2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Represents the ambient CO2 concentration in the ecosystem.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_code)</span></span></code></pre></div>`,12))]),i("details",hs,[i("summary",null,[s[159]||(s[159]=i("a",{id:"Sindbad.getFullVariableKey-Tuple{String, String}",href:"#Sindbad.getFullVariableKey-Tuple{String, String}"},[i("span",{class:"jlbinding"},"Sindbad.getFullVariableKey")],-1)),s[160]||(s[160]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[161]||(s[161]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getFullVariableKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_field</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, var_sfield</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>returns a symbol with <code>field__subfield</code> of land to be used as a key for an entry in variable catalog</p><p><strong>Arguments:</strong></p><ul><li><p><code>var_field</code>: land field of the variable</p></li><li><p><code>var_sfield</code>: land subfield of the variable</p></li></ul>',4))]),i("details",rs,[i("summary",null,[s[162]||(s[162]=i("a",{id:"Sindbad.getParameterValue-Tuple{Any, Any, Any}",href:"#Sindbad.getParameterValue-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"Sindbad.getParameterValue")],-1)),s[163]||(s[163]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[164]||(s[164]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getParameterValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, param_name, model_timestep)</span></span></code></pre></div><p>get a value of a given model parameter with units corrected</p><p><strong>Arguments:</strong></p><ul><li><p><code>model</code>: selected model</p></li><li><p><code>param_name</code>: name of the parameter</p></li><li><p><code>model_timestep</code>: time step of the model run</p></li></ul>',4))]),i("details",ks,[i("summary",null,[s[165]||(s[165]=i("a",{id:"Sindbad.getVarField-Tuple{Any}",href:"#Sindbad.getVarField-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.getVarField")],-1)),s[166]||(s[166]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[167]||(s[167]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getVarField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_pair)</span></span></code></pre></div><p>return the field name from a pair consisting of the field and subfield of SINDBAD land</p>',2))]),i("details",gs,[i("summary",null,[s[168]||(s[168]=i("a",{id:"Sindbad.getVarName-Tuple{Any}",href:"#Sindbad.getVarName-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.getVarName")],-1)),s[169]||(s[169]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[170]||(s[170]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getVarName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_pair)</span></span></code></pre></div><p>return the model variable name from a pair consisting of the field and subfield of SINDBAD land</p>',2))]),i("details",cs,[i("summary",null,[s[171]||(s[171]=i("a",{id:"Sindbad.getVariableCatalogFromLand-Tuple{Any}",href:"#Sindbad.getVariableCatalogFromLand-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.getVariableCatalogFromLand")],-1)),s[172]||(s[172]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[173]||(s[173]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getVariableCatalogFromLand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(land)</span></span></code></pre></div><p>a helper function to tentatively build a default variable catalog by parsing the fields and subfields of land. This is now a legacy function because it is not recommended way to generate a new catalog. The current catalog (sindbad_variables) has finalized entries, and new entries to the catalog should to be added there directly</p>',2))]),i("details",us,[i("summary",null,[s[174]||(s[174]=i("a",{id:"Sindbad.processPackNT-Tuple{Any}",href:"#Sindbad.processPackNT-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.processPackNT")],-1)),s[175]||(s[175]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[176]||(s[176]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">processPackNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ex)</span></span></code></pre></div>',1))]),i("details",ys,[i("summary",null,[s[177]||(s[177]=i("a",{id:"Sindbad.processUnpackNT-Tuple{Any}",href:"#Sindbad.processUnpackNT-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.processUnpackNT")],-1)),s[178]||(s[178]=a()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[179]||(s[179]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">processUnpackNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ex)</span></span></code></pre></div>',1))])])}const As=l(h,[["render",Es]]);export{vs as __pageData,As as default};
