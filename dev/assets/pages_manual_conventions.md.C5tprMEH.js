import{_ as s,c as a,o as e,aA as n}from"./chunks/framework.C07RQYAL.js";const c=JSON.parse('{"title":"Coding Guidelines for SINDBAD Model Functions","description":"","frontmatter":{},"headers":[],"relativePath":"pages/manual/conventions.md","filePath":"pages/manual/conventions.md","lastUpdated":null}'),t={name:"pages/manual/conventions.md"};function l(h,i,p,r,d,k){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="Coding-Guidelines-for-SINDBAD-Model-Functions" tabindex="-1">Coding Guidelines for SINDBAD Model Functions <a class="header-anchor" href="#Coding-Guidelines-for-SINDBAD-Model-Functions" aria-label="Permalink to &quot;Coding Guidelines for SINDBAD Model Functions {#Coding-Guidelines-for-SINDBAD-Model-Functions}&quot;">​</a></h1><p>Follow the guidelines so that SINDBAD model functions are consistent, maintainable, performant, and self-explainable.</p><h2 id="Struct-Definition:" tabindex="-1">Struct Definition: <a class="header-anchor" href="#Struct-Definition:" aria-label="Permalink to &quot;Struct Definition: {#Struct-Definition:}&quot;">​</a></h2><p>Use <code>@bounds</code>, <code>@describe</code>, <code>@units</code>, and <code>@timescale</code> annotations for parameter metadata. Define default values and valid ranges for parameters to ensure clarity and robustness.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@bounds</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @describe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @units</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @timescale</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @with_kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ApproachName {T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ApproachName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    param1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> default_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (min, max) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;description&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;units&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;timescale&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="Function-Structure" tabindex="-1">Function Structure <a class="header-anchor" href="#Function-Structure" aria-label="Permalink to &quot;Function Structure {#Function-Structure}&quot;">​</a></h2><h3 id="define-Function:" tabindex="-1"><code>define</code> Function: <a class="header-anchor" href="#define-Function:" aria-label="Permalink to &quot;\`define\` Function: {#define-Function:}&quot;">​</a></h3><ul><li><p>Initialize variables and arrays with appropriate dimensions and default values.</p></li><li><p>Use helper functions or constants for clarity and reusability.</p></li><li><p>Pack updated variables back into the land object.</p></li></ul><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ApproachName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, forcing, land, helpers)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @unpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @unpack_nt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Initialize variables</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Pack variables</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @pack_nt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diagnostics</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="precompute-Function:" tabindex="-1"><code>precompute</code> Function: <a class="header-anchor" href="#precompute-Function:" aria-label="Permalink to &quot;\`precompute\` Function: {#precompute-Function:}&quot;">​</a></h3><ul><li><p>Update variables based on parameters and forcing data.</p></li><li><p>Use loops or helper functions for repetitive tasks.</p></li><li><p>Ensure all updated variables are packed back into the land object.</p></li></ul><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> precompute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ApproachName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, forcing, land, helpers)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @unpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @unpack_nt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Update variables</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variable[index] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> new_value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Pack variables</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    @pack_nt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diagnostics</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> land</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="Helper-Functions:" tabindex="-1"><code>Helper</code> Functions: <a class="header-anchor" href="#Helper-Functions:" aria-label="Permalink to &quot;\`Helper\` Functions: {#Helper-Functions:}&quot;">​</a></h3><ul><li><p>Use helper functions (e.g., adjustPackPoolComponents) for modularity and to handle repetitive tasks like mapping or scaling variables.</p></li><li><p>Think of reusing such helpers in other models</p></li></ul><h2 id="Variable-Naming-and-Management:" tabindex="-1">Variable Naming and Management: <a class="header-anchor" href="#Variable-Naming-and-Management:" aria-label="Permalink to &quot;Variable Naming and Management: {#Variable-Naming-and-Management:}&quot;">​</a></h2><p>Use descriptive and meaningful names for variables and parameters to improve code readability. Example: <code>c_τ_Root = turnover_rate_root</code></p><p>Use <code>@unpack_nt</code> and <code>@pack_nt</code> macros to access forcing/land and pack land variables efficiently.</p><p>Clearly separate diagnostics, constants, and states in the land object.</p><ul><li><p>Follow <a href="./../concept/land">guidelines on the packing variables to an appropriate field of land</a>.</p></li><li><p>Use the model_name as the field when the variable is ONLY used in the model itself. Use the shared land fields for variable sharing across different models.</p></li></ul><div class="danger custom-block"><p class="custom-block-title">DANGER</p><ul><li><p>There are no checks for overwriting variables on land. Before packing a new variable to land. Ensure that it does not already exist in land.</p></li><li><p>Do not created a deeper level in land NamedTuple. By convention, all variable group are in the top level, and variable values are in the second level.</p></li></ul></div><h2 id="Ensuring-Type-Stability" tabindex="-1">Ensuring Type Stability <a class="header-anchor" href="#Ensuring-Type-Stability" aria-label="Permalink to &quot;Ensuring Type Stability {#Ensuring-Type-Stability}&quot;">​</a></h2><p>It is absolutely necessary to follow coding guidelines to maintain the high computing performance of SINDBAD models. Without these, the simulations can get very slow even with minor changes.</p><h3 id="Avoid-Hardcoding-Numbers" tabindex="-1">Avoid Hardcoding Numbers <a class="header-anchor" href="#Avoid-Hardcoding-Numbers" aria-label="Permalink to &quot;Avoid Hardcoding Numbers {#Avoid-Hardcoding-Numbers}&quot;">​</a></h3><p>Never hardcode numbers directly into the code. Instead, use parameters to define values. This ensures flexibility, readability, and maintainability. <strong>Avoid typing numbers</strong> inside the functions</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c_τ_Root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">some_constant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 27.38</span></span></code></pre></div><p>Because these numbers will be defined as Float64. Instead define them <strong>within the struct</strong> so that they are auto-magically type stabilized when SINDBAD experiments are setup. See example below.</p><h3 id="Define-parameters-in-the-struct" tabindex="-1">Define parameters in the struct <a class="header-anchor" href="#Define-parameters-in-the-struct" aria-label="Permalink to &quot;Define parameters in the struct {#Define-parameters-in-the-struct}&quot;">​</a></h3><p>The approach struct are versatile bucket that can hold both model parameters and constants that will never be calibrated.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@bounds</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @describe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @units</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @timescale</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @with_kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cCycleBase_GSI{T1, T2, T3}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    c_τ_Root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;turnover rate of root carbon pool&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;year-1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;year&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    c_τ_Wood</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.03</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;turnover rate of wood carbon pool&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;year-1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;year&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    some_constant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 27.38</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;constant that I will use in my mode&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note that the parameters and constants will be available in the approach <a href="./../concept/TEM">define, precompute, compute, update methods</a> when <code>@unpack_ApproachName params</code> is typed at the beginning of the function. Ensure that you do not use the parameters/constants defined in the struct as variables in your function.</p></div><h3 id="Avoid-Hardcoding-Array-Dimensions" tabindex="-1">Avoid Hardcoding Array Dimensions <a class="header-anchor" href="#Avoid-Hardcoding-Array-Dimensions" aria-label="Permalink to &quot;Avoid Hardcoding Array Dimensions {#Avoid-Hardcoding-Array-Dimensions}&quot;">​</a></h3><p>Use dynamic methods to determine array sizes or indices instead of hardcoding dimensions. This ensures flexibility and avoids errors when array sizes change. Example:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Avoid this:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">some_order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use this:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">some_order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">findall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z_zero), some_array))))</span></span></code></pre></div><h3 id="Replace-Values-Dynamically" tabindex="-1">Replace Values Dynamically <a class="header-anchor" href="#Replace-Values-Dynamically" aria-label="Permalink to &quot;Replace Values Dynamically {#Replace-Values-Dynamically}&quot;">​</a></h3><p>Differentiable programming limits the modification of array within the functions. <strong>So, replacing the element of an array will make the model non-differentiable</strong>.</p><p>Use internal function such as <code>repElem</code> and its shorthand macro <code>@rep_elem</code> to dynamically replace values in arrays or variables, ensuring consistency and avoiding hardcoding.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Avoid this:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_array[my_index] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> new_value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use this:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> repElem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_array, new_value, my_array, my_array, my_index)</span></span></code></pre></div><p>Note that the long and repetitive function call is only necessary when the size the array differs from standard land.pools.</p><p>For such arrays, the shorthand @rep_elem macro can be used as,</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@rep_elem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> new_pool_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (TWS, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:TWS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>where, <code>new_pool_value</code> will be used to replace the second element of <code>TWS</code> array</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Use <code>@code_warntype</code> to test for type stability in functions and ensure there are no type ambiguities. Useful guidelines are also available at: <a href="https://viralinstruction.com/posts/optimise/" target="_blank" rel="noreferrer">https://viralinstruction.com/posts/optimise/</a></p></div><h2 id="Metadata-and-Documentation:" tabindex="-1">Metadata and Documentation: <a class="header-anchor" href="#Metadata-and-Documentation:" aria-label="Permalink to &quot;Metadata and Documentation: {#Metadata-and-Documentation:}&quot;">​</a></h2><p>Add a purpose function to describe the role of the model or approach. Use @doc to provide detailed documentation, including references, versions, and authorship.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{ApproachName}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Description of the approach&#39;s purpose and summary of its main method or principle&quot;</span></span></code></pre></div><h2 id="Code-Readability:" tabindex="-1">Code Readability: <a class="header-anchor" href="#Code-Readability:" aria-label="Permalink to &quot;Code Readability: {#Code-Readability:}&quot;">​</a></h2><p>Use meaningful variable names and comments to explain complex logic.</p><h2 id="Versioning-and-References:" tabindex="-1">Versioning and References: <a class="header-anchor" href="#Versioning-and-References:" aria-label="Permalink to &quot;Versioning and References: {#Versioning-and-References:}&quot;">​</a></h2><p>Include version history and references in the documentation for traceability.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@doc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(getBaseDocString(ApproachName))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">*References*</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">- Author, Year. Title. Journal.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">*Versions*</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">- 1.0 on DD.MM.YYYY [author | @username]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ApproachName</span></span></code></pre></div><h2 id="Writing-Code" tabindex="-1">Writing Code <a class="header-anchor" href="#Writing-Code" aria-label="Permalink to &quot;Writing Code {#Writing-Code}&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>It is not recommended to build a model and approach from scratch by typing things. SINDBAD has a builtin function <code>generateSindbadApproach</code> to create the model and approach files that has all the components described. This ensures following the modeling conventions around which the performance and modularity are built.</p><p>Check the documentation of the function for further details as:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Sindbad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?generateSindbadApproach</span></span></code></pre></div></div>`,52)]))}const g=s(t,[["render",l]]);export{c as __pageData,g as default};
