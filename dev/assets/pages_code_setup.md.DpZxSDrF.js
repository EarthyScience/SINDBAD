import{_ as l,C as o,c as p,o as d,j as e,aA as a,a as s,G as n}from"./chunks/framework.C07RQYAL.js";const Di=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/code/setup.md","filePath":"pages/code/setup.md","lastUpdated":null}'),r={name:"pages/code/setup.md"},u={class:"jldocstring custom-block"},h={class:"jldocstring custom-block"},g={class:"jldocstring custom-block"},c={class:"jldocstring custom-block"},k={class:"jldocstring custom-block"},m={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},E={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},S={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},C={class:"jldocstring custom-block"},A={class:"jldocstring custom-block"},v={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"},j={class:"jldocstring custom-block"},D={class:"jldocstring custom-block"},N={class:"jldocstring custom-block"},I={class:"jldocstring custom-block"},x={class:"jldocstring custom-block"},B={class:"jldocstring custom-block"},P={class:"jldocstring custom-block"},M={class:"jldocstring custom-block"},V={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},O={class:"jldocstring custom-block"},w={class:"jldocstring custom-block"},z={class:"jldocstring custom-block"},q={class:"jldocstring custom-block"},L={class:"jldocstring custom-block"},G={class:"jldocstring custom-block"},J={class:"jldocstring custom-block"},W={class:"jldocstring custom-block"},U={class:"jldocstring custom-block"},H={class:"jldocstring custom-block"},$={class:"jldocstring custom-block"},K={class:"jldocstring custom-block"},Q={class:"jldocstring custom-block"},X={class:"jldocstring custom-block"},Y={class:"jldocstring custom-block"},Z={class:"jldocstring custom-block"},ii={class:"jldocstring custom-block"},ei={class:"jldocstring custom-block"},si={class:"jldocstring custom-block"},ti={class:"jldocstring custom-block"},ai={class:"jldocstring custom-block"},ni={class:"jldocstring custom-block"},li={class:"jldocstring custom-block"},oi={class:"jldocstring custom-block"},pi={class:"jldocstring custom-block"},di={class:"jldocstring custom-block"},ri={class:"jldocstring custom-block"},ui={class:"jldocstring custom-block"},hi={class:"jldocstring custom-block"},gi={class:"jldocstring custom-block"},ci={class:"jldocstring custom-block"},ki={class:"jldocstring custom-block"},mi={class:"jldocstring custom-block"},yi={class:"jldocstring custom-block"},bi={class:"jldocstring custom-block"},fi={class:"jldocstring custom-block"},Ei={class:"jldocstring custom-block"},Ti={class:"jldocstring custom-block"};function Si(_i,i,Ci,Ai,vi,Fi){const t=o("Badge");return d(),p("div",null,[e("details",u,[e("summary",null,[i[0]||(i[0]=e("a",{id:"SindbadSetup",href:"#SindbadSetup"},[e("span",{class:"jlbinding"},"SindbadSetup")],-1)),i[1]||(i[1]=s()),n(t,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),i[2]||(i[2]=a(`<p>SindbadSetup</p><p>The <code>SindbadSetup</code> package provides tools for setting up and configuring SINDBAD experiments and runs. It handles the creation of experiment configurations, model structures, parameters, and output setups, ensuring a streamlined workflow for SINDBAD simulations.</p><p><strong>Purpose:</strong></p><p>This package is designed to produce the SINDBAD <code>info</code> object, which contains all the necessary configurations and metadata for running SINDBAD experiments. It facilitates reading configurations, building model structures, and preparing outputs.</p><p><strong>Dependencies:</strong></p><ul><li><p><code>Sindbad</code>: Provides the core SINDBAD models.</p></li><li><p><code>Accessors</code>: Enables efficient access and modification of nested data structures, simplifying the handling of SINDBAD configurations.</p></li><li><p><code>ForwardDiff</code>: Supports automatic differentiation for parameter optimization and sensitivity analysis.</p></li><li><p><code>CSV</code>: Provides tools for reading and writing CSV files, commonly used for input and output data in SINDBAD experiments.</p></li><li><p><code>Dates</code>: Handles date and time operations, useful for managing temporal data in SINDBAD experiments.</p></li><li><p><code>Infiltrator</code>: Enables interactive debugging during the setup process, improving development and troubleshooting.</p></li><li><p><code>JSON</code>: Provides tools for parsing and generating JSON files, commonly used for configuration files.</p></li><li><p><code>JLD2</code>: Facilitates saving and loading SINDBAD configurations and outputs in a binary format for efficient storage and retrieval.</p></li><li><p><code>SindbadUtils</code>: Supplies utility functions for handling data and other helper tasks during the setup process.</p></li><li><p><code>SindbadMetrics</code>: Provides metrics for evaluating model performance, which can be integrated into the setup process.</p></li></ul><p><strong>Included Files:</strong></p><ol><li><strong><code>runtimeDispatchTypes.jl</code></strong>:</li></ol><ul><li>Defines runtime dispatch types used for configuring functions and their dispatches.</li></ul><ol start="2"><li><strong><code>default_options.jl</code></strong>:</li></ol><ul><li>Defines default configuration options for various optimization and global sensitivity analysis methods in SINDBAD.</li></ul><ol start="3"><li><strong><code>getConfiguration.jl</code></strong>:</li></ol><ul><li>Contains functions for reading and parsing configuration files (e.g., JSON or CSV) to initialize SINDBAD experiments.</li></ul><ol start="4"><li><strong><code>setupExperimentInfo.jl</code></strong>:</li></ol><ul><li>Builds the <code>info</code> object, which contains all the metadata and configurations required for running SINDBAD experiments.</li></ul><ol start="5"><li><strong><code>setupTypes.jl</code></strong>:</li></ol><ul><li>Defines instances of data types in SINDBAD after reading the information from settings files.</li></ul><ol start="6"><li><strong><code>setupPools.jl</code></strong>:</li></ol><ul><li>Handles the initialization of SINDBAD land by creating model pools, including state variables.</li></ul><ol start="7"><li><strong><code>setupParameters.jl</code></strong>:</li></ol><ul><li>Manages the loading and setup of model parameters, including bounds, scaling, and initial values.</li></ul><ol start="8"><li><strong><code>setupModels.jl</code></strong>:</li></ol><ul><li>Constructs the model structure, including the selection and configuration of orders SINDBAD models.</li></ul><ol start="9"><li><strong><code>setupOutput.jl</code></strong>:</li></ol><ul><li>Prepares the output structure for SINDBAD experiments.</li></ul><ol start="10"><li><strong><code>setupOptimization.jl</code></strong>:</li></ol><ul><li>Configures optimization settings for parameter estimation and model calibration.</li></ul><ol start="11"><li><strong><code>setupInfo.jl</code></strong>:</li></ol><ul><li>Calls various functions to collect the <code>info</code> object by integrating all configurations, models, parameters, and outputs.</li></ul><p><strong>Notes:</strong></p><ul><li><p>The package re-exports several key packages (<code>Sindbad</code>, <code>Accessors</code>, <code>ForwardDiff</code>, <code>CSV</code>, <code>Dates</code>, <code>JLD2</code>, <code>SindbadUtils</code>, <code>SindbadMetrics</code>) for convenience, allowing users to access their functionality directly through <code>SindbadSetup</code>.</p></li><li><p>Designed to be modular and extensible, enabling users to customize and expand the setup process for specific use cases.</p></li></ul><p><strong>Examples:</strong></p><ol><li><strong>Setting up an experiment</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadSetup</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Read configuration and build the experiment info</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">experiment_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;config.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol><li><strong>Preparing model parameters</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadSetup</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Initialize model parameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setupParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(experiment_info)</span></span></code></pre></div><ol><li><strong>Setting up outputs</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadSetup</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Prepare output structure</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outputs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setupOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(experiment_info)</span></span></code></pre></div>`,38))]),i[195]||(i[195]=e("h2",{id:"exported",tabindex:"-1"},[s("Exported "),e("a",{class:"header-anchor",href:"#exported","aria-label":'Permalink to "Exported"'},"​")],-1)),e("details",h,[e("summary",null,[i[3]||(i[3]=e("a",{id:"SindbadSetup.convertRunFlagsToTypes-Tuple{Any}",href:"#SindbadSetup.convertRunFlagsToTypes-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.convertRunFlagsToTypes")],-1)),i[4]||(i[4]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[5]||(i[5]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">convertRunFlagsToTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info)</span></span></code></pre></div><p>Converts model run-related flags from the experiment configuration into types for dispatch.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration, including model run flags.</li></ul><p><strong>Returns:</strong></p><ul><li>A NamedTuple <code>new_run</code> where each flag is converted into a corresponding type instance.</li></ul><p><strong>Notes:</strong></p><ul><li><p>Flags are processed recursively:</p><ul><li><p>If a flag is a <code>NamedTuple</code>, its subfields are converted into types.</p></li><li><p>If a flag is a scalar, it is directly converted into a type using <code>getTypeInstanceForFlags</code>.</p></li></ul></li><li><p>The resulting <code>new_run</code> NamedTuple is used for type-based dispatch in SINDBAD&#39;s model execution.</p></li></ul>',8))]),e("details",g,[e("summary",null,[i[6]||(i[6]=e("a",{id:"SindbadSetup.createArrayofType",href:"#SindbadSetup.createArrayofType"},[e("span",{class:"jlbinding"},"SindbadSetup.createArrayofType")],-1)),i[7]||(i[7]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[8]||(i[8]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createArrayofType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input_values, pool_array, num_type, indx, ismain, array_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SindbadModelArrayType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates an array or view of the specified type <code>array_type</code> based on the input values and configuration.</p><p><strong>Arguments:</strong></p><ul><li><p><code>input_values</code>: The input data to be converted or used for creating the array.</p></li><li><p><code>pool_array</code>: A preallocated array from which a view may be created.</p></li><li><p><code>num_type</code>: The numerical type to which the input values should be converted (e.g., <code>Float64</code>, <code>Int</code>).</p></li><li><p><code>indx</code>: A tuple of indices used to create a view from the <code>pool_array</code>.</p></li><li><p><code>ismain</code>: A boolean flag indicating whether the main array should be created (<code>true</code>) or a view should be created (<code>false</code>).</p></li><li><p><code>array_type</code>: A type dispatch that determines the array type to be created:</p><ul><li><p><code>ModelArrayView</code>: Creates a view of the <code>pool_array</code> based on the indices <code>indx</code>.</p></li><li><p><code>ModelArrayArray</code>: Creates a new array by converting <code>input_values</code> to the specified <code>num_type</code>.</p></li><li><p><code>ModelArrayStaticArray</code>: Creates a static array (<code>SVector</code>) from the <code>input_values</code>.</p></li></ul></li></ul><p><strong>Returns:</strong></p><ul><li>An array or view of the specified type, created based on the input configuration.</li></ul><p><strong>Notes:</strong></p><ul><li><p>When <code>ismain</code> is <code>true</code>, the function converts <code>input_values</code> to the specified <code>num_type</code>.</p></li><li><p>When <code>ismain</code> is <code>false</code>, the function creates a view of the <code>pool_array</code> using the indices <code>indx</code>.</p></li><li><p>For <code>ModelArrayStaticArray</code>, the function ensures that the resulting static array (<code>SVector</code>) has the correct type and length.</p></li></ul><p><strong>Examples:</strong></p><ol><li><strong>Creating a view from a preallocated array</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pool_array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">indx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view_array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> createArrayofType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pool_array, Float64, indx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ModelArrayView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><ol><li><strong>Creating a new array with a specific numerical type</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input_values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> createArrayofType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input_values, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ModelArrayArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><ol><li><strong>Creating a static array (<code>SVector</code>)</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input_values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">static_array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> createArrayofType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input_values, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ModelArrayStaticArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div>`,15))]),e("details",c,[e("summary",null,[i[9]||(i[9]=e("a",{id:"SindbadSetup.createInitLand-Tuple{Any, Any}",href:"#SindbadSetup.createInitLand-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.createInitLand")],-1)),i[10]||(i[10]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[11]||(i[11]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createInitLand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pool_info, tem)</span></span></code></pre></div><p>Initializes the land state by creating a NamedTuple with pools, states, and selected models.</p><p><strong>Arguments:</strong></p><ul><li><p><code>pool_info</code>: Information about the pools to initialize.</p></li><li><p><code>tem</code>: A helper NamedTuple with necessary objects for pools and numbers.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A NamedTuple containing initialized pools, states, fluxes, diagnostics, properties, models, and constants.</li></ul>',6))]),e("details",k,[e("summary",null,[i[12]||(i[12]=e("a",{id:"SindbadSetup.createInitPools-Tuple{NamedTuple, NamedTuple}",href:"#SindbadSetup.createInitPools-Tuple{NamedTuple, NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.createInitPools")],-1)),i[13]||(i[13]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[14]||(i[14]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createInitPools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info_pools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tem_helpers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a NamedTuple with initial pool variables as subfields, used in <code>land.pools</code>.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info_pools</code>: A NamedTuple containing pool information from the experiment configuration.</p></li><li><p><code>tem_helpers</code>: A NamedTuple containing helper information for numerical operations.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A NamedTuple with initialized pool variables.</li></ul>',6))]),e("details",m,[e("summary",null,[i[15]||(i[15]=e("a",{id:"SindbadSetup.createInitStates-Tuple{NamedTuple, NamedTuple}",href:"#SindbadSetup.createInitStates-Tuple{NamedTuple, NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.createInitStates")],-1)),i[16]||(i[16]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[17]||(i[17]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createInitStates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info_pools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tem_helpers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a NamedTuple with initial state variables as subfields, used in <code>land.states</code>.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info_pools</code>: A NamedTuple containing pool information from the experiment configuration.</p></li><li><p><code>tem_helpers</code>: A NamedTuple containing helper information for numerical operations.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A NamedTuple with initialized state variables.</li></ul><p><strong>Notes:</strong></p><ul><li><p>Extended from `createInitPools``</p></li><li><p>State variables are derived from the <code>state_variables</code> field in <code>model_structure.json</code>.</p></li></ul>',8))]),e("details",y,[e("summary",null,[i[18]||(i[18]=e("a",{id:"SindbadSetup.createNestedDict-Tuple{AbstractDict}",href:"#SindbadSetup.createNestedDict-Tuple{AbstractDict}"},[e("span",{class:"jlbinding"},"SindbadSetup.createNestedDict")],-1)),i[19]||(i[19]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[20]||(i[20]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createNestedDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Creates a nested dictionary from a flat dictionary where keys are strings separated by dots (<code>.</code>).</p><p><strong>Arguments:</strong></p><ul><li><code>dict::AbstractDict</code>: A flat dictionary with keys as dot-separated strings.</li></ul><p><strong>Returns:</strong></p><ul><li>A nested dictionary where each dot-separated key is converted into nested dictionaries.</li></ul><p><strong>Example:</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dict </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a.b.c&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nested_dict </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> createNestedDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dict)</span></span></code></pre></div>`,8))]),e("details",b,[e("summary",null,[i[21]||(i[21]=e("a",{id:"SindbadSetup.deepMerge",href:"#SindbadSetup.deepMerge"},[e("span",{class:"jlbinding"},"SindbadSetup.deepMerge")],-1)),i[22]||(i[22]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[23]||(i[23]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deepMerge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDict...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deepMerge, d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deepMerge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Recursively merges multiple dictionaries, giving priority to the last dictionary.</p><p><strong>Arguments:</strong></p><ul><li><code>d::AbstractDict...</code>: One or more dictionaries to merge.</li></ul><p><strong>Returns:</strong></p><ul><li>A single dictionary with merged fields, where the last dictionary&#39;s values take precedence.</li></ul>`,6))]),e("details",f,[e("summary",null,[i[24]||(i[24]=e("a",{id:"SindbadSetup.getConfiguration-Tuple{String}",href:"#SindbadSetup.getConfiguration-Tuple{String}"},[e("span",{class:"jlbinding"},"SindbadSetup.getConfiguration")],-1)),i[25]||(i[25]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[26]||(i[26]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sindbad_experiment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; replace_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Loads the experiment configuration from a JSON or JLD2 file.</p><p><strong>Arguments:</strong></p><ul><li><p><code>sindbad_experiment::String</code>: Path to the experiment configuration file.</p></li><li><p><code>replace_info::Dict</code>: A dictionary of fields to replace in the configuration.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A NamedTuple containing the experiment configuration.</li></ul><p><strong>Notes:</strong></p><ul><li><p>Supports both JSON and JLD2 formats.</p></li><li><p>If <code>replace_info</code> is provided, the specified fields are replaced in the configuration.</p></li></ul>',8))]),e("details",E,[e("summary",null,[i[27]||(i[27]=e("a",{id:"SindbadSetup.getConstraintNames-Tuple{NamedTuple}",href:"#SindbadSetup.getConstraintNames-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.getConstraintNames")],-1)),i[28]||(i[28]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[29]||(i[29]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getConstraintNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extracts observation and model variable names for optimization constraints.</p><p><strong>Arguments:</strong></p><ul><li><code>optim</code>: A NamedTuple containing optimization settings and observation constraints.</li></ul><p><strong>Returns:</strong></p><ul><li>A tuple containing: <ul><li><p><code>obs_vars</code>: A list of observation variables used to calculate cost.</p></li><li><p><code>optim_vars</code>: A lookup mapping observation variables to model variables.</p></li><li><p><code>store_vars</code>: A lookup of model variables for which time series will be stored.</p></li><li><p><code>model_vars</code>: A list of model variable names.</p></li></ul></li></ul>',6))]),e("details",T,[e("summary",null,[i[30]||(i[30]=e("a",{id:"SindbadSetup.getCostOptions-Tuple{NamedTuple, Vararg{Any, 4}}",href:"#SindbadSetup.getCostOptions-Tuple{NamedTuple, Vararg{Any, 4}}"},[e("span",{class:"jlbinding"},"SindbadSetup.getCostOptions")],-1)),i[31]||(i[31]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[32]||(i[32]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getCostOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optim_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, vars_info, tem_variables, number_helpers, dates_helpers)</span></span></code></pre></div><p>Sets up cost optimization options based on the provided parameters.</p><p><strong>Arguments:</strong></p><ul><li><p><code>optim_info</code>: A NamedTuple containing optimization parameters and settings.</p></li><li><p><code>vars_info</code>: Information about variables used in optimization.</p></li><li><p><code>tem_variables</code>: Template variables for optimization setup.</p></li><li><p><code>number_helpers</code>: Helper functions or values for numerical operations.</p></li><li><p><code>dates_helpers</code>: Helper functions or values for date-related operations.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A NamedTuple containing cost optimization configuration options.</li></ul><p><strong>Notes:</strong></p><ul><li>Configures temporal and spatial aggregation, cost metrics, and other optimization-related settings.</li></ul>',8))]),e("details",S,[e("summary",null,[i[33]||(i[33]=e("a",{id:"SindbadSetup.getDepthDimensionSizeName-Tuple{Any, NamedTuple}",href:"#SindbadSetup.getDepthDimensionSizeName-Tuple{Any, NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.getDepthDimensionSizeName")],-1)),i[34]||(i[34]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[35]||(i[35]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getDepthDimensionSizeName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Retrieves the name and size of the depth dimension for a given variable.</p><p><strong>Arguments:</strong></p><ul><li><p><code>vname</code>: The variable name.</p></li><li><p><code>info</code>: A SINDBAD NamedTuple containing all information needed for setup and execution of an experiment.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A tuple containing the size and name of the depth dimension.</li></ul><p><strong>Notes:</strong></p><ul><li>Validates the depth dimension against the <code>depth_dimensions</code> field in the experiment configuration.</li></ul>',8))]),e("details",_,[e("summary",null,[i[36]||(i[36]=e("a",{id:"SindbadSetup.getDepthInfoAndVariables-Tuple{Any, Any}",href:"#SindbadSetup.getDepthInfoAndVariables-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.getDepthInfoAndVariables")],-1)),i[37]||(i[37]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[38]||(i[38]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getDepthInfoAndVariables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info, output_vars)</span></span></code></pre></div><p>Generates depth information and variable pairs for the output variables.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: A SINDBAD NamedTuple containing experiment configuration.</p></li><li><p><code>output_vars</code>: A list of output variables.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A NamedTuple containing depth information and variable pairs.</li></ul>',6))]),e("details",C,[e("summary",null,[i[39]||(i[39]=e("a",{id:"SindbadSetup.getExperimentConfiguration-Tuple{String}",href:"#SindbadSetup.getExperimentConfiguration-Tuple{String}"},[e("span",{class:"jlbinding"},"SindbadSetup.getExperimentConfiguration")],-1)),i[40]||(i[40]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[41]||(i[41]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getExperimentConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(experiment_json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; replace_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Loads the basic configuration from an experiment JSON file.</p><p><strong>Arguments:</strong></p><ul><li><p><code>experiment_json::String</code>: Path to the experiment JSON file.</p></li><li><p><code>replace_info::Dict</code>: A dictionary of fields to replace in the configuration.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A dictionary containing the experiment configuration.</li></ul>',6))]),e("details",A,[e("summary",null,[i[42]||(i[42]=e("a",{id:"SindbadSetup.getExperimentInfo-Tuple{String}",href:"#SindbadSetup.getExperimentInfo-Tuple{String}"},[e("span",{class:"jlbinding"},"SindbadSetup.getExperimentInfo")],-1)),i[43]||(i[43]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[44]||(i[44]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getExperimentInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sindbad_experiment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; replace_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Loads and sets up the experiment configuration, saving the information and enabling debugging options if specified.</p><p><strong>Arguments:</strong></p><ul><li><p><code>sindbad_experiment::String</code>: Path to the experiment configuration file.</p></li><li><p><code>replace_info::Dict</code>: (Optional) A dictionary of fields to replace in the configuration.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A NamedTuple <code>info</code> containing the fully loaded and configured experiment information.</li></ul><p><strong>Notes:</strong></p><ul><li>The function performs the following steps: <ol><li><p>Loads the experiment configuration using <code>getConfiguration</code>.</p></li><li><p>Sets up the experiment <code>info</code> using <code>setupInfo</code>.</p></li><li><p>Saves the experiment <code>info</code> if <code>save_info</code> is enabled.</p></li><li><p>Sets up a debug error catcher if <code>catch_model_errors</code> is enabled.</p></li></ol></li></ul>',8))]),e("details",v,[e("summary",null,[i[45]||(i[45]=e("a",{id:"SindbadSetup.getGlobalAttributesForOutCubes-Tuple{Any}",href:"#SindbadSetup.getGlobalAttributesForOutCubes-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.getGlobalAttributesForOutCubes")],-1)),i[46]||(i[46]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[47]||(i[47]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getGlobalAttributesForOutCubes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info)</span></span></code></pre></div><p>Generates global attributes for output cubes, including system and experiment metadata.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>A dictionary <code>global_attr</code> containing global attributes such as: <ul><li><p><code>simulation_by</code>: The user running the simulation.</p></li><li><p><code>experiment</code>: The name of the experiment.</p></li><li><p><code>domain</code>: The domain of the experiment.</p></li><li><p><code>date</code>: The current date.</p></li><li><p><code>machine</code>: The machine architecture.</p></li><li><p><code>os</code>: The operating system.</p></li><li><p><code>host</code>: The hostname of the machine.</p></li><li><p><code>julia</code>: The Julia version.</p></li></ul></li></ul><p><strong>Notes:</strong></p><ul><li>The function collects system information using Julia&#39;s <code>Sys</code> module and <code>versioninfo</code>.</li></ul>',8))]),e("details",F,[e("summary",null,[i[48]||(i[48]=e("a",{id:"SindbadSetup.getNumberType",href:"#SindbadSetup.getNumberType"},[e("span",{class:"jlbinding"},"SindbadSetup.getNumberType")],-1)),i[49]||(i[49]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[50]||(i[50]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getNumberType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span></code></pre></div><p>Retrieves the numerical type based on the input, which can be a string or a data type.</p><p><strong>Arguments:</strong></p><ul><li><code>t</code>: The input specifying the numerical type. Can be: <ul><li><p>A <code>String</code> representing the type (e.g., <code>&quot;Float64&quot;</code>, <code>&quot;Int&quot;</code>).</p></li><li><p>A <code>DataType</code> directly specifying the type (e.g., <code>Float64</code>, <code>Int</code>).</p></li></ul></li></ul><p><strong>Returns:</strong></p><ul><li>The corresponding numerical type as a <code>DataType</code>.</li></ul><p><strong>Notes:</strong></p><ul><li><p>If the input is a string, it is parsed and evaluated to return the corresponding type.</p></li><li><p>If the input is already a <code>DataType</code>, it is returned as-is.</p></li></ul>',8))]),e("details",j,[e("summary",null,[i[51]||(i[51]=e("a",{id:"SindbadSetup.getParameters",href:"#SindbadSetup.getParameters"},[e("span",{class:"jlbinding"},"SindbadSetup.getParameters")],-1)),i[52]||(i[52]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[53]||(i[53]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selected_models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num_type, model_timestep; return_table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selected_models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LongTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num_type, model_timestep; return_table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selected_models, model_parameter_default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num_type, model_timestep)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selected_models, model_parameter_default, opt_parameter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num_type)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selected_models, model_parameter_default, opt_parameter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num_type)</span></span></code></pre></div><p>Retrieves parameters for the specified models with given numerical type and timestep settings.</p><p><strong>Arguments</strong></p><ul><li><p><code>selected_models</code>: A collection of selected models</p><ul><li><p><code>::Tuple</code>: as a tuple</p></li><li><p><code>::LongTuple</code>: as a long tuple</p></li></ul></li><li><p><code>num_type</code>: The numerical type to be used for parameters</p></li><li><p><code>model_parameter_default::NamedTuple</code>: A named tuple containing the default parameters for the models and their distributions</p></li><li><p><code>opt_parameter::Vector</code>: A vector containing the names of the parameters to be optimized</p></li><li><p><code>opt_parameter::NamedTuple</code>: A named tuple containing the parameters to be optimized with their distributions and whether they are machine learning parameters</p></li><li><p><code>model_timestep</code>: The timestep setting for the model simulation</p></li><li><p><code>return_table::Bool=true</code>: Whether to return results in table format</p></li></ul><p><strong>Returns</strong></p><p>Parameters configuration for the selected models based on the specified settings.</p>`,6))]),e("details",D,[e("summary",null,[i[54]||(i[54]=e("a",{id:"SindbadSetup.getSpinupSequenceWithTypes-Tuple{Any, Any}",href:"#SindbadSetup.getSpinupSequenceWithTypes-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.getSpinupSequenceWithTypes")],-1)),i[55]||(i[55]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[56]||(i[56]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getSpinupSequenceWithTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(seqq, helpers_dates)</span></span></code></pre></div><p>Processes the spinup sequence and assigns types for temporal aggregators for spinup forcing.</p><p><strong>Arguments:</strong></p><ul><li><p><code>seqq</code>: The spinup sequence from the experiment configuration.</p></li><li><p><code>helpers_dates</code>: A NamedTuple containing date-related helpers.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A processed spinup sequence with forcing types for temporal aggregators.</li></ul>',6))]),e("details",N,[e("summary",null,[i[57]||(i[57]=e("a",{id:"SindbadSetup.getTypeInstanceForCostMetric-Tuple{String}",href:"#SindbadSetup.getTypeInstanceForCostMetric-Tuple{String}"},[e("span",{class:"jlbinding"},"SindbadSetup.getTypeInstanceForCostMetric")],-1)),i[58]||(i[58]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[59]||(i[59]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTypeInstanceForCostMetric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mode_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Retrieves the type instance for a given cost metric based on its name.</p><p><strong>Arguments:</strong></p><ul><li><code>mode_name::String</code>: The name of the cost metric (e.g., <code>&quot;RMSE&quot;</code>, <code>&quot;MAE&quot;</code>).</li></ul><p><strong>Returns:</strong></p><ul><li>An instance of the corresponding cost metric type.</li></ul><p><strong>Notes:</strong></p><ul><li><p>The function converts the cost metric name to a type by capitalizing the first letter of each word and removing underscores.</p></li><li><p>The type is retrieved from the <code>SindbadMetrics</code> module and instantiated.</p></li><li><p>Used for dispatching cost metric calculations in SINDBAD.</p></li></ul>',8))]),e("details",I,[e("summary",null,[i[60]||(i[60]=e("a",{id:"SindbadSetup.getTypeInstanceForFlags",href:"#SindbadSetup.getTypeInstanceForFlags"},[e("span",{class:"jlbinding"},"SindbadSetup.getTypeInstanceForFlags")],-1)),i[61]||(i[61]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[62]||(i[62]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTypeInstanceForFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(option_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, option_value, opt_pref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Do&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generates a type instance for boolean flags based on the flag name and value.</p><p><strong>Arguments:</strong></p><ul><li><p><code>option_name::Symbol</code>: The name of the flag (e.g., <code>:run_optimization</code>, <code>:save_info</code>).</p></li><li><p><code>option_value</code>: A boolean value (<code>true</code> or <code>false</code>) indicating the state of the flag.</p></li><li><p><code>opt_pref::String</code>: (Optional) A prefix for the type name. Defaults to <code>&quot;Do&quot;</code>.</p></li></ul><p><strong>Returns:</strong></p><ul><li>An instance of the corresponding type: <ul><li><p>If <code>option_value</code> is <code>true</code>, the type name is prefixed with <code>opt_pref</code> (e.g., <code>DoRunOptimization</code>).</p></li><li><p>If <code>option_value</code> is <code>false</code>, the type name is prefixed with <code>opt_pref * &quot;Not&quot;</code> (e.g., <code>DoNotRunOptimization</code>).</p></li></ul></li></ul><p><strong>Notes:</strong></p><ul><li><p>The function converts the flag name to a string, capitalizes the first letter of each word, and appends the appropriate prefix (<code>Do</code> or <code>DoNot</code>).</p></li><li><p>The resulting type is retrieved from the <code>SindbadSetup</code> module and instantiated.</p></li><li><p>This is used for type-based dispatch in SINDBAD&#39;s model execution.</p></li></ul>',8))]),e("details",x,[e("summary",null,[i[63]||(i[63]=e("a",{id:"SindbadSetup.getTypeInstanceForNamedOptions",href:"#SindbadSetup.getTypeInstanceForNamedOptions"},[e("span",{class:"jlbinding"},"SindbadSetup.getTypeInstanceForNamedOptions")],-1)),i[64]||(i[64]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[65]||(i[65]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTypeInstanceForNamedOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(option_name)</span></span></code></pre></div><p>Retrieves a type instance for a named option based on its string or symbol representation. These options are mainly within the optimization and temporal aggregation.</p><p><strong>Arguments:</strong></p><ul><li><code>option_name</code>: The name of the option, provided as either a <code>String</code> or a <code>Symbol</code>.</li></ul><p><strong>Returns:</strong></p><ul><li>An instance of the corresponding type from the <code>SindbadSetup</code> module.</li></ul><p><strong>Notes:</strong></p><ul><li><p>If the input is a <code>Symbol</code>, it is converted to a <code>String</code> before processing.</p></li><li><p>The function capitalizes the first letter of each word in the option name and removes underscores to match the type naming convention.</p></li><li><p>This is used for type-based dispatch in SINDBAD&#39;s configuration and execution.</p></li><li><p>The type for temporal aggregation is set using <code>getTimeAggregatorTypeInstance</code> in <code>SindbadUtils</code>. It uses a similar approach and prefixes <code>Time</code> to type.</p></li></ul><p><strong>Example:</strong></p><ul><li>A named option for <ul><li><p>&quot;cost_metric&quot;: &quot;NSE_inv&quot; would be converted to NSEInv type</p></li><li><p>&quot;temporal_data_aggr&quot;: &quot;month_anomaly&quot; would be converted to MonthAnomaly</p></li></ul></li></ul>',10))]),e("details",B,[e("summary",null,[i[66]||(i[66]=e("a",{id:"SindbadSetup.readConfiguration-Tuple{AbstractDict, String}",href:"#SindbadSetup.readConfiguration-Tuple{AbstractDict, String}"},[e("span",{class:"jlbinding"},"SindbadSetup.readConfiguration")],-1)),i[67]||(i[67]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[68]||(i[68]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">readConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info_exp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, base_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reads the experiment configuration files (JSON or CSV) and returns a dictionary.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info_exp::AbstractDict</code>: The experiment configuration dictionary.</p></li><li><p><code>base_path::String</code>: The base path for resolving relative file paths.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A dictionary containing the parsed configuration files.</li></ul>',6))]),e("details",P,[e("summary",null,[i[69]||(i[69]=e("a",{id:"SindbadSetup.setModelOutput-Tuple{NamedTuple}",href:"#SindbadSetup.setModelOutput-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.setModelOutput")],-1)),i[70]||(i[70]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[71]||(i[71]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setModelOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Sets the output variables to be written and stored based on the experiment configuration.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with output variables and depth information added.</li></ul>',6))]),e("details",M,[e("summary",null,[i[72]||(i[72]=e("a",{id:"SindbadSetup.setModelOutputLandAll-Tuple{Any, Any}",href:"#SindbadSetup.setModelOutputLandAll-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.setModelOutputLandAll")],-1)),i[73]||(i[73]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[74]||(i[74]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setModelOutputLandAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info, land)</span></span></code></pre></div><p>Retrieves all model variables from <code>land</code> and overwrites the output information in <code>info</code>.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: A NamedTuple containing experiment configuration and helper information.</p></li><li><p><code>land</code>: A core SINDBAD NamedTuple containing variables for a given time step.</p></li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with output variables and depth information updated.</li></ul>',6))]),e("details",V,[e("summary",null,[i[75]||(i[75]=e("a",{id:"SindbadSetup.setOptimization-Tuple{NamedTuple}",href:"#SindbadSetup.setOptimization-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.setOptimization")],-1)),i[76]||(i[76]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[77]||(i[77]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setOptimization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Sets up optimization-related fields in the experiment configuration.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with optimization-related fields added.</li></ul><p><strong>Notes:</strong></p><ul><li><p>Configures cost metrics, optimization parameters, algorithms, and variables to store during optimization.</p></li><li><p>Validates the parameters to be optimized against the model structure.</p></li></ul>',8))]),e("details",R,[e("summary",null,[i[78]||(i[78]=e("a",{id:"SindbadSetup.setOrderedSelectedModels-Tuple{NamedTuple}",href:"#SindbadSetup.setOrderedSelectedModels-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.setOrderedSelectedModels")],-1)),i[79]||(i[79]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[80]||(i[80]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setOrderedSelectedModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Retrieves and orders the list of selected models based on the configuration in <code>model_structure.json</code>.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with the ordered list of selected models added to <code>info.temp.models</code>.</li></ul><p><strong>Notes:</strong></p><ul><li><p>Ensures consistency by validating the selected models using <code>checkSelectedModels</code>.</p></li><li><p>Orders the models as specified in <code>standard_sindbad_models</code>.</p></li></ul>',8))]),e("details",O,[e("summary",null,[i[81]||(i[81]=e("a",{id:"SindbadSetup.setPoolsInfo-Tuple{NamedTuple}",href:"#SindbadSetup.setPoolsInfo-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.setPoolsInfo")],-1)),i[82]||(i[82]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[83]||(i[83]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setPoolsInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generates <code>info.temp.helpers.pools</code> and <code>info.pools</code>.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with pool-related fields added.</li></ul><p><strong>Notes:</strong></p><ul><li><p><code>info.temp.helpers.pools</code> is used in the models.</p></li><li><p><code>info.pools</code> is used for instantiating the pools for the initial output tuple.</p></li></ul>',8))]),e("details",w,[e("summary",null,[i[84]||(i[84]=e("a",{id:"SindbadSetup.setSpinupAndForwardModels-Tuple{NamedTuple}",href:"#SindbadSetup.setSpinupAndForwardModels-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.setSpinupAndForwardModels")],-1)),i[85]||(i[85]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[86]||(i[86]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setSpinupAndForwardModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Configures the spinup and forward models for the experiment.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with the spinup and forward models added to <code>info.temp.models</code>.</li></ul><p><strong>Notes:</strong></p><ul><li><p>Allows for faster spinup by turning off certain models using the <code>use_in_spinup</code> flag in <code>model_structure.json</code>.</p></li><li><p>Ensures that spinup models are a subset of forward models.</p></li><li><p>Updates model parameters if additional parameter values are provided in the experiment configuration.</p></li></ul>',8))]),e("details",z,[e("summary",null,[i[87]||(i[87]=e("a",{id:"SindbadSetup.setupInfo-Tuple{NamedTuple}",href:"#SindbadSetup.setupInfo-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.setupInfo")],-1)),i[88]||(i[88]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[89]||(i[89]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setupInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Processes the experiment configuration and sets up all necessary fields for model simulation.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with all necessary fields for model simulation.</li></ul>',6))]),e("details",q,[e("summary",null,[i[90]||(i[90]=e("a",{id:"SindbadSetup.sindbadDefaultOptions",href:"#SindbadSetup.sindbadDefaultOptions"},[e("span",{class:"jlbinding"},"SindbadSetup.sindbadDefaultOptions")],-1)),i[91]||(i[91]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[92]||(i[92]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sindbadDefaultOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MethodType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Retrieves the default configuration options for a given optimization or sensitivity analysis method in SINDBAD.</p><p><strong>Arguments:</strong></p><ul><li><code>::MethodType</code>: The method type for which the default options are requested. Supported types include: <ul><li><p><code>SindbadOptimizationMethod</code>: General optimization methods.</p></li><li><p><code>SindbadGlobalSensitivityMethod</code>: General global sensitivity analysis methods.</p></li><li><p><code>GlobalSensitivityMorris</code>: Morris method for global sensitivity analysis.</p></li><li><p><code>GlobalSensitivitySobol</code>: Sobol method for global sensitivity analysis.</p></li><li><p><code>GlobalSensitivitySobolDM</code>: Sobol method with derivative-based measures.</p></li></ul></li></ul><p><strong>Returns:</strong></p><ul><li>A <code>NamedTuple</code> containing the default options for the specified method.</li></ul><p><strong>Notes:</strong></p><ul><li><p>Each method type has its own set of default options, such as the number of trajectories, samples, or design matrix length.</p></li><li><p>For <code>GlobalSensitivitySobolDM</code>, the defaults are inherited from <code>GlobalSensitivitySobol</code>.</p></li></ul>',8))]),e("details",L,[e("summary",null,[i[93]||(i[93]=e("a",{id:"SindbadSetup.updateVariablesToStore-Tuple{NamedTuple}",href:"#SindbadSetup.updateVariablesToStore-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.updateVariablesToStore")],-1)),i[94]||(i[94]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[95]||(i[95]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">updateVariablesToStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Updates the output variables to store based on optimization or cost run settings.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with updated output variables.</li></ul>',6))]),i[196]||(i[196]=e("h2",{id:"internal",tabindex:"-1"},[s("Internal "),e("a",{class:"header-anchor",href:"#internal","aria-label":'Permalink to "Internal"'},"​")],-1)),e("details",G,[e("summary",null,[i[96]||(i[96]=e("a",{id:"SindbadSetup.checkOptimizedParametersInModels-Tuple{NamedTuple, Any}",href:"#SindbadSetup.checkOptimizedParametersInModels-Tuple{NamedTuple, Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.checkOptimizedParametersInModels")],-1)),i[97]||(i[97]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[98]||(i[98]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkOptimizedParametersInModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tbl_params)</span></span></code></pre></div><p>Checks if the parameters listed in <code>model_parameters_to_optimize</code> from <code>optimization.json</code> exist in the selected model structure from <code>model_structure.json</code>.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: A NamedTuple containing the experiment configuration.</p></li><li><p><code>tbl_params</code>: A table of parameters extracted from the model structure.</p></li></ul><p><strong>Notes:</strong></p><ul><li>Issues a warning and throws an error if any parameter in <code>model_parameters_to_optimize</code> does not exist in the model structure.</li></ul>',6))]),e("details",J,[e("summary",null,[i[99]||(i[99]=e("a",{id:"SindbadSetup.checkSelectedModels-Tuple{Any, AbstractArray}",href:"#SindbadSetup.checkSelectedModels-Tuple{Any, AbstractArray}"},[e("span",{class:"jlbinding"},"SindbadSetup.checkSelectedModels")],-1)),i[100]||(i[100]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[101]||(i[101]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">checkSelectedModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sindbad_models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, selected_models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Validates that the selected models in <code>model_structure.json</code> exist in the full list of <code>standard_sindbad_models</code>.</p><p><strong>Arguments:</strong></p><ul><li><p><code>sindbad_models</code>: An array of all available SINDBAD models.</p></li><li><p><code>selected_models</code>: An array of selected models to validate.</p></li></ul><p><strong>Returns:</strong></p><ul><li><code>true</code> if all selected models are valid; otherwise, throws an error.</li></ul><p><strong>Notes:</strong></p><ul><li>Ensures that the selected models are consistent with the available SINDBAD models.</li></ul>',8))]),e("details",W,[e("summary",null,[i[102]||(i[102]=e("a",{id:"SindbadSetup.convertToAbsolutePath-Tuple{}",href:"#SindbadSetup.convertToAbsolutePath-Tuple{}"},[e("span",{class:"jlbinding"},"SindbadSetup.convertToAbsolutePath")],-1)),i[103]||(i[103]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[104]||(i[104]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">convertToAbsolutePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; inputDict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inputDict)</span></span></code></pre></div><p>Converts all relative paths in the input dictionary to absolute paths, assuming all non-absolute paths are relative to the SINDBAD root directory.</p><p><strong>Arguments:</strong></p><ul><li><code>inputDict</code>: A dictionary containing paths as values.</li></ul><p><strong>Returns:</strong></p><ul><li>A new dictionary with all paths converted to absolute paths.</li></ul><p><strong>Notes:</strong></p><ul><li>This function is currently incomplete and does not perform the conversion yet.</li></ul>',8))]),e("details",U,[e("summary",null,[i[105]||(i[105]=e("a",{id:"SindbadSetup.getAggrFunc-Tuple{String}",href:"#SindbadSetup.getAggrFunc-Tuple{String}"},[e("span",{class:"jlbinding"},"SindbadSetup.getAggrFunc")],-1)),i[106]||(i[106]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[107]||(i[107]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getAggrFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns an aggregation function corresponding to the given function name.</p><p><strong>Arguments:</strong></p><ul><li><code>func_name</code>: A string specifying the name of the aggregation function (e.g., &quot;mean&quot;, &quot;sum&quot;).</li></ul><p><strong>Returns:</strong></p><ul><li>The corresponding aggregation function (e.g., <code>mean</code>, <code>sum</code>).</li></ul><p><strong>Notes:</strong></p><ul><li>Supports common aggregation functions such as <code>mean</code>, <code>sum</code>, <code>nanmean</code>, and <code>nansum</code>.</li></ul>',8))]),e("details",H,[e("summary",null,[i[108]||(i[108]=e("a",{id:"SindbadSetup.getAllLandVars-Tuple{Any}",href:"#SindbadSetup.getAllLandVars-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.getAllLandVars")],-1)),i[109]||(i[109]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[110]||(i[110]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getAllLandVars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(land)</span></span></code></pre></div><p>Collects model variable fields and subfields from the <code>land</code> NamedTuple.</p><p><strong>Arguments:</strong></p><ul><li><code>land</code>: A core SINDBAD NamedTuple containing all variables for a given time step, overwritten at every timestep.</li></ul><p><strong>Returns:</strong></p><ul><li>A tuple of variable field and subfield pairs.</li></ul>',6))]),e("details",$,[e("summary",null,[i[111]||(i[111]=e("a",{id:"SindbadSetup.getAllSindbadModels-Tuple{Any}",href:"#SindbadSetup.getAllSindbadModels-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.getAllSindbadModels")],-1)),i[112]||(i[112]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[113]||(i[113]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getAllSindbadModels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info; all_models_default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">standard_sindbad_models)</span></span></code></pre></div><p>Retrieves the list of all SINDBAD models, either from the provided <code>info</code> object or a default list.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: A NamedTuple or object containing experiment configuration and metadata.</p></li><li><p><code>all_models_default</code>: (Optional) The default list of SINDBAD models to use if <code>info</code> does not specify a custom list. Defaults to <code>standard_sindbad_models</code>.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A list of all SINDBAD models, either from <code>info.sindbad_models</code> (if available) or <code>all_models_default</code>.</li></ul><p><strong>Notes:</strong></p><ul><li><p>If the <code>info</code> object has a property <code>sindbad_models</code>, it overrides the default list.</p></li><li><p>This function ensures flexibility by allowing custom model lists to be specified in the experiment configuration.</p></li></ul>',8))]),e("details",K,[e("summary",null,[i[114]||(i[114]=e("a",{id:"SindbadSetup.getModelImplicitTRepeat-Tuple{NamedTuple, Any}",href:"#SindbadSetup.getModelImplicitTRepeat-Tuple{NamedTuple, Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.getModelImplicitTRepeat")],-1)),i[115]||(i[115]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[116]||(i[116]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getModelImplicitTRepeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, selected_models)</span></span></code></pre></div><p>Retrieves the <code>implicit_t_repeat</code> values for the specified models from the experiment configuration.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info::NamedTuple</code>: A SINDBAD NamedTuple containing the experiment configuration, including model structure details.</p></li><li><p><code>selected_models</code>: A list of model names (symbols) for which the <code>implicit_t_repeat</code> values are to be retrieved.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A vector of <code>implicit_t_repeat</code> values corresponding to the <code>selected_models</code>.</li></ul><p><strong>Notes:</strong></p><ul><li><p>If a model has an <code>implicit_t_repeat</code> property defined in its configuration, that value is used.</p></li><li><p>If the property is not defined for a model, the default value from <code>info.settings.model_structure.default_model.implicit_t_repeat</code> is used.</p></li></ul>',8))]),e("details",Q,[e("summary",null,[i[117]||(i[117]=e("a",{id:"SindbadSetup.getModelParameterIndices",href:"#SindbadSetup.getModelParameterIndices"},[e("span",{class:"jlbinding"},"SindbadSetup.getModelParameterIndices")],-1)),i[118]||(i[118]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[119]||(i[119]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getParameterIndices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selected_models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LongTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tbl_params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getParameterIndices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selected_models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tbl_params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Retrieves indices for model parameters from a parameter table.</p><p><strong>Arguments</strong></p><ul><li><p><code>selected_models</code></p><ul><li><p><code>::LongTuple</code>: A long tuple of selected models</p></li><li><p><code>::Tuple</code>: A tuple of selected models</p></li></ul></li><li><p><code>tbl_params::Table</code>: Table containing parameter information</p></li></ul><p><strong>Returns</strong></p><p>A Tuple of Pair of Name and Indices corresponding to the model parameters in the parameter table for selected models.</p>`,6))]),e("details",X,[e("summary",null,[i[120]||(i[120]=e("a",{id:"SindbadSetup.getModelParameterIndices-Tuple{Any, Table, Any}",href:"#SindbadSetup.getModelParameterIndices-Tuple{Any, Table, Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.getModelParameterIndices")],-1)),i[121]||(i[121]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[122]||(i[122]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getModelParameterIndices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, tbl_params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r)</span></span></code></pre></div><p>Retrieves indices for model parameters from a parameter table.</p><p><strong>Arguments</strong></p><ul><li><p><code>model</code>: A model object for which parameters are being indexed</p></li><li><p><code>tbl_params::Table</code>: Table containing parameter information</p></li><li><p><code>r</code>: Row index or identifier for the specific parameter set</p></li></ul><p><strong>Returns</strong></p><p>Indices corresponding to the model parameters in the parameter table for a model.</p>',6))]),e("details",Y,[e("summary",null,[i[123]||(i[123]=e("a",{id:"SindbadSetup.getOrderedOutputList-Tuple{Any, Symbol}",href:"#SindbadSetup.getOrderedOutputList-Tuple{Any, Symbol}"},[e("span",{class:"jlbinding"},"SindbadSetup.getOrderedOutputList")],-1)),i[124]||(i[124]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[125]||(i[125]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getOrderedOutputList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(varlist, var_o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Finds and returns the corresponding variable from the full list of variables.</p><p><strong>Arguments:</strong></p><ul><li><p><code>varlist</code>: The full list of variables.</p></li><li><p><code>var_o</code>: The variable to find.</p></li></ul><p><strong>Returns:</strong></p><ul><li>The corresponding variable from the list.</li></ul>',6))]),e("details",Z,[e("summary",null,[i[126]||(i[126]=e("a",{id:"SindbadSetup.getParamModelIDVal-Tuple{Any}",href:"#SindbadSetup.getParamModelIDVal-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.getParamModelIDVal")],-1)),i[127]||(i[127]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[128]||(i[128]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getParamModelIDVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tbl_params)</span></span></code></pre></div><p>Generates a <code>Val</code> object containing tuples of parameter names and their corresponding model IDs.</p><p><strong>Arguments:</strong></p><ul><li><code>tbl_params</code>: A table of parameters with their names and model IDs.</li></ul><p><strong>Returns:</strong></p><ul><li>A <code>Val</code> object containing tuples of parameter names and model IDs.</li></ul><p><strong>Notes:</strong></p><ul><li>Parameter names are transformed to a unique format by replacing dots with underscores.</li></ul>',8))]),e("details",ii,[e("summary",null,[i[129]||(i[129]=e("a",{id:"SindbadSetup.getPoolInformation-NTuple{8, Any}",href:"#SindbadSetup.getPoolInformation-NTuple{8, Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.getPoolInformation")],-1)),i[130]||(i[130]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[131]||(i[131]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getPoolInformation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(main_pools, pool_info, layer_thicknesses, nlayers, layer, inits, sub_pool_name, main_pool_name; prename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A helper function to get the information of each pools from info.settings.model_structure.pools and puts them into arrays of information needed to instantiate pool variables.</p><p><strong>Arguments:</strong></p><ul><li><p><code>main_pools</code>: A list of main pool configurations.</p></li><li><p><code>pool_info</code>: A NamedTuple containing pool information details.</p></li><li><p><code>layer_thicknesses</code>: An array of layer thicknesses in the pools.</p></li><li><p><code>nlayers</code>: An array representing the number of layers per pool in the model.</p></li><li><p><code>layer</code>: An array representing the current layer number being processed.</p></li><li><p><code>inits</code>: An array of initial values to be set in the pool.</p></li><li><p><code>sub_pool_name</code>: An array of sub-pool component names for a given pool.</p></li><li><p><code>main_pool_name</code>: An array of main pool names containing the sub-pool components.</p></li><li><p><code>prename</code>: (Optional) A prefix for naming conventions (default: <code>&quot;&quot;</code>).</p></li></ul><p><strong>Returns:</strong></p><ul><li>Updated list of information specific to the requested pool configuration.</li></ul><p><strong>Notes:</strong></p><ul><li>Processes hierarchical pool structures and extracts relevant details for initialization.</li></ul>',8))]),e("details",ei,[e("summary",null,[i[132]||(i[132]=e("a",{id:"SindbadSetup.getPoolSize-Tuple{NamedTuple, Symbol}",href:"#SindbadSetup.getPoolSize-Tuple{NamedTuple, Symbol}"},[e("span",{class:"jlbinding"},"SindbadSetup.getPoolSize")],-1)),i[133]||(i[133]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[134]||(i[134]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getPoolSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info_pools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pool_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Retrieves the size of a pool variable from the model structure settings.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info_pools</code>: A NamedTuple containing information about the pools in the selected model structure.</p></li><li><p><code>pool_name</code>: The name of the pool.</p></li></ul><p><strong>Returns:</strong></p><ul><li>The size of the specified pool.</li></ul><p><strong>Notes:</strong></p><ul><li>Throws an error if the pool does not exist in the model structure.</li></ul>',8))]),e("details",si,[e("summary",null,[i[135]||(i[135]=e("a",{id:"SindbadSetup.getRootDirs-Tuple{Any, Any}",href:"#SindbadSetup.getRootDirs-Tuple{Any, Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.getRootDirs")],-1)),i[136]||(i[136]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[137]||(i[137]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getRootDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(local_root, sindbad_experiment)</span></span></code></pre></div><p>Determines the root directories for the SINDBAD framework and the experiment.</p><p><strong>Arguments:</strong></p><ul><li><p><code>local_root</code>: The local root directory of the SINDBAD project.</p></li><li><p><code>sindbad_experiment</code>: The path to the experiment configuration file.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A NamedTuple containing the root directories for the experiment, SINDBAD, and settings.</li></ul>',6))]),e("details",ti,[e("summary",null,[i[138]||(i[138]=e("a",{id:"SindbadSetup.getVariableGroups-Tuple{AbstractArray}",href:"#SindbadSetup.getVariableGroups-Tuple{AbstractArray}"},[e("span",{class:"jlbinding"},"SindbadSetup.getVariableGroups")],-1)),i[139]||(i[139]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[140]||(i[140]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getVariableGroups</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Groups variables into a NamedTuple based on their field and subfield structure.</p><p><strong>Arguments:</strong></p><ul><li><code>var_list</code>: A list of variables in the <code>field.subfield</code> format.</li></ul><p><strong>Returns:</strong></p><ul><li>A NamedTuple containing grouped variables by field.</li></ul>',6))]),e("details",ai,[e("summary",null,[i[141]||(i[141]=e("a",{id:"SindbadSetup.getVariablePair",href:"#SindbadSetup.getVariablePair"},[e("span",{class:"jlbinding"},"SindbadSetup.getVariablePair")],-1)),i[142]||(i[142]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[143]||(i[143]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getVariablePair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out_var)</span></span></code></pre></div><p>Splits a variable name into a pair of field and subfield.</p><p><strong>Arguments:</strong></p><ul><li><code>out_var</code>: The variable name, provided as either a <code>String</code> or a <code>Symbol</code>, in the format <code>field.subfield</code>.</li></ul><p><strong>Returns:</strong></p><ul><li>A tuple containing the field and subfield as <code>Symbol</code> values.</li></ul><p><strong>Notes:</strong></p><ul><li><p>If the variable name contains a comma (<code>,</code>), it is used as the separator instead of a dot (<code>.</code>).</p></li><li><p>This function is used to parse variable names into their hierarchical components for further processing.</p></li></ul>',8))]),e("details",ni,[e("summary",null,[i[144]||(i[144]=e("a",{id:"SindbadSetup.getVariableString",href:"#SindbadSetup.getVariableString"},[e("span",{class:"jlbinding"},"SindbadSetup.getVariableString")],-1)),i[145]||(i[145]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[146]||(i[146]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getVariableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var_pair)</span></span></code></pre></div><p>Converts a variable pair into a string representation.</p><p><strong>Arguments:</strong></p><ul><li><p><code>var_pair</code>: A tuple containing the field and subfield.</p></li><li><p><code>sep</code>: The separator to use between the field and subfield (default: &quot;.&quot;).</p></li></ul><p><strong>Returns:</strong></p><ul><li>A string representation of the variable pair.</li></ul>',6))]),e("details",li,[e("summary",null,[i[147]||(i[147]=e("a",{id:"SindbadSetup.parseSaveCode-Tuple{Any}",href:"#SindbadSetup.parseSaveCode-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.parseSaveCode")],-1)),i[148]||(i[148]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[149]||(i[149]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parseSaveCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info)</span></span></code></pre></div><p>Parses and saves the code and structs of the selected model structure for the given experiment.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: The experiment configuration NamedTuple containing model and output information.</li></ul><p><strong>Notes:</strong></p><ul><li><p>Writes the <code>define</code>, <code>precompute</code>, and <code>compute</code> functions for the selected models to separate files.</p></li><li><p>Also writes the parameter structs for the models.</p></li></ul>',6))]),e("details",oi,[e("summary",null,[i[150]||(i[150]=e("a",{id:"SindbadSetup.removeComments-Tuple{AbstractDict}",href:"#SindbadSetup.removeComments-Tuple{AbstractDict}"},[e("span",{class:"jlbinding"},"SindbadSetup.removeComments")],-1)),i[151]||(i[151]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[152]||(i[152]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removeComments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputDict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Removes unnecessary comment fields from a dictionary.</p><p><strong>Arguments:</strong></p><ul><li><code>inputDict</code>: The input dictionary.</li></ul><p><strong>Returns:</strong></p><ul><li>A new dictionary with comment fields removed.</li></ul>',6))]),e("details",pi,[e("summary",null,[i[153]||(i[153]=e("a",{id:"SindbadSetup.replaceCommaSeparatorParams-Tuple{Any}",href:"#SindbadSetup.replaceCommaSeparatorParams-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.replaceCommaSeparatorParams")],-1)),i[154]||(i[154]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[155]||(i[155]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">replaceCommaSeparatorParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p_names_list)</span></span></code></pre></div><p>get a list/vector of parameters in which each parameter string is split with comma to separate model name and parameter name</p>',2))]),e("details",di,[e("summary",null,[i[156]||(i[156]=e("a",{id:"SindbadSetup.replaceInfoFields-Tuple{AbstractDict, AbstractDict}",href:"#SindbadSetup.replaceInfoFields-Tuple{AbstractDict, AbstractDict}"},[e("span",{class:"jlbinding"},"SindbadSetup.replaceInfoFields")],-1)),i[157]||(i[157]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[158]||(i[158]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">replaceInfoFields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, replace_dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Replaces fields in the <code>info</code> dictionary with values from the <code>replace_dict</code>.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info::AbstractDict</code>: The original dictionary.</p></li><li><p><code>replace_dict::AbstractDict</code>: The dictionary containing replacement values.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A new dictionary with the replaced fields.</li></ul>',6))]),e("details",ri,[e("summary",null,[i[159]||(i[159]=e("a",{id:"SindbadSetup.saveExperimentSettings-Tuple{Any}",href:"#SindbadSetup.saveExperimentSettings-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.saveExperimentSettings")],-1)),i[160]||(i[160]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[161]||(i[161]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">saveExperimentSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info)</span></span></code></pre></div><p>Saves a copy of the experiment settings to the output folder.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Notes:</strong></p><ul><li>Copies the JSON settings and configuration files to the output directory.</li></ul>',6))]),e("details",ui,[e("summary",null,[i[162]||(i[162]=e("a",{id:"SindbadSetup.saveInfo",href:"#SindbadSetup.saveInfo"},[e("span",{class:"jlbinding"},"SindbadSetup.saveInfo")],-1)),i[163]||(i[163]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[164]||(i[164]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">saveInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info, to_save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoSaveInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoNotSaveInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Saves or skips saving the experiment configuration to a file.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: A NamedTuple containing the experiment configuration.</p></li><li><p><code>::DoSaveInfo</code>: A type dispatch indicating that the information should be saved.</p></li><li><p><code>::DoNotSaveInfo</code>: A type dispatch indicating that the information should not be saved.</p></li></ul><p><strong>Returns:</strong></p><ul><li><code>nothing</code>.</li></ul><p><strong>Notes:</strong></p><ul><li>When saving, the experiment configuration is saved as a <code>.jld2</code> file in the <code>settings</code> directory.</li></ul>',8))]),e("details",hi,[e("summary",null,[i[165]||(i[165]=e("a",{id:"SindbadSetup.setDatesInfo-Tuple{NamedTuple}",href:"#SindbadSetup.setDatesInfo-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.setDatesInfo")],-1)),i[166]||(i[166]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[167]||(i[167]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setDatesInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Fills <code>info.temp.helpers.dates</code> with date and time-related fields needed in the models.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with date-related fields added.</li></ul>',6))]),e("details",gi,[e("summary",null,[i[168]||(i[168]=e("a",{id:"SindbadSetup.setDebugErrorCatcher",href:"#SindbadSetup.setDebugErrorCatcher"},[e("span",{class:"jlbinding"},"SindbadSetup.setDebugErrorCatcher")],-1)),i[169]||(i[169]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[170]||(i[170]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setDebugErrorCatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoCatchModelErrors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoNotCatchModelErrors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Enables/Disables a debug error catcher for the SINDBAD framework. When enabled, a variable <code>error_catcher</code> is enabled and can be written to from within SINDBAD models and functions. This can then be accessed from any scope with <code>Sindbad.error_catcher</code></p><p><strong>Arguments:</strong></p><ul><li><p><code>::DoCatchModelErrors</code>: A type dispatch indicating that model errors should be caught.</p></li><li><p><code>::DoNotCatchModelErrors</code>: A type dispatch indicating that model errors should not be caught.</p></li></ul><p><strong>Returns:</strong></p><ul><li><code>nothing</code>.</li></ul><p><strong>Notes:</strong></p><ul><li>When enabled, sets up an empty error catcher using <code>Sindbad.eval</code>.</li></ul>',8))]),e("details",ci,[e("summary",null,[i[171]||(i[171]=e("a",{id:"SindbadSetup.setExperimentBasics-Tuple{Any}",href:"#SindbadSetup.setExperimentBasics-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.setExperimentBasics")],-1)),i[172]||(i[172]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[173]||(i[173]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setExperimentBasics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Copies basic experiment information into the temporary experiment configuration.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with basic experiment information added.</li></ul>',6))]),e("details",ki,[e("summary",null,[i[174]||(i[174]=e("a",{id:"SindbadSetup.setExperimentOutput-Tuple{Any}",href:"#SindbadSetup.setExperimentOutput-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.setExperimentOutput")],-1)),i[175]||(i[175]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[176]||(i[176]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setExperimentOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info)</span></span></code></pre></div><p>Sets up and creates the output directory for the experiment.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with output directory information added.</li></ul><p><strong>Notes:</strong></p><ul><li><p>Creates subdirectories for code, data, figures, and settings.</p></li><li><p>Validates the output path and ensures it is not within the SINDBAD root directory.</p></li></ul>',8))]),e("details",mi,[e("summary",null,[i[177]||(i[177]=e("a",{id:"SindbadSetup.setInputParameters-Tuple{Table, Table}",href:"#SindbadSetup.setInputParameters-Tuple{Table, Table}"},[e("span",{class:"jlbinding"},"SindbadSetup.setInputParameters")],-1)),i[178]||(i[178]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[179]||(i[179]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setInputParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(original_table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, updated_table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Updates input parameters by comparing an original table with an updated table from params.json.</p><p><strong>Arguments</strong></p><ul><li><p><code>original_table::Table</code>: The reference table containing original parameters</p></li><li><p><code>updated_table::Table</code>: The table containing updated parameters to be compared with original</p></li></ul><p><strong>Returns</strong></p><p>a merged table with updated parameters</p>',6))]),e("details",yi,[e("summary",null,[i[180]||(i[180]=e("a",{id:"SindbadSetup.setModelRunInfo-Tuple{NamedTuple}",href:"#SindbadSetup.setModelRunInfo-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.setModelRunInfo")],-1)),i[181]||(i[181]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[182]||(i[182]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setModelRunInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Sets up model run flags and output array types for the experiment.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with model run flags and output array types added.</li></ul>',6))]),e("details",bi,[e("summary",null,[i[183]||(i[183]=e("a",{id:"SindbadSetup.setNumericHelpers",href:"#SindbadSetup.setNumericHelpers"},[e("span",{class:"jlbinding"},"SindbadSetup.setNumericHelpers")],-1)),i[184]||(i[184]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[185]||(i[185]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setNumericHelpers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ttype)</span></span></code></pre></div><p>Prepares numeric helpers for maintaining consistent data types across models.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: A NamedTuple containing the experiment configuration.</p></li><li><p><code>ttype</code>: The numeric type to use (default: <code>info.settings.experiment.exe_rules.model_number_type</code>).</p></li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with numeric helpers added.</li></ul>',6))]),e("details",fi,[e("summary",null,[i[186]||(i[186]=e("a",{id:"SindbadSetup.setRestartFilePath-Tuple{NamedTuple}",href:"#SindbadSetup.setRestartFilePath-Tuple{NamedTuple}"},[e("span",{class:"jlbinding"},"SindbadSetup.setRestartFilePath")],-1)),i[187]||(i[187]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[188]||(i[188]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setRestartFilePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Validates and sets the absolute path for the restart file used in spinup.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with the absolute restart file path set.</li></ul>',6))]),e("details",Ei,[e("summary",null,[i[189]||(i[189]=e("a",{id:"SindbadSetup.setSpinupInfo-Tuple{Any}",href:"#SindbadSetup.setSpinupInfo-Tuple{Any}"},[e("span",{class:"jlbinding"},"SindbadSetup.setSpinupInfo")],-1)),i[190]||(i[190]=s()),n(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[191]||(i[191]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setSpinupInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Processes the spinup configuration and prepares the spinup sequence.</p><p><strong>Arguments:</strong></p><ul><li><code>info</code>: A NamedTuple containing the experiment configuration.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated <code>info</code> NamedTuple with spinup-related fields added.</li></ul>',6))]),e("details",Ti,[e("summary",null,[i[192]||(i[192]=e("a",{id:"SindbadSetup.splitRenameParam",href:"#SindbadSetup.splitRenameParam"},[e("span",{class:"jlbinding"},"SindbadSetup.splitRenameParam")],-1)),i[193]||(i[193]=s()),n(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[194]||(i[194]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">splitRenameParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p_string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _splitter)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">splitRenameParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _splitter)</span></span></code></pre></div><p>Splits and renames a parameter based on a specified splitter.</p><p><strong>Arguments</strong></p><ul><li><p><code>p_string</code>: The input parameter to be split and renamed</p><ul><li><p><code>::String</code>: The parameter string to be split</p></li><li><p><code>::Symbol</code>: The parameter symbol to be split</p></li></ul></li><li><p><code>_splitter</code>: The delimiter used to split the parameter string</p></li></ul><p><strong>Returns</strong></p><p>A tuple containing the split and renamed parameter components.</p>`,6))])])}const Ni=l(r,[["render",Si]]);export{Di as __pageData,Ni as default};
