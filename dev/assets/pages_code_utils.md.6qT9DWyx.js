import{_ as n,C as p,c as o,o as d,j as s,aA as a,a as e,G as l}from"./chunks/framework.C07RQYAL.js";const Ti=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/code/utils.md","filePath":"pages/code/utils.md","lastUpdated":null}'),r={name:"pages/code/utils.md"},g={class:"jldocstring custom-block"},h={class:"jldocstring custom-block"},u={class:"jldocstring custom-block"},k={class:"jldocstring custom-block"},c={class:"jldocstring custom-block"},y={class:"jldocstring custom-block"},b={class:"jldocstring custom-block"},m={class:"jldocstring custom-block"},T={class:"jldocstring custom-block"},E={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"},C={class:"jldocstring custom-block"},A={class:"jldocstring custom-block"},S={class:"jldocstring custom-block"},f={class:"jldocstring custom-block"},v={class:"jldocstring custom-block"},j={class:"jldocstring custom-block"},F={class:"jldocstring custom-block"},D={class:"jldocstring custom-block"},I={class:"jldocstring custom-block"},U={class:"jldocstring custom-block"},x={class:"jldocstring custom-block"},N={class:"jldocstring custom-block"},V={class:"jldocstring custom-block"},B={class:"jldocstring custom-block"},w={class:"jldocstring custom-block"},P={class:"jldocstring custom-block"},M={class:"jldocstring custom-block"},R={class:"jldocstring custom-block"},O={class:"jldocstring custom-block"},z={class:"jldocstring custom-block"},L={class:"jldocstring custom-block"},G={class:"jldocstring custom-block"},q={class:"jldocstring custom-block"},Y={class:"jldocstring custom-block"},H={class:"jldocstring custom-block"},W={class:"jldocstring custom-block"},$={class:"jldocstring custom-block"},J={class:"jldocstring custom-block"},K={class:"jldocstring custom-block"},Q={class:"jldocstring custom-block"},X={class:"jldocstring custom-block"},Z={class:"jldocstring custom-block"},ii={class:"jldocstring custom-block"},si={class:"jldocstring custom-block"},ei={class:"jldocstring custom-block"},ti={class:"jldocstring custom-block"},ai={class:"jldocstring custom-block"},li={class:"jldocstring custom-block"},ni={class:"jldocstring custom-block"},pi={class:"jldocstring custom-block"},oi={class:"jldocstring custom-block"},di={class:"jldocstring custom-block"},ri={class:"jldocstring custom-block"},gi={class:"jldocstring custom-block"};function hi(ui,i,ki,ci,yi,bi){const t=p("Badge");return d(),o("div",null,[s("details",g,[s("summary",null,[i[0]||(i[0]=s("a",{id:"SindbadUtils.SindbadUtils",href:"#SindbadUtils.SindbadUtils"},[s("span",{class:"jlbinding"},"SindbadUtils.SindbadUtils")],-1)),i[1]||(i[1]=e()),l(t,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),i[2]||(i[2]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SindbadUtils</span></span></code></pre></div><p>The <code>SindbadUtils</code> package provides a collection of utility functions and tools for handling data, managing NamedTuples, and performing spatial and temporal operations in the SINDBAD framework. It serves as a foundational package for simplifying common tasks and ensuring consistency across SINDBAD experiments.</p><p><strong>Purpose:</strong></p><p>This package is designed to provide reusable utilities for data manipulation, statistical operations, and spatial/temporal processing.</p><p><strong>Dependencies:</strong></p><ul><li><p><code>Crayons</code>: Enables colored terminal output, improving the readability of logs and messages.</p></li><li><p><code>StyledStrings</code>: Provides styled text for enhanced terminal output.</p></li><li><p><code>DataStructures</code>: Supplies advanced data structures (e.g., <code>OrderedDict</code>, <code>Deque</code>) for efficient data handling.</p></li><li><p><code>Dates</code>: Facilitates date and time operations, useful for temporal data processing.</p></li><li><p><code>FIGlet</code>: Generates ASCII art text, useful for creating visually appealing headers in logs or outputs.</p></li><li><p><code>Logging</code>: Provides logging utilities for debugging and monitoring SINDBAD workflows.</p></li><li><p><code>NaNStatistics</code>: Extends statistical operations to handle missing values (<code>NaN</code>), ensuring robust data analysis.</p></li><li><p><code>StaticArraysCore</code>: Supports efficient, fixed-size arrays for performance-critical operations.</p></li><li><p><code>StatsBase</code>: Supplies basic statistical functions (e.g., <code>mean</code>, <code>sum</code>, <code>sample</code>) for data analysis.</p></li><li><p><code>TypedTables</code>: Provides lightweight, type-stable tables for structured data manipulation.</p></li></ul><p><strong>Included Files:</strong></p><ol><li><strong><code>utilsTypes.jl</code></strong>:</li></ol><ul><li>Defines custom types and structures used across SINDBAD utilities.</li></ul><ol start="2"><li><strong><code>getArrayView.jl</code></strong>:</li></ol><ul><li>Implements functions for creating views of arrays, enabling efficient data slicing and subsetting.</li></ul><ol start="3"><li><strong><code>utils.jl</code></strong>:</li></ol><ul><li>Contains general-purpose utility functions for data manipulation and processing.</li></ul><ol start="4"><li><strong><code>utilsNT.jl</code></strong>:</li></ol><ul><li>Provides utilities for working with NamedTuples, including transformations and access operations.</li></ul><ol start="5"><li><strong><code>utilsSpatial.jl</code></strong>:</li></ol><ul><li>Implements spatial operations, such as extracting subsets of data based on spatial dimensions.</li></ul><ol start="6"><li><strong><code>utilsTemporal.jl</code></strong>:</li></ol><ul><li>Handles temporal operations, including time-based filtering and aggregation.</li></ul><p><strong>Notes:</strong></p><ul><li><p>The package re-exports key packages (<code>NaNStatistics</code>, <code>StatsBase</code>, <code>TypedTables</code>) for convenience, allowing users to access their functionality directly through <code>SindbadUtils</code>.</p></li><li><p>Designed to be lightweight and modular, enabling seamless integration with other SINDBAD packages.</p></li></ul><p><strong>Examples:</strong></p><ol><li><strong>Performing spatial subsetting</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spatial_subset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getSpatialSubset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spatial_data, region_of_interest)</span></span></code></pre></div><ol><li><strong>Handling NamedTuples</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transformed_nt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transformNamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input_nt, transformation_function)</span></span></code></pre></div><ol><li><strong>Calculating statistics with missing values</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadUtils</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mean_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data_with_nans, skipmissing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,28))]),i[165]||(i[165]=s("h2",{id:"exported",tabindex:"-1"},[e("Exported "),s("a",{class:"header-anchor",href:"#exported","aria-label":'Permalink to "Exported"'},"â€‹")],-1)),s("details",h,[s("summary",null,[i[3]||(i[3]=s("a",{id:"SindbadUtils.LandWrapper",href:"#SindbadUtils.LandWrapper"},[s("span",{class:"jlbinding"},"SindbadUtils.LandWrapper")],-1)),i[4]||(i[4]=e()),l(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[5]||(i[5]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LandWrapper{S}</span></span></code></pre></div><p>Wraps the nested fields of a NamedTuple output of SINDBAD land into a nested structure of views that can be easily accessed with dot notation.</p><p><strong>Fields:</strong></p><ul><li><code>s::S</code>: The underlying NamedTuple or data structure being wrapped.</li></ul>',4))]),s("details",u,[s("summary",null,[i[6]||(i[6]=s("a",{id:"SindbadUtils.TimeAggregator",href:"#SindbadUtils.TimeAggregator"},[s("span",{class:"jlbinding"},"SindbadUtils.TimeAggregator")],-1)),i[7]||(i[7]=e()),l(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[8]||(i[8]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TimeAggregator{I, aggr_func}</span></span></code></pre></div><p>define a new type of temporal aggregation</p><p><strong>Fields:</strong></p><ul><li><p><code>indices::I</code>: indices to be collected for aggregation</p></li><li><p><code>aggr_func::aggr_func</code>: a function to use for aggregation, defaults to mean</p></li></ul>',4))]),s("details",k,[s("summary",null,[i[9]||(i[9]=s("a",{id:"SindbadUtils.TimeAggregatorViewInstance",href:"#SindbadUtils.TimeAggregatorViewInstance"},[s("span",{class:"jlbinding"},"SindbadUtils.TimeAggregatorViewInstance")],-1)),i[10]||(i[10]=e()),l(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TimeAggregatorViewInstance{T, N, D, P, AV </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TimeAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Fields:</strong></p><ul><li><p><code>parent::P</code>: the parent data</p></li><li><p><code>agg::AV</code>: a view of the parent data</p></li><li><p><code>dim::Val{D}</code>: a val instance of the type that stores the dimension to be aggregated on</p></li></ul>',3))]),s("details",c,[s("summary",null,[i[12]||(i[12]=s("a",{id:"SindbadUtils.booleanizeArray-Tuple{Any}",href:"#SindbadUtils.booleanizeArray-Tuple{Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.booleanizeArray")],-1)),i[13]||(i[13]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[14]||(i[14]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">booleanizeArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_array)</span></span></code></pre></div><p>Converts an array into a boolean array where elements greater than zero are <code>true</code>.</p><p><strong>Arguments:</strong></p><ul><li><code>_array</code>: The input array to be converted.</li></ul><p><strong>Returns:</strong></p><p>A boolean array with the same dimensions as <code>_array</code>.</p>',6))]),s("details",y,[s("summary",null,[i[15]||(i[15]=s("a",{id:"SindbadUtils.createTimeAggregator",href:"#SindbadUtils.createTimeAggregator"},[s("span",{class:"jlbinding"},"SindbadUtils.createTimeAggregator")],-1)),i[16]||(i[16]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[17]||(i[17]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">createTimeAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(date_vector, t_step, aggr_func </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mean, skip_aggregation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>a function to create a temporal aggregation struct for a given time step</p><p><strong>Arguments:</strong></p><ul><li><p><code>date_vector</code>: a vector of datetime objects that determine the index of the array to be aggregated</p></li><li><p><code>t_step</code>: a string/Symbol/Type defining the aggregation time target with different types as follows:</p><ul><li><p><code>::Union{String, Symbol}</code>: a string/Symbol defining the aggregation time target from the settings</p></li><li><p><code>::TimeAllYears</code>: aggregation/slicing to include all years</p></li><li><p><code>::TimeMean</code>: aggregation to mean over all time steps</p></li><li><p><code>::TimeDay</code>: aggregation to daily time steps</p></li><li><p><code>::TimeDayAnomaly</code>: aggregation to daily anomalies</p></li><li><p><code>::TimeDayIAV</code>: aggregation to daily IAV</p></li><li><p><code>::TimeDayMSC</code>: aggregation to daily MSC</p></li><li><p><code>::TimeDayMSCAnomaly</code>: aggregation to daily MSC anomalies</p></li><li><p><code>::TimeHour</code>: aggregation to daily time steps</p></li><li><p><code>::TimeHourAnomaly</code>: aggregation to daily anomalies</p></li><li><p><code>::TimeHourIAV</code>: aggregation to daily IAV</p></li><li><p><code>::TimeHourMSC</code>: aggregation to daily MSC</p></li><li><p><code>::TimeHourMSCAnomaly</code>: aggregation to daily MSC anomalies</p></li><li><p><code>::TimeFirstYear</code>: aggregation/slicing of the first year</p></li><li><p><code>::TimeMonth</code>: aggregation to monthly time steps</p></li><li><p><code>::TimeMonthAnomaly</code>: aggregation to monthly anomalies</p></li><li><p><code>::TimeMonthIAV</code>: aggregation to monthly IAV</p></li><li><p><code>::TimeMonthMSC</code>: aggregation to monthly MSC</p></li><li><p><code>::TimeMonthMSCAnomaly</code>: aggregation to monthly MSC anomalies</p></li><li><p><code>::TimeRandomYear</code>: aggregation/slicing of a random year</p></li><li><p><code>::TimeShuffleYears</code>: aggregation/slicing of shuffled years</p></li><li><p><code>::TimeSizedArray</code>: aggregation to a sized array</p></li><li><p><code>::TimeYear</code>: aggregation to yearly time steps</p></li><li><p><code>::TimeYearAnomaly</code>: aggregation to yearly anomalies</p></li></ul></li><li><p><code>aggr_func</code>: a function to use for aggregation, defaults to mean</p></li><li><p><code>skip_aggregation</code>: a flag indicating if the aggregation target is the same as the input data and the aggregation can be skipped, defaults to false</p></li></ul>',4))]),s("details",b,[s("summary",null,[i[18]||(i[18]=s("a",{id:"SindbadUtils.dictToNamedTuple-Tuple{AbstractDict}",href:"#SindbadUtils.dictToNamedTuple-Tuple{AbstractDict}"},[s("span",{class:"jlbinding"},"SindbadUtils.dictToNamedTuple")],-1)),i[19]||(i[19]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[20]||(i[20]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dictToNamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>covert nested dictionary to NamedTuple</p>',2))]),s("details",m,[s("summary",null,[i[21]||(i[21]=s("a",{id:"SindbadUtils.doNothing-Tuple{Any}",href:"#SindbadUtils.doNothing-Tuple{Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.doNothing")],-1)),i[22]||(i[22]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[23]||(i[23]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">doNothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dat)</span></span></code></pre></div><p>Returns the input as is, without any modifications.</p><p><strong>Arguments:</strong></p><ul><li><code>dat</code>: The input data.</li></ul><p><strong>Returns:</strong></p><p>The same input data.</p>',6))]),s("details",T,[s("summary",null,[i[24]||(i[24]=s("a",{id:"SindbadUtils.dropFields-Tuple{NamedTuple, Tuple{Vararg{Symbol}}}",href:"#SindbadUtils.dropFields-Tuple{NamedTuple, Tuple{Vararg{Symbol}}}"},[s("span",{class:"jlbinding"},"SindbadUtils.dropFields")],-1)),i[25]||(i[25]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[26]||(i[26]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dropFields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(namedtuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, names</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Vararg{Symbol}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>removes/drops the list of fields from a given named tuple</p><p><strong>Arguments:</strong></p><ul><li><p><code>namedtuple</code>: a namedtuple to remove the fields from</p></li><li><p><code>names</code>: a tuple of names to be removed</p></li></ul>',4))]),s("details",E,[s("summary",null,[i[27]||(i[27]=s("a",{id:"SindbadUtils.entertainMe",href:"#SindbadUtils.entertainMe"},[s("span",{class:"jlbinding"},"SindbadUtils.entertainMe")],-1)),i[28]||(i[28]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[29]||(i[29]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">entertainMe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, disp_text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SINDBAD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Displays the given text <code>disp_text</code> as a banner <code>n</code> times.</p><p><strong>Arguments:</strong></p><ul><li><p><code>n</code>: Number of times to display the banner (default: 10).</p></li><li><p><code>disp_text</code>: The text to display (default: &quot;SINDBAD&quot;).</p></li><li><p><code>c_olor</code>: Whether to display the text in random colors (default: <code>false</code>).</p></li></ul>',4))]),s("details",_,[s("summary",null,[i[30]||(i[30]=s("a",{id:"SindbadUtils.foldlUnrolled-Union{Tuple{N}, Tuple{Any, NTuple{N, Any}}} where N",href:"#SindbadUtils.foldlUnrolled-Union{Tuple{N}, Tuple{Any, NTuple{N, Any}}} where N"},[s("span",{class:"jlbinding"},"SindbadUtils.foldlUnrolled")],-1)),i[31]||(i[31]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[32]||(i[32]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foldlUnrolled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Vararg{Any, N}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; init)</span></span></code></pre></div><p>generate the expression to run the function for each element of a given Tuple to avoid complexity of for loops for compiler</p><p><strong>Arguments:</strong></p><ul><li><p><code>f</code>: a function call</p></li><li><p><code>x</code>: the iterative to loop through</p></li><li><p><code>init</code>: initial variable to overwrite</p></li></ul>',4))]),s("details",C,[s("summary",null,[i[33]||(i[33]=s("a",{id:"SindbadUtils.getAbsDataPath-Tuple{Any, Any}",href:"#SindbadUtils.getAbsDataPath-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.getAbsDataPath")],-1)),i[34]||(i[34]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[35]||(i[35]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getAbsDataPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info, data_path)</span></span></code></pre></div><p>Converts a relative data path to an absolute path based on the experiment directory.</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: The SINDBAD experiment information object.</p></li><li><p><code>data_path</code>: The relative or absolute data path.</p></li></ul><p><strong>Returns:</strong></p><p>An absolute data path.</p>',6))]),s("details",A,[s("summary",null,[i[36]||(i[36]=s("a",{id:"SindbadUtils.getArrayView",href:"#SindbadUtils.getArrayView"},[s("span",{class:"jlbinding"},"SindbadUtils.getArrayView")],-1)),i[37]||(i[37]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[38]||(i[38]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getArrayView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_dat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{&lt;:Any, N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, inds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Vararg{Int}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N</span></span></code></pre></div><p>Creates a view of the input array <code>_dat</code> based on the provided indices tuple <code>inds</code>.</p><p><strong>Arguments:</strong></p><ul><li><p><code>_dat</code>: The input array from which a view is created. Can be of any dimensionality.</p></li><li><p><code>inds</code>: A tuple of integer indices specifying the spatial or temporal dimensions to slice.</p></li></ul><p><strong>Returns:</strong></p><ul><li>A <code>SubArray</code> view of <code>_dat</code> corresponding to the specified indices.</li></ul><p><strong>Notes:</strong></p><ul><li><p>The function supports arrays of arbitrary dimensions (<code>N</code>).</p></li><li><p>For arrays with fewer dimensions than the size of <code>inds</code>, an error is thrown.</p></li><li><p>For higher-dimensional arrays, the indices are applied to the last dimensions, while earlier dimensions are accessed using <code>Colon()</code> (i.e., all elements are included).</p></li><li><p>This function avoids copying data by creating a view, which is efficient for large arrays.</p></li></ul><p><strong>Error Handling:</strong></p><ul><li>Throws an error if the dimensionality of <code>_dat</code> is less than the size of <code>inds</code>.</li></ul>',10))]),s("details",S,[s("summary",null,[i[39]||(i[39]=s("a",{id:"SindbadUtils.getCombinedNamedTuple-Tuple{NamedTuple, NamedTuple}",href:"#SindbadUtils.getCombinedNamedTuple-Tuple{NamedTuple, NamedTuple}"},[s("span",{class:"jlbinding"},"SindbadUtils.getCombinedNamedTuple")],-1)),i[40]||(i[40]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[41]||(i[41]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getCombinedNamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base_nt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, priority_nt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>combines the property values of the base NT with the properties set for the particular field from priority NT</p>',2))]),s("details",f,[s("summary",null,[i[42]||(i[42]=s("a",{id:"SindbadUtils.getSpatialSubset-Tuple{Any, Any}",href:"#SindbadUtils.getSpatialSubset-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.getSpatialSubset")],-1)),i[43]||(i[43]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[44]||(i[44]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getSpatialSubset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ss, v)</span></span></code></pre></div><p>Extracts a spatial subset of data based on specified spatial subsetting type/strategy.</p><p><strong>Arguments</strong></p><ul><li><p><code>ss</code>: Spatial subset parameters or geometry defining the region of interest</p></li><li><p><code>v</code>: Data to be spatially subset</p></li></ul><p><strong>Returns</strong></p><p>Spatially subset data according to the specified parameters</p><p><strong>Note</strong></p><p>The function assumes input data and spatial parameters are in compatible formats</p>',8))]),s("details",v,[s("summary",null,[i[45]||(i[45]=s("a",{id:"SindbadUtils.getTimeAggregatorTypeInstance",href:"#SindbadUtils.getTimeAggregatorTypeInstance"},[s("span",{class:"jlbinding"},"SindbadUtils.getTimeAggregatorTypeInstance")],-1)),i[46]||(i[46]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[47]||(i[47]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTimeAggregatorTypeInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aggr)</span></span></code></pre></div><p>Creates and returns a time aggregator instance based on the provided aggregation.</p><p><strong>Arguments</strong></p><ul><li><p><code>aggr::Symbol</code>: Symbol specifying the type of time aggregation to be performed</p></li><li><p><code>aggr::String</code>: String specifying the type of time aggregation to be performed</p></li></ul><p><strong>Returns</strong></p><p>An instance of the corresponding time aggregator type.</p><p><strong>Notes:</strong></p><ul><li>A similar approach <code>getTypeInstanceForNamedOptions</code> is used in <code>SindbadSetup</code> for creating types of other named option</li></ul>',8))]),s("details",j,[s("summary",null,[i[48]||(i[48]=s("a",{id:"SindbadUtils.isInvalid-Tuple{Any}",href:"#SindbadUtils.isInvalid-Tuple{Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.isInvalid")],-1)),i[49]||(i[49]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[50]||(i[50]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isInvalid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Checks if a number is invalid (e.g., <code>nothing</code>, <code>missing</code>, <code>NaN</code>, or <code>Inf</code>).</p><p><strong>Arguments:</strong></p><ul><li><code>_data</code>: The input number.</li></ul><p><strong>Returns:</strong></p><p><code>true</code> if the number is invalid, otherwise <code>false</code>.</p>',6))]),s("details",F,[s("summary",null,[i[51]||(i[51]=s("a",{id:"SindbadUtils.makeLongTuple",href:"#SindbadUtils.makeLongTuple"},[s("span",{class:"jlbinding"},"SindbadUtils.makeLongTuple")],-1)),i[52]||(i[52]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[53]||(i[53]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">makeLongTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(normal_tuple; longtuple_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><p><code>normal_tuple</code>: a normal tuple</p></li><li><p><code>longtuple_size</code>: size to break down the tuple into</p></li></ul>',3))]),s("details",D,[s("summary",null,[i[54]||(i[54]=s("a",{id:"SindbadUtils.makeLongTuple-2",href:"#SindbadUtils.makeLongTuple-2"},[s("span",{class:"jlbinding"},"SindbadUtils.makeLongTuple")],-1)),i[55]||(i[55]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[56]||(i[56]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">makeLongTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(normal_tuple; longtuple_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><p><code>normal_tuple</code>: a normal tuple</p></li><li><p><code>longtuple_size</code>: size to break down the tuple into</p></li></ul>',3))]),s("details",I,[s("summary",null,[i[57]||(i[57]=s("a",{id:"SindbadUtils.makeNamedTuple-Tuple{Any, Any}",href:"#SindbadUtils.makeNamedTuple-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.makeNamedTuple")],-1)),i[58]||(i[58]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[59]||(i[59]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">makeNamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input_data, input_names)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><p><code>input_data</code>: a vector of data</p></li><li><p><code>input_names</code>: a vector/tuple of names</p></li></ul>',3))]),s("details",U,[s("summary",null,[i[60]||(i[60]=s("a",{id:"SindbadUtils.mergeNamedTuple-Tuple{Any, Any}",href:"#SindbadUtils.mergeNamedTuple-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.mergeNamedTuple")],-1)),i[61]||(i[61]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[62]||(i[62]=a("<p>Merges algorithm options by combining default options with user-provided options.</p><p>This function takes two option dictionaries and combines them, with user options taking precedence over default options.</p><p><strong>Arguments</strong></p><ul><li><p><code>def_o</code>: Default options object (NamedTuple/Struct/Dictionary) containing baseline algorithm parameters</p></li><li><p><code>u_o</code>: User options object containing user-specified overrides</p></li></ul><p><strong>Returns</strong></p><ul><li>A merged object containing the combined algorithm options</li></ul>",6))]),s("details",x,[s("summary",null,[i[63]||(i[63]=s("a",{id:"SindbadUtils.nonUnique-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T",href:"#SindbadUtils.nonUnique-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T"},[s("span",{class:"jlbinding"},"SindbadUtils.nonUnique")],-1)),i[64]||(i[64]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[65]||(i[65]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nonUnique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span></span></code></pre></div><p>Finds and returns a vector of duplicate elements in the input array.</p><p><strong>Arguments:</strong></p><ul><li><code>x</code>: The input array.</li></ul><p><strong>Returns:</strong></p><p>A vector of duplicate elements.</p>',6))]),s("details",N,[s("summary",null,[i[66]||(i[66]=s("a",{id:"SindbadUtils.removeEmptyTupleFields-Tuple{NamedTuple}",href:"#SindbadUtils.removeEmptyTupleFields-Tuple{NamedTuple}"},[s("span",{class:"jlbinding"},"SindbadUtils.removeEmptyTupleFields")],-1)),i[67]||(i[67]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[68]||(i[68]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removeEmptyTupleFields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>removes all empty files of a NamedTuple</p><p><strong>Arguments:</strong></p><ul><li><code>tpl</code>: input tuple</li></ul>',4))]),s("details",V,[s("summary",null,[i[69]||(i[69]=s("a",{id:"SindbadUtils.replaceInvalid-Tuple{Any, Any}",href:"#SindbadUtils.replaceInvalid-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.replaceInvalid")],-1)),i[70]||(i[70]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[71]||(i[71]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">replaceInvalid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_data, _data_fill)</span></span></code></pre></div><p>Replaces invalid numbers in the input with a specified fill value.</p><p><strong>Arguments:</strong></p><ul><li><p><code>_data</code>: The input number.</p></li><li><p><code>_data_fill</code>: The value to replace invalid numbers with.</p></li></ul><p><strong>Returns:</strong></p><p>The input number if valid, otherwise the fill value.</p>',6))]),s("details",B,[s("summary",null,[i[72]||(i[72]=s("a",{id:"SindbadUtils.setLogLevel-Tuple{Symbol}",href:"#SindbadUtils.setLogLevel-Tuple{Symbol}"},[s("span",{class:"jlbinding"},"SindbadUtils.setLogLevel")],-1)),i[73]||(i[73]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[74]||(i[74]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setLogLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(log_level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Sets the logging level to the specified level.</p><p><strong>Arguments:</strong></p><ul><li><code>log_level</code>: The desired logging level (<code>:debug</code>, <code>:warn</code>, <code>:error</code>).</li></ul>',4))]),s("details",w,[s("summary",null,[i[75]||(i[75]=s("a",{id:"SindbadUtils.setLogLevel-Tuple{}",href:"#SindbadUtils.setLogLevel-Tuple{}"},[s("span",{class:"jlbinding"},"SindbadUtils.setLogLevel")],-1)),i[76]||(i[76]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[77]||(i[77]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setLogLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Sets the logging level to <code>Info</code>.</p>',2))]),s("details",P,[s("summary",null,[i[78]||(i[78]=s("a",{id:"SindbadUtils.setTupleField-Tuple{NamedTuple, Tuple{Symbol, Any}}",href:"#SindbadUtils.setTupleField-Tuple{NamedTuple, Tuple{Symbol, Any}}"},[s("span",{class:"jlbinding"},"SindbadUtils.setTupleField")],-1)),i[79]||(i[79]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[80]||(i[80]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTupleField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tpl, fieldname, vals)</span></span></code></pre></div><p>sets the field of a NamedTuple</p><p><strong>Arguments:</strong></p><ul><li><p><code>tpl</code>: input tuple</p></li><li><p><code>vals</code>: tuple with fieldname and value to write</p></li></ul>',4))]),s("details",M,[s("summary",null,[i[81]||(i[81]=s("a",{id:"SindbadUtils.setTupleSubfield-Tuple{NamedTuple, Symbol, Tuple{Symbol, Any}}",href:"#SindbadUtils.setTupleSubfield-Tuple{NamedTuple, Symbol, Tuple{Symbol, Any}}"},[s("span",{class:"jlbinding"},"SindbadUtils.setTupleSubfield")],-1)),i[82]||(i[82]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[83]||(i[83]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setTupleSubfield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tpl, fieldname, vals)</span></span></code></pre></div><p>sets the subfield of a NamedTuple</p><p><strong>Arguments:</strong></p><ul><li><p><code>tpl</code>: input tuple</p></li><li><p><code>fieldname</code>: fieldname to write</p></li><li><p><code>vals</code>: tuple with subfieldname and value to write</p></li></ul>',4))]),s("details",R,[s("summary",null,[i[84]||(i[84]=s("a",{id:"SindbadUtils.sindbadBanner",href:"#SindbadUtils.sindbadBanner"},[s("span",{class:"jlbinding"},"SindbadUtils.sindbadBanner")],-1)),i[85]||(i[85]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[86]||(i[86]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sindbadBanner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(disp_text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SINDBAD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Displays the given text as a banner using Figlets.</p><p><strong>Arguments:</strong></p><ul><li><p><code>disp_text</code>: The text to display (default: &quot;SINDBAD&quot;).</p></li><li><p><code>c_olor</code>: Whether to display the text in random colors (default: <code>false</code>).</p></li></ul>',4))]),s("details",O,[s("summary",null,[i[87]||(i[87]=s("a",{id:"SindbadUtils.stackArrays-Tuple{Any}",href:"#SindbadUtils.stackArrays-Tuple{Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.stackArrays")],-1)),i[88]||(i[88]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[89]||(i[89]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stackArrays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span></code></pre></div><p>Stacks a collection of arrays along the first dimension.</p><p><strong>Arguments:</strong></p><ul><li><code>arr</code>: A collection of arrays to be stacked. All arrays must have the same size along their non-stacked dimensions.</li></ul><p><strong>Returns:</strong></p><ul><li><p>A single array where the input arrays are stacked along the first dimension.</p></li><li><p>If the arrays are 1D, the result is a vector.</p></li></ul><p><strong>Notes:</strong></p><ul><li><p>The function uses <code>hcat</code> to horizontally concatenate the arrays and then creates a view to stack them along the first dimension.</p></li><li><p>If the first dimension of the input arrays has a size of 1, the result is flattened into a vector.</p></li><li><p>This function is efficient and avoids unnecessary data copying.</p></li></ul>',8))]),s("details",z,[s("summary",null,[i[90]||(i[90]=s("a",{id:"SindbadUtils.tabularizeList-Tuple{Any}",href:"#SindbadUtils.tabularizeList-Tuple{Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.tabularizeList")],-1)),i[91]||(i[91]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[92]||(i[92]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tabularizeList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_list)</span></span></code></pre></div><p>Converts a list or tuple into a table using <code>TypedTables</code>.</p><p><strong>Arguments:</strong></p><ul><li><code>_list</code>: The input list or tuple.</li></ul><p><strong>Returns:</strong></p><p>A table representation of the input list.</p>',6))]),s("details",L,[s("summary",null,[i[93]||(i[93]=s("a",{id:"SindbadUtils.tcPrint-Tuple{Any}",href:"#SindbadUtils.tcPrint-Tuple{Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.tcPrint")],-1)),i[94]||(i[94]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[95]||(i[95]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tcPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d; _color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t_op</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><p>a helper function to navigate the input named tuple and annotate types.</p></li><li><p>a random set of colors is chosen per type of the data/field</p></li><li><p>a mixed colored output within a field usually warrants caution on type mismatches</p></li></ul><p><strong>Arguments:</strong></p><ul><li><p><code>d</code>: an object to print on screen</p></li><li><p><code>_color</code>: a flag to turn on/off the colors</p></li><li><p><code>_type</code>: a flag to turn on/off the appending of types</p></li><li><p><code>_value</code>: a flag to turn on/off the values</p></li><li><p><code>_tspace</code>: a starting tab space</p></li></ul>',4))]),s("details",G,[s("summary",null,[i[96]||(i[96]=s("a",{id:"SindbadUtils.temporalAggregation",href:"#SindbadUtils.temporalAggregation"},[s("span",{class:"jlbinding"},"SindbadUtils.temporalAggregation")],-1)),i[97]||(i[97]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[98]||(i[98]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">temporalAggregation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dat, temporal_aggregators, aggregation_type)</span></span></code></pre></div><p>a temporal aggregation function to aggregate the data using a vector of aggregators</p><p><strong>Arguments:</strong></p><ul><li><p><code>dat</code>: a data array/vector to aggregate</p></li><li><p><code>temporal_aggregators</code>: a vector of time aggregator structs with indices and function to do aggregation</p></li><li><p>aggregation_type: a type defining the type of aggregation to be done as follows:</p><ul><li><p><code>::TimeNoDiff</code>: a type defining that the aggregator does not require removing/reducing values from original time series</p></li><li><p><code>::TimeDiff</code>: a type defining that the aggregator requires removing/reducing values from original time series. First aggregator aggregates the main time series, second aggregator aggregates to the time series to be removed.</p></li><li><p><code>::TimeIndexed</code>: a type defining that the aggregator requires indexing the original time series</p></li></ul></li></ul>',4))]),s("details",q,[s("summary",null,[i[99]||(i[99]=s("a",{id:"SindbadUtils.toUpperCaseFirst",href:"#SindbadUtils.toUpperCaseFirst"},[s("span",{class:"jlbinding"},"SindbadUtils.toUpperCaseFirst")],-1)),i[100]||(i[100]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[101]||(i[101]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toUpperCaseFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Converts the first letter of each word in a string to uppercase, removes underscores, and adds a prefix.</p><p><strong>Arguments:</strong></p><ul><li><p><code>s</code>: The input string.</p></li><li><p><code>prefix</code>: A prefix to add to the resulting string (default: &quot;&quot;).</p></li></ul><p><strong>Returns:</strong></p><p>A <code>Symbol</code> with the transformed string.</p>',6))]),s("details",Y,[s("summary",null,[i[102]||(i[102]=s("a",{id:"SindbadUtils.toggleStackTraceNT",href:"#SindbadUtils.toggleStackTraceNT"},[s("span",{class:"jlbinding"},"SindbadUtils.toggleStackTraceNT")],-1)),i[103]||(i[103]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[104]||(i[104]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toggleStackTraceNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(toggle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Modifies the display of stack traces to reduce verbosity for NamedTuples.</p><p><strong>Arguments:</strong></p><ul><li><code>toggle</code>: Whether to enable or disable the modification (default: <code>true</code>).</li></ul>',4))]),s("details",H,[s("summary",null,[i[105]||(i[105]=s("a",{id:"SindbadUtils.valToSymbol-Tuple{Any}",href:"#SindbadUtils.valToSymbol-Tuple{Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.valToSymbol")],-1)),i[106]||(i[106]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[107]||(i[107]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">valToSymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val)</span></span></code></pre></div><p>Returns the symbol corresponding to the type of the input value.</p><p><strong>Arguments:</strong></p><ul><li><code>val</code>: The input value.</li></ul><p><strong>Returns:</strong></p><p>A <code>Symbol</code> representing the type of the input value.</p>',6))]),i[166]||(i[166]=s("h2",{id:"internal",tabindex:"-1"},[e("Internal "),s("a",{class:"header-anchor",href:"#internal","aria-label":'Permalink to "Internal"'},"â€‹")],-1)),s("details",W,[s("summary",null,[i[108]||(i[108]=s("a",{id:"SindbadUtils.ArrayView",href:"#SindbadUtils.ArrayView"},[s("span",{class:"jlbinding"},"SindbadUtils.ArrayView")],-1)),i[109]||(i[109]=e()),l(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[110]||(i[110]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ArrayView{T,N,S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{&lt;:Any,N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A view into a specific array within a group of data, enabling efficient access and manipulation.</p><p><strong>Fields:</strong></p><ul><li><p><code>s::S</code>: The underlying array being viewed.</p></li><li><p><code>groupname::Symbol</code>: The name of the group containing the array.</p></li><li><p><code>arrayname::Symbol</code>: The name of the array being accessed.</p></li></ul>',4))]),s("details",$,[s("summary",null,[i[111]||(i[111]=s("a",{id:"SindbadUtils.GroupView",href:"#SindbadUtils.GroupView"},[s("span",{class:"jlbinding"},"SindbadUtils.GroupView")],-1)),i[112]||(i[112]=e()),l(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[113]||(i[113]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GroupView{S}</span></span></code></pre></div><p>Represents a group of data within a <code>LandWrapper</code>, allowing access to specific groups of variables.</p><p><strong>Fields:</strong></p><ul><li><p><code>groupname::Symbol</code>: The name of the group being accessed.</p></li><li><p><code>s::S</code>: The underlying data structure containing the group.</p></li></ul>',4))]),s("details",J,[s("summary",null,[i[114]||(i[114]=s("a",{id:"Base.getindex-Union{Tuple{N}, Tuple{TimeAggregatorViewInstance, Vararg{Int64, N}}} where N",href:"#Base.getindex-Union{Tuple{N}, Tuple{TimeAggregatorViewInstance, Vararg{Int64, N}}} where N"},[s("span",{class:"jlbinding"},"Base.getindex")],-1)),i[115]||(i[115]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[116]||(i[116]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getindex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeAggregatorViewInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, I</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vararg{Int, N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>extend the getindex function for TimeAggregatorViewInstance type</p>',2))]),s("details",K,[s("summary",null,[i[117]||(i[117]=s("a",{id:"Base.getproperty-Tuple{SindbadUtils.GroupView, Symbol}",href:"#Base.getproperty-Tuple{SindbadUtils.GroupView, Symbol}"},[s("span",{class:"jlbinding"},"Base.getproperty")],-1)),i[118]||(i[118]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[119]||(i[119]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getproperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GroupView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, aggr_func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Accesses a specific array within a group of data in a <code>GroupView</code>.</p><p><strong>Returns:</strong></p><p>An <code>ArrayView</code> object for the specified array.</p>',4))]),s("details",Q,[s("summary",null,[i[120]||(i[120]=s("a",{id:"Base.propertynames-Tuple{SindbadUtils.GroupView}",href:"#Base.propertynames-Tuple{SindbadUtils.GroupView}"},[s("span",{class:"jlbinding"},"Base.propertynames")],-1)),i[121]||(i[121]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[122]||(i[122]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">propertynames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GroupView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the property names of a group in a <code>GroupView</code>.</p>',2))]),s("details",X,[s("summary",null,[i[123]||(i[123]=s("a",{id:"Base.show-Tuple{IO, SindbadUtils.GroupView}",href:"#Base.show-Tuple{IO, SindbadUtils.GroupView}"},[s("span",{class:"jlbinding"},"Base.show")],-1)),i[124]||(i[124]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[125]||(i[125]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, gv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GroupView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Displays a summary of the contents of a <code>GroupView</code>.</p>',2))]),s("details",Z,[s("summary",null,[i[126]||(i[126]=s("a",{id:"Base.size-Tuple{TimeAggregatorViewInstance, Any}",href:"#Base.size-Tuple{TimeAggregatorViewInstance, Any}"},[s("span",{class:"jlbinding"},"Base.size")],-1)),i[127]||(i[127]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[128]||(i[128]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeAggregatorViewInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i)</span></span></code></pre></div><p>extend the size function for TimeAggregatorViewInstance type</p>',2))]),s("details",ii,[s("summary",null,[i[129]||(i[129]=s("a",{id:"Base.view-Tuple{AbstractArray, TimeAggregator}",href:"#Base.view-Tuple{AbstractArray, TimeAggregator}"},[s("span",{class:"jlbinding"},"Base.view")],-1)),i[130]||(i[130]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[131]||(i[131]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>extend the view function for TimeAggregatorViewInstance type</p><p><strong>Arguments:</strong></p><ul><li><p><code>x</code>: input array to be viewed</p></li><li><p><code>v</code>: time aggregator struct with indices and function</p></li><li><p><code>dim</code>: the dimension along which the aggregation should be done</p></li></ul>',4))]),s("details",si,[s("summary",null,[i[132]||(i[132]=s("a",{id:"SindbadUtils.collectColorForTypes-Tuple{Any}",href:"#SindbadUtils.collectColorForTypes-Tuple{Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.collectColorForTypes")],-1)),i[133]||(i[133]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[134]||(i[134]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collectColorForTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d; _color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>utility function to collect colors for all types from nested namedtuples</p>',2))]),s("details",ei,[s("summary",null,[i[135]||(i[135]=s("a",{id:"SindbadUtils.doTemporalAggregation",href:"#SindbadUtils.doTemporalAggregation"},[s("span",{class:"jlbinding"},"SindbadUtils.doTemporalAggregation")],-1)),i[136]||(i[136]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[137]||(i[137]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">doTemporalAggregation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, temporal_aggregator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>a temporal aggregation function to aggregate the data using a given aggregator when the input data is an array</p><p><strong>Arguments:</strong></p><ul><li><p><code>dat</code>: a data array/vector to aggregate with function for the following types:</p><ul><li><p><code>::AbstractArray</code>: an array</p></li><li><p><code>::SubArray</code>: a view of an array</p></li><li><p><code>::Nothing</code>: a dummy type to return the input and do no aggregation data</p></li></ul></li><li><p><code>temporal_aggregator</code>: a time aggregator struct with indices and function to do aggregation</p></li><li><p><code>dim</code>: the dimension along which the aggregation should be done</p></li></ul>',4))]),s("details",ti,[s("summary",null,[i[138]||(i[138]=s("a",{id:"SindbadUtils.getIndexForSelectedYear-Tuple{Any, Any}",href:"#SindbadUtils.getIndexForSelectedYear-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.getIndexForSelectedYear")],-1)),i[139]||(i[139]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[140]||(i[140]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getIndexForSelectedYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(years, sel_year)</span></span></code></pre></div><p>a helper function to get the indices of the first year from the date vector</p>',2))]),s("details",ai,[s("summary",null,[i[141]||(i[141]=s("a",{id:"SindbadUtils.getIndicesForTimeGroups-Tuple{Any}",href:"#SindbadUtils.getIndicesForTimeGroups-Tuple{Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.getIndicesForTimeGroups")],-1)),i[142]||(i[142]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[143]||(i[143]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getIndicesForTimeGroups</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(groups)</span></span></code></pre></div><p>a helper function to get the indices of the date group of the time series</p>',2))]),s("details",li,[s("summary",null,[i[144]||(i[144]=s("a",{id:"SindbadUtils.getTimeAggrArray-Union{Tuple{AbstractArray{<:Any, N}}, Tuple{N}} where N",href:"#SindbadUtils.getTimeAggrArray-Union{Tuple{AbstractArray{<:Any, N}}, Tuple{N}} where N"},[s("span",{class:"jlbinding"},"SindbadUtils.getTimeAggrArray")],-1)),i[145]||(i[145]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[146]||(i[146]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTimeAggrArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_dat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T, 2}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>a helper function to instantiate an array from the TimeAggregatorViewInstance for N-dimensional array</p>',2))]),s("details",ni,[s("summary",null,[i[147]||(i[147]=s("a",{id:"SindbadUtils.getTimeArray-Tuple{Any, TimeSizedArray}",href:"#SindbadUtils.getTimeArray-Tuple{Any, TimeSizedArray}"},[s("span",{class:"jlbinding"},"SindbadUtils.getTimeArray")],-1)),i[148]||(i[148]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[149]||(i[149]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTimeArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ar, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeSizedArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>a helper function to get the array of indices</p><p><strong>Arguments:</strong></p><ul><li><p><code>ar</code>: an array of time</p></li><li><p>array type: a type defining the type of array to be returned</p><ul><li><p><code>::TimeSizedArray</code>: indices as static array</p></li><li><p><code>::TimeArray</code>: indices as normal array</p></li></ul></li></ul>',4))]),s("details",pi,[s("summary",null,[i[150]||(i[150]=s("a",{id:"SindbadUtils.getTypeOfTimeIndexArray",href:"#SindbadUtils.getTypeOfTimeIndexArray"},[s("span",{class:"jlbinding"},"SindbadUtils.getTypeOfTimeIndexArray")],-1)),i[151]||(i[151]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[152]||(i[152]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTypeOfTimeIndexArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>a helper functio to easily switch the array type for indices of the TimeAggregator object</p>',2))]),s("details",oi,[s("summary",null,[i[153]||(i[153]=s("a",{id:"SindbadUtils.getTypes!-Tuple{Any, Any}",href:"#SindbadUtils.getTypes!-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"SindbadUtils.getTypes!")],-1)),i[154]||(i[154]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[155]||(i[155]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTypes!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d, all_types)</span></span></code></pre></div><p>utility function to collect all types from nested namedtuples</p>',2))]),s("details",di,[s("summary",null,[i[156]||(i[156]=s("a",{id:"SindbadUtils.getdim-Union{Tuple{TimeAggregatorViewInstance{<:Any, <:Any, D}}, Tuple{D}} where D",href:"#SindbadUtils.getdim-Union{Tuple{TimeAggregatorViewInstance{<:Any, <:Any, D}}, Tuple{D}} where D"},[s("span",{class:"jlbinding"},"SindbadUtils.getdim")],-1)),i[157]||(i[157]=e()),l(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[158]||(i[158]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getdim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeAggregatorViewInstance{&lt;:Any, &lt;:Any, D}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>get the dimension to aggregate for TimeAggregatorViewInstance type</p>',2))]),s("details",ri,[s("summary",null,[i[159]||(i[159]=s("a",{id:"SindbadUtils.mergeNamedTupleSetValue",href:"#SindbadUtils.mergeNamedTupleSetValue"},[s("span",{class:"jlbinding"},"SindbadUtils.mergeNamedTupleSetValue")],-1)),i[160]||(i[160]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[161]||(i[161]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mergeNamedTupleSetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o, p, v)</span></span></code></pre></div><p>Helper function to set the value of a field in the options object.</p><p><strong>Arguments:</strong></p><ul><li><p><code>o</code>: The options object, which can be a <code>NamedTuple</code> or a mutable struct.</p></li><li><p><code>p</code>: The field name to be updated.</p></li><li><p><code>v</code>: The new value to assign to the field.</p></li></ul><p><strong>Variants:</strong></p><ol><li><strong>For <code>NamedTuple</code> options</strong>:</li></ol><ul><li><p>Updates the field in an immutable <code>NamedTuple</code> by creating a new <code>NamedTuple</code> with the updated value.</p></li><li><p>Uses the <code>@set</code> macro for immutability handling.</p></li></ul><ol start="2"><li><strong>For mutable struct options (e.g., BayesOpt)</strong>:</li></ol><ul><li>Directly updates the field in the mutable struct using <code>Base.setproperty!</code>.</li></ul><p><strong>Returns:</strong></p><ul><li>The updated options object with the specified field modified.</li></ul><p><strong>Notes:</strong></p><ul><li><p>This function is used internally by <code>mergeNamedTuple</code> to handle field updates in both mutable and immutable options objects.</p></li><li><p>Ensures compatibility with different types of optimization algorithm configurations.</p></li></ul><p><strong>Examples:</strong></p><ol><li><strong>Updating a <code>NamedTuple</code></strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (max_iters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updated_options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mergeNamedTupleSetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:tol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1e-8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol><li><strong>Updating a mutable struct</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mutable struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BayesOptConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max_iters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float64</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BayesOptConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1e-6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updated_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mergeNamedTupleSetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:tol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1e-8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,18))]),s("details",gi,[s("summary",null,[i[162]||(i[162]=s("a",{id:"SindbadUtils.spatialSubset",href:"#SindbadUtils.spatialSubset"},[s("span",{class:"jlbinding"},"SindbadUtils.spatialSubset")],-1)),i[163]||(i[163]=e()),l(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[164]||(i[164]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spatialSubset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v, ss_range, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SindbadSpatialSubsetType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Extracts a spatial subset of the input data <code>v</code> based on the specified range and spatial dimension.</p><p><strong>Arguments:</strong></p><ul><li><p><code>v</code>: The input data from which a spatial subset is to be extracted.</p></li><li><p><code>ss_range</code>: The range of indices or values to subset along the specified spatial dimension.</p></li><li><p><code>&lt;:SindbadSpatialSubsetType</code>: The spatial dimension to subset, represented by one of the following types:</p><ul><li><p><code>Spacesite</code>: Subsets based on site indices.</p></li><li><p><code>Spacelat</code>: Subsets based on latitude indices.</p></li><li><p><code>Spacelatitude</code>: Subsets based on latitude values.</p></li><li><p><code>Spacelon</code>: Subsets based on longitude indices.</p></li><li><p><code>Spacelongitude</code>: Subsets based on longitude values.</p></li><li><p><code>Spaceid</code>: Subsets based on ID indices.</p></li><li><p><code>SpaceId</code>: Subsets based on ID values (capitalized <code>Id</code>).</p></li><li><p><code>SpaceID</code>: Subsets based on ID values (uppercase <code>ID</code>).</p></li></ul></li></ul><p><strong>Returns:</strong></p><ul><li>A subset of the input data <code>v</code> corresponding to the specified spatial range and dimension.</li></ul><p><strong>Notes:</strong></p><ul><li><p>The function dynamically selects the appropriate field in <code>v</code> based on the spatial type provided.</p></li><li><p>The spatial type determines the field name (e.g., <code>site</code>, <code>lat</code>, <code>longitude</code>, <code>id</code>, etc.) used for subsetting.</p></li></ul><p><strong>Examples:</strong></p><ol><li><strong>Subsetting by latitude</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spatialSubset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Spacelat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><ol><li><strong>Subsetting by longitude</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spatialSubset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Spacelongitude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><ol><li><strong>Subsetting by site ID</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> spatialSubset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Spaceid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div>',15))])])}const Ei=n(r,[["render",hi]]);export{Ti as __pageData,Ei as default};
