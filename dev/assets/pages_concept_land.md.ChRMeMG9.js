import{_ as a,c as s,o as i,aA as t}from"./chunks/framework.C07RQYAL.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/concept/land.md","filePath":"pages/concept/land.md","lastUpdated":null}'),l={name:"pages/concept/land.md"};function o(n,e,d,r,p,c){return i(),s("div",null,e[0]||(e[0]=[t('<p><code>land</code> is a NamedTuple that carries and passes information across SINDBAD models.</p><h2 id="Fields-of-land" tabindex="-1">Fields of land <a class="header-anchor" href="#Fields-of-land" aria-label="Permalink to &quot;Fields of land {#Fields-of-land}&quot;">​</a></h2><p>The <code>land</code> variables are organized in the subfields, and the depth of the NT should be exactly 2: a field diving the variable groups, and a subfield storing the data.</p><p>If a variable is only used in only one model, but it is necessary to be precomputed, the model name itself, (e.g., cCycleBase) is used as the field. So, <code>land</code> can technically have many fields. But, anything that is shared across models are grouped to contain the variables that have common characteristics as,</p><ul><li><p>constants: helpers and variables that are dependent on the model structure but do not change in time or model iterations/parameters</p></li><li><p>diagnostics: variables that are derived from either forcing/pools/states to indicates stressors, controllers, rates and so on.</p></li><li><p>fluxes: variables in mass/area/time units</p></li><li><p>models: instances that help model computation by dispatching on types. used in calculation of soil properties or updating pools</p></li><li><p>pools: model storages and pools and their changes, usually only those variables automatically generated from model_structure.json</p></li><li><p>properties: variables pertaining to characteristics of the land surface, e.g., soil and vegetation properties, and those directly derived from them</p></li><li><p>states: ecosystem states and variables derived from these states and pools</p></li></ul><h2 id="Displaying-land" tabindex="-1">Displaying land <a class="header-anchor" href="#Displaying-land" aria-label="Permalink to &quot;Displaying land {#Displaying-land}&quot;">​</a></h2><p>For every model structure/implementation, the <code>land</code> should be examined for potential violations of the variable grouping using:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tcPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(land)</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><ul><li><p>there are no-cross checks for overwriting of variables</p></li><li><p>repeated fields across groups should be avoided</p></li></ul></div>',9)]))}const m=a(l,[["render",o]]);export{u as __pageData,m as default};
