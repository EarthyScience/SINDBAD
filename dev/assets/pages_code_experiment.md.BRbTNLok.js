import{_ as l,C as p,c as o,o as d,j as s,aA as n,a as e,G as a}from"./chunks/framework.C07RQYAL.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/code/experiment.md","filePath":"pages/code/experiment.md","lastUpdated":null}'),r={name:"pages/code/experiment.md"},h={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""};function _(F,i,v,A,j,D){const t=p("Badge");return d(),o("div",null,[s("details",h,[s("summary",null,[i[0]||(i[0]=s("a",{id:"SindbadExperiment",href:"#SindbadExperiment"},[s("span",{class:"jlbinding"},"SindbadExperiment")],-1)),i[1]||(i[1]=e()),a(t,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),i[2]||(i[2]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SindbadExperiment</span></span></code></pre></div><p>The <code>SindbadExperiment</code> package provides tools for designing, running, and analyzing experiments in the SINDBAD MDI framework. It integrates core SINDBAD packages and utilities to streamline the experimental workflow, from data preparation to model execution and output analysis.</p><p><strong>Purpose:</strong></p><p>This package acts as a high-level interface for conducting experiments using the SINDBAD framework. It leverages the functionality of core SINDBAD packages and provides additional utilities for running experiments and managing outputs.</p><p><strong>Dependencies:</strong></p><ul><li><p><code>Sindbad</code>: The core SINDBAD package, providing foundational types and utilities for the SINDBAD framework.</p></li><li><p><code>SindbadUtils</code>: Provides utility functions for handling data, spatial operations, and other helper tasks.</p></li><li><p><code>SindbadSetup</code>: Manages setup configurations, parameter handling, and shared types for SINDBAD experiments.</p></li><li><p><code>SindbadData</code>: Handles data ingestion, preprocessing, and management for SINDBAD experiments.</p></li><li><p><code>SindbadTEM</code>: Implements the SINDBAD Terrestrial Ecosystem Model (TEM), enabling simulations for single locations, spatial grids, and cubes.</p></li><li><p><code>SindbadOptimization</code>: Provides optimization algorithms for parameter estimation and model calibration.</p></li><li><p><code>SindbadMetrics</code>: Supplies metrics for evaluating model performance and comparing simulations with observations.</p></li></ul><p><strong>Included Files:</strong></p><ol><li><strong><code>runExperiment.jl</code></strong>:</li></ol><ul><li>Contains functions for executing experiments, including setting up models, running simulations, and managing workflows.</li></ul><ol start="2"><li><strong><code>saveOutput.jl</code></strong>:</li></ol><ul><li>Provides utilities for saving experiment outputs in various formats, ensuring compatibility with downstream analysis tools.</li></ul><p><strong>Notes:</strong></p><ul><li><p>The package re-exports core SINDBAD packages (<code>Sindbad</code>, <code>SindbadUtils</code>, <code>SindbadSetup</code>, <code>SindbadData</code>, <code>SindbadTEM</code>, <code>SindbadOptimization</code>, <code>SindbadMetrics</code>) for convenience, allowing users to access their functionality directly through <code>SindbadExperiment</code>.</p></li><li><p>Designed to be extensible, enabling users to customize and expand the experimental workflow as needed.</p></li><li><p>Future extensions may include support for additional data formats (e.g., NetCDF, Zarr) and advanced output handling.</p></li></ul><p><strong>Examples:</strong></p><ol><li><strong>Running an experiment</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadExperiment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set up experiment parameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">experiment_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run the experiment</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runExperiment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(experiment_config)</span></span></code></pre></div><ol><li><strong>Saving experiment outputs</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadExperiment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Save outputs to a file</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">saveOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output_data, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;results.nc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,18))]),i[46]||(i[46]=s("h2",{id:"exported",tabindex:"-1"},[e("Exported "),s("a",{class:"header-anchor",href:"#exported","aria-label":'Permalink to "Exported"'},"â€‹")],-1)),s("details",u,[s("summary",null,[i[3]||(i[3]=s("a",{id:"SindbadExperiment.prepExperiment-Tuple{String}",href:"#SindbadExperiment.prepExperiment-Tuple{String}"},[s("span",{class:"jlbinding"},"SindbadExperiment.prepExperiment")],-1)),i[4]||(i[4]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[5]||(i[5]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prepExperiment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sindbad_experiment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; replace_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>prepares info, forcing and output NT for the experiment</p>',2))]),s("details",k,[s("summary",null,[i[6]||(i[6]=s("a",{id:"SindbadExperiment.runExperiment-Tuple{NamedTuple, NamedTuple, DoCalcCost}",href:"#SindbadExperiment.runExperiment-Tuple{NamedTuple, NamedTuple, DoCalcCost}"},[s("span",{class:"jlbinding"},"SindbadExperiment.runExperiment")],-1)),i[7]||(i[7]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[8]||(i[8]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runExperiment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, forcing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoCalcCost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>uses the configuration read from the json files, and consolidates and sets info fields needed for model simulation</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: a SINDBAD NT that includes all information needed for setup and execution of an experiment</p></li><li><p><code>forcing</code>: a forcing NT that contains the forcing time series set for ALL locations</p></li><li><p><code>::DoCalcCost</code>: a type dispatch for calculating cost</p></li></ul>',4))]),s("details",g,[s("summary",null,[i[9]||(i[9]=s("a",{id:"SindbadExperiment.runExperiment-Tuple{NamedTuple, NamedTuple, DoRunOptimization}",href:"#SindbadExperiment.runExperiment-Tuple{NamedTuple, NamedTuple, DoRunOptimization}"},[s("span",{class:"jlbinding"},"SindbadExperiment.runExperiment")],-1)),i[10]||(i[10]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[11]||(i[11]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runExperiment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, forcing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoRunOptimization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>uses the configuration read from the json files, and consolidates and sets info fields needed for model simulation</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: a SINDBAD NT that includes all information needed for setup and execution of an experiment</p></li><li><p><code>forcing</code>: a forcing NT that contains the forcing time series set for ALL locations</p></li><li><p><code>output</code>: an output NT including the data arrays, as well as information of variables and dimensions</p></li><li><p><code>::DoRunOptimization</code>: a type dispatch for running optimization</p></li></ul>',4))]),s("details",m,[s("summary",null,[i[12]||(i[12]=s("a",{id:"SindbadExperiment.runExperiment-Tuple{NamedTuple, NamedTuple, Union{DoNotRunOptimization, DoRunForward}}",href:"#SindbadExperiment.runExperiment-Tuple{NamedTuple, NamedTuple, Union{DoNotRunOptimization, DoRunForward}}"},[s("span",{class:"jlbinding"},"SindbadExperiment.runExperiment")],-1)),i[13]||(i[13]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[14]||(i[14]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runExperiment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, forcing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoRunForward</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>uses the configuration read from the json files, and consolidates and sets info fields needed for model simulation</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: a SINDBAD NT that includes all information needed for setup and execution of an experiment</p></li><li><p><code>forcing</code>: a forcing NT that contains the forcing time series set for ALL locations</p></li><li><p><code>output</code>: an output NT including the data arrays, as well as information of variables and dimensions</p></li><li><p><code>::Union{DoRunForward, DoNotRunOptimization}</code>: a type dispatch for forward run when it is true, or when optimization is false</p></li></ul>',4))]),s("details",c,[s("summary",null,[i[15]||(i[15]=s("a",{id:"SindbadExperiment.runExperimentCost-Tuple{String}",href:"#SindbadExperiment.runExperimentCost-Tuple{String}"},[s("span",{class:"jlbinding"},"SindbadExperiment.runExperimentCost")],-1)),i[16]||(i[16]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[17]||(i[17]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runExperimentCost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sindbad_experiment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; replace_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>uses the configuration read from the json files, and consolidates and sets info fields needed for model simulation</p>',2))]),s("details",E,[s("summary",null,[i[18]||(i[18]=s("a",{id:"SindbadExperiment.runExperimentForward-Tuple{String}",href:"#SindbadExperiment.runExperimentForward-Tuple{String}"},[s("span",{class:"jlbinding"},"SindbadExperiment.runExperimentForward")],-1)),i[19]||(i[19]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[20]||(i[20]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runExperimentForward</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sindbad_experiment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; replace_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>uses the configuration read from the json files, and consolidates and sets info fields needed for model simulation</p>',2))]),s("details",y,[s("summary",null,[i[21]||(i[21]=s("a",{id:"SindbadExperiment.runExperimentFullOutput-Tuple{String}",href:"#SindbadExperiment.runExperimentFullOutput-Tuple{String}"},[s("span",{class:"jlbinding"},"SindbadExperiment.runExperimentFullOutput")],-1)),i[22]||(i[22]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[23]||(i[23]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runExperimentFullOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sindbad_experiment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; replace_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>uses the configuration read from the json files, and consolidates and sets info fields needed for model simulation</p>',2))]),s("details",b,[s("summary",null,[i[24]||(i[24]=s("a",{id:"SindbadExperiment.runExperimentOpti-Tuple{String}",href:"#SindbadExperiment.runExperimentOpti-Tuple{String}"},[s("span",{class:"jlbinding"},"SindbadExperiment.runExperimentOpti")],-1)),i[25]||(i[25]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[26]||(i[26]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runExperimentOpti</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sindbad_experiment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; replace_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>uses the configuration read from the json files, and consolidates and sets info fields needed for model simulation</p>',2))]),s("details",f,[s("summary",null,[i[27]||(i[27]=s("a",{id:"SindbadExperiment.runExperimentSensitivity-Tuple{String}",href:"#SindbadExperiment.runExperimentSensitivity-Tuple{String}"},[s("span",{class:"jlbinding"},"SindbadExperiment.runExperimentSensitivity")],-1)),i[28]||(i[28]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[29]||(i[29]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runExperiment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, forcing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoRunOptimization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>uses the configuration read from the json files, and consolidates and sets info fields needed for model simulation</p><p><strong>Arguments:</strong></p><ul><li><p><code>info</code>: a SINDBAD NT that includes all information needed for setup and execution of an experiment</p></li><li><p><code>forcing</code>: a forcing NT that contains the forcing time series set for ALL locations</p></li><li><p><code>output</code>: an output NT including the data arrays, as well as information of variables and dimensions</p></li><li><p><code>::DoRunOptimization</code>: a type dispatch for running optimization</p></li></ul>',4))]),s("details",x,[s("summary",null,[i[30]||(i[30]=s("a",{id:"SindbadExperiment.saveOutCubes",href:"#SindbadExperiment.saveOutCubes"},[s("span",{class:"jlbinding"},"SindbadExperiment.saveOutCubes")],-1)),i[31]||(i[31]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[32]||(i[32]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">saveOutCubes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data_path_base, global_metadata, var_pairs, data, data_dims, out_format, t_step, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SindbadOutputStrategyType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">saveOutCubes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info, out_cubes, output_dims, output_vars)</span></span></code></pre></div><p>saves the output variables from the run as one file</p><p><strong>Arguments:</strong></p><ul><li><p><code>data_path_base</code>: base path of the output file including the directory and file prefix</p></li><li><p><code>global_metadata</code>: a collection of global metadata information to write to the output file</p></li><li><p><code>data</code>: data to be written to file</p></li><li><p><code>data_dims</code>: a vector of dimension of data for each variable to be written to a file</p></li><li><p><code>var_pairs</code>: a tuple of pairs of sindbad variables to write including the field and subfield of land as the first and last element</p></li><li><p><code>out_format</code>: format of the output file</p></li><li><p><code>t_step</code>: a string for time step of the model run to be used in the units attribute of variables</p></li><li><p><code>&lt;:SindbadOutputStrategyType</code>: Dispatch type indicating file output mode with the following options:</p><ul><li><p><code>::DoSaveSingleFile</code>: single file with all the variables</p></li><li><p><code>::DoNotSaveSingleFile</code>: single file per variable</p></li></ul></li></ul><p><strong>note: this function is overloaded to handle different dispatch types and the version with fewer arguments is used as a shorthand for the single file output mode</strong></p>`,5))]),i[47]||(i[47]=s("h2",{id:"internal",tabindex:"-1"},[e("Internal "),s("a",{class:"header-anchor",href:"#internal","aria-label":'Permalink to "Internal"'},"â€‹")],-1)),s("details",T,[s("summary",null,[i[33]||(i[33]=s("a",{id:"SindbadExperiment.getModelDataArray-Union{Tuple{AbstractArray{<:Any, N}}, Tuple{N}} where N",href:"#SindbadExperiment.getModelDataArray-Union{Tuple{AbstractArray{<:Any, N}}, Tuple{N}} where N"},[s("span",{class:"jlbinding"},"SindbadExperiment.getModelDataArray")],-1)),i[34]||(i[34]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[35]||(i[35]=s("p",null,"Converts an N-dimensional array of any size into a output-compatible data array without the unnecessary dimension.",-1)),i[36]||(i[36]=s("p",null,[s("strong",null,"Arguments")],-1)),i[37]||(i[37]=s("ul",null,[s("li",null,[s("code",null,"_dat::AbstractArray{<:Any,N}"),e(": Input N-dimensional array of arbitrary type")])],-1)),i[38]||(i[38]=s("p",null,[s("strong",null,"Returns")],-1)),i[39]||(i[39]=s("p",null,"Output-compatible data array",-1))]),s("details",C,[s("summary",null,[i[40]||(i[40]=s("a",{id:"SindbadExperiment.getYaxForVariable-NTuple{5, Any}",href:"#SindbadExperiment.getYaxForVariable-NTuple{5, Any}"},[s("span",{class:"jlbinding"},"SindbadExperiment.getYaxForVariable")],-1)),i[41]||(i[41]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[42]||(i[42]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getYaxForVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data_out, data_dim, variable_name, catalog_name, t_step)</span></span></code></pre></div><p>Processes YAXArray for a specific variable from simulation output.</p><p><strong>Arguments</strong></p><ul><li><p><code>data_out</code>: Output data from the simulation</p></li><li><p><code>data_dim</code>: Dimensions of the data output variable</p></li><li><p><code>variable_name</code>: Name of the variable to save as</p></li><li><p><code>catalog_name</code>: Name in the SINDBAD catalog of variables</p></li><li><p><code>t_step</code>: Time resolution for which to extract the data</p></li></ul><p><strong>Returns</strong></p><p>YAXArray specified variable at the given time resolution.</p>',6))]),s("details",S,[s("summary",null,[i[43]||(i[43]=s("a",{id:"SindbadExperiment.runExperimentForwardParams-Tuple{Vector, String}",href:"#SindbadExperiment.runExperimentForwardParams-Tuple{Vector, String}"},[s("span",{class:"jlbinding"},"SindbadExperiment.runExperimentForwardParams")],-1)),i[44]||(i[44]=e()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[45]||(i[45]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">runExperimentForwardParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params_vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sindbad_experiment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; replace_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>uses the configuration read from the json files, and consolidates and sets info fields needed for model simulation</p>',2))])])}const I=l(r,[["render",_]]);export{B as __pageData,I as default};
