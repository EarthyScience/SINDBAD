import{_ as i,c as s,o as l,aA as a}from"./chunks/framework.W9DcKwru.js";const h=JSON.parse('{"title":"Terrestrial Ecosystem Model (TEM)","description":"","frontmatter":{},"headers":[],"relativePath":"pages/concept/TEM.md","filePath":"pages/concept/TEM.md","lastUpdated":null}'),t={name:"pages/concept/TEM.md"};function o(n,e,p,r,c,d){return l(),s("div",null,e[0]||(e[0]=[a(`<h1 id="Terrestrial-Ecosystem-Model-TEM" tabindex="-1">Terrestrial Ecosystem Model (TEM) <a class="header-anchor" href="#Terrestrial-Ecosystem-Model-TEM" aria-label="Permalink to &quot;Terrestrial Ecosystem Model (TEM) {#Terrestrial-Ecosystem-Model-TEM}&quot;">​</a></h1><p>The Terrestrial Ecosystem Model (TEM) serves as the core component of SINDBAD&#39;s Model-Data Integration (MDI) framework. It provides a comprehensive system for:</p><ul><li><p>Representing ecosystem processes</p></li><li><p>Implementing process modeling approaches</p></li><li><p>Managing model execution (spinup, time loops, etc.)</p></li></ul><h2 id="Model-Components" tabindex="-1">Model Components <a class="header-anchor" href="#Model-Components" aria-label="Permalink to &quot;Model Components {#Model-Components}&quot;">​</a></h2><h3 id="Ecosystem-Processes" tabindex="-1">Ecosystem Processes <a class="header-anchor" href="#Ecosystem-Processes" aria-label="Permalink to &quot;Ecosystem Processes {#Ecosystem-Processes}&quot;">​</a></h3><p>A <strong>Model</strong> represents a fundamental ecosystem process that can be modeled using various methods. Each model focuses on a specific, indivisible process. For example, rather than modeling <code>photosynthesis</code> as a single process, it can be decomposed into components like:</p><ul><li><p><code>radiation use</code></p></li><li><p><code>transpiration</code></p></li><li><p>Other sub-processes</p></li></ul><h3 id="Modeling-Approaches" tabindex="-1">Modeling Approaches <a class="header-anchor" href="#Modeling-Approaches" aria-label="Permalink to &quot;Modeling Approaches {#Modeling-Approaches}&quot;">​</a></h3><p>An <strong>Approach</strong> defines the specific method used to calculate or emulate a process. For instance, <code>baseflow</code> generation might be modeled using:</p><ul><li><p>A <code>linear</code> approach (proportional to groundwater storage)</p></li><li><p>Alternative methods based on different assumptions</p></li></ul><h3 id="Core-Methods" tabindex="-1">Core Methods <a class="header-anchor" href="#Core-Methods" aria-label="Permalink to &quot;Core Methods {#Core-Methods}&quot;">​</a></h3><p>Every SINDBAD approach implements these fundamental methods:</p><ol><li><strong>define</strong></li></ol><ul><li><p>Initializes memory allocation</p></li><li><p>Sets up required variables and arrays</p></li></ul><ol start="2"><li><strong>precompute</strong></li></ol><ul><li><p>Updates variables based on parameters/forcing</p></li><li><p>Prepares for time-dependent calculations</p></li></ul><ol start="3"><li><strong>compute</strong></li></ol><ul><li><p>Advances model state in time</p></li><li><p>Applies dynamic updates using current data</p></li></ul><ol start="4"><li><strong>update</strong> (optional)</li></ol><ul><li><p>Modifies pools and variables</p></li><li><p>Handles within-time-step adjustments</p></li></ul><h2 id="Parameter-Estimation" tabindex="-1">Parameter Estimation <a class="header-anchor" href="#Parameter-Estimation" aria-label="Permalink to &quot;Parameter Estimation {#Parameter-Estimation}&quot;">​</a></h2><p>Model parameters control process responses and are often uncertain. SINDBAD supports various parameter estimation methods:</p><ol><li><strong>Parameter Calibration</strong></li></ol><ul><li><p>Based on modeling principles</p></li><li><p>Incorporates physical constraints</p></li></ul><ol start="2"><li><strong>Optimization</strong></li></ol><ul><li><p>Mathematical optimization techniques</p></li><li><p>Cost function minimization</p></li></ul><ol start="3"><li><strong>Machine Learning</strong></li></ol><ul><li><p>Parameter learning approaches</p></li><li><p>Data-driven estimation</p></li></ul><h2 id="Model-Structure" tabindex="-1">Model Structure <a class="header-anchor" href="#Model-Structure" aria-label="Permalink to &quot;Model Structure {#Model-Structure}&quot;">​</a></h2><h3 id="Ecosystem-Model" tabindex="-1">Ecosystem Model <a class="header-anchor" href="#Ecosystem-Model" aria-label="Permalink to &quot;Ecosystem Model {#Ecosystem-Model}&quot;">​</a></h3><p>The core of SINDBAD&#39;s framework combines:</p><ul><li><p>Ecosystem processes</p></li><li><p>Execution methods</p></li><li><p>Initialization procedures</p></li><li><p>Time-stepping algorithms</p></li></ul><h3 id="Model-Configuration" tabindex="-1">Model Configuration <a class="header-anchor" href="#Model-Configuration" aria-label="Permalink to &quot;Model Configuration {#Model-Configuration}&quot;">​</a></h3><p>A Model Structure represents a collection of ecosystem processes designed for specific scientific objectives. It includes:</p><ul><li><p>Selected SINDBAD models</p></li><li><p>Defined approaches</p></li><li><p>Process dependencies</p></li></ul><div class="warning custom-block"><p class="custom-block-title">Model Dependencies Models may have interdependencies. For example:</p><ul><li><p><code>fAPAR</code> depends on <code>LAI</code></p></li><li><p>Required models must be included in the structure</p></li></ul></div><h3 id="Model-Selection" tabindex="-1">Model Selection <a class="header-anchor" href="#Model-Selection" aria-label="Permalink to &quot;Model Selection {#Model-Selection}&quot;">​</a></h3><p>Experiments can select models from:</p><ul><li><p>Standard SINDBAD models</p></li><li><p>Custom model variants</p></li><li><p>Subsets of available models</p></li></ul><div class="tip custom-block"><p class="custom-block-title">Viewing Available Models</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Sindbad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">standard_sindbad_models</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">all_available_sindbad_models</span></span></code></pre></div></div><h2 id="Model-Implementation-Example" tabindex="-1">Model Implementation Example <a class="header-anchor" href="#Model-Implementation-Example" aria-label="Permalink to &quot;Model Implementation Example {#Model-Implementation-Example}&quot;">​</a></h2><p>Here&#39;s an example of implementing a custom model structure for vegetation growth with water limitations:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define custom model structure</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hypothetical_models </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :radiation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Handles radiation use</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :transpiration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Manages water use</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :soilwater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Controls soil moisture</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :allocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Distributes resources</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    :turnover</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # Handles biomass changes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Replace default models in experiment setup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hypothetical_replace_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;model_structure.sindbad_models&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hypothetical_models)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getExperimentInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(experiment_json; replace_info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hypothetical_replace_info)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Model Structure Configuration</p><ul><li><p>Models are selected through <a href="./../settings/model_structure.html">model structure settings</a></p></li><li><p>The <code>selected_models</code> field defines which models are active in an experiment</p></li><li><p>Custom model structures must maintain required dependencies</p></li></ul></div><h2 id="Model-Execution-Details" tabindex="-1">Model Execution Details <a class="header-anchor" href="#Model-Execution-Details" aria-label="Permalink to &quot;Model Execution Details {#Model-Execution-Details}&quot;">​</a></h2><p>The <code>runTEM</code> function manages the complete lifecycle of the TEM:</p><h3 id="Core-Functions" tabindex="-1">Core Functions <a class="header-anchor" href="#Core-Functions" aria-label="Permalink to &quot;Core Functions {#Core-Functions}&quot;">​</a></h3><ol><li><strong>Initialization</strong></li></ol><ul><li><p><code>defineTEM</code>: Initializes model variables and arrays</p></li><li><p><code>precomputeTEM</code>: Updates variables based on new realizations</p></li></ul><ol start="2"><li><strong>Time Stepping</strong></li></ol><ul><li><p><code>timeLoopTEM</code>: Manages the temporal evolution</p></li><li><p><code>computeTEM</code>: Updates land state for each time step</p></li></ul><ol start="3"><li><strong>State Management</strong></li></ol><ul><li><p><code>coreTEM</code>: Coordinates overall execution</p></li><li><p>Handles precomputation, spinup, and time-stepping</p></li></ul><h3 id="Execution-Flow" tabindex="-1">Execution Flow <a class="header-anchor" href="#Execution-Flow" aria-label="Permalink to &quot;Execution Flow {#Execution-Flow}&quot;">​</a></h3><ol><li><strong>Setup Phase</strong></li></ol><ul><li><p>Initialize model components</p></li><li><p>Configure parameters</p></li><li><p>Set up data structures</p></li></ul><ol start="2"><li><strong>Spinup Phase</strong></li></ol><ul><li><p>Run equilibrium iterations</p></li><li><p>Stabilize ecosystem states</p></li><li><p>Verify convergence</p></li></ul><ol start="3"><li><strong>Main Simulation</strong></li></ol><ul><li><p>Execute time steps</p></li><li><p>Update model states</p></li><li><p>Process outputs</p></li></ul><h2 id="Spinup-Configuration" tabindex="-1">Spinup Configuration <a class="header-anchor" href="#Spinup-Configuration" aria-label="Permalink to &quot;Spinup Configuration {#Spinup-Configuration}&quot;">​</a></h2><p>The spinup process ensures model stability by:</p><ol><li><strong>Initialization</strong></li></ol><ul><li><p>Set initial conditions</p></li><li><p>Configure climate forcing</p></li><li><p>Define convergence criteria</p></li></ul><ol start="2"><li><strong>Equilibrium Search</strong></li></ol><ul><li><p>Iterate model states</p></li><li><p>Monitor pool changes</p></li><li><p>Check convergence</p></li></ul><ol start="3"><li><strong>Validation</strong></li></ol><ul><li><p>Verify state stability</p></li><li><p>Check mass balance</p></li><li><p>Document final states</p></li></ul><div class="warning custom-block"><p class="custom-block-title">Spinup Considerations</p><ul><li><p>Ensure sufficient spinup duration</p></li><li><p>Monitor convergence carefully</p></li><li><p>Validate equilibrium conditions</p></li><li><p>Document spinup configuration</p></li></ul></div><h2 id="Best-Practices" tabindex="-1">Best Practices <a class="header-anchor" href="#Best-Practices" aria-label="Permalink to &quot;Best Practices {#Best-Practices}&quot;">​</a></h2><ol><li><strong>Model Selection</strong></li></ol><ul><li><p>Choose appropriate process representations</p></li><li><p>Consider computational requirements</p></li><li><p>Verify model dependencies</p></li><li><p>Test model combinations</p></li></ul><ol start="2"><li><strong>Parameter Management</strong></li></ol><ul><li><p>Document parameter sources</p></li><li><p>Validate parameter ranges</p></li><li><p>Consider uncertainty</p></li><li><p>Test sensitivity</p></li></ul><ol start="3"><li><strong>Execution</strong></li></ol><ul><li><p>Monitor convergence</p></li><li><p>Check mass balance</p></li><li><p>Validate results</p></li><li><p>Document configurations</p></li></ul><ol start="4"><li><strong>Spinup</strong></li></ol><ul><li><p>Verify equilibrium conditions</p></li><li><p>Check convergence criteria</p></li><li><p>Monitor state variables</p></li><li><p>Document spinup duration</p></li></ul>`,78)]))}const m=i(t,[["render",o]]);export{h as __pageData,m as default};
