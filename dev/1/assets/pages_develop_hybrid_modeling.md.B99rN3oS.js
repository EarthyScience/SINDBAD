import{_ as s,c as e,o as t,aA as a}from"./chunks/framework.IgPV_Q4b.js";const c=JSON.parse('{"title":"Machine Learning Methods in SindbadML","description":"","frontmatter":{},"headers":[],"relativePath":"pages/develop/hybrid_modeling.md","filePath":"pages/develop/hybrid_modeling.md","lastUpdated":null}'),n={name:"pages/develop/hybrid_modeling.md"};function h(l,i,p,d,r,o){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="Machine-Learning-Methods-in-SindbadML" tabindex="-1">Machine Learning Methods in SindbadML <a class="header-anchor" href="#Machine-Learning-Methods-in-SindbadML" aria-label="Permalink to &quot;Machine Learning Methods in SindbadML {#Machine-Learning-Methods-in-SindbadML}&quot;">​</a></h1><p>This page provides an overview of machine learning methods available within SindbadML. It includes details on various components such as activation functions, gradient methods, ML models, optimizers, and training methods, and how to extend them for experiment related to hybrid ML-physical modeling.</p><h1 id="Extending-SindbadML:-How-to-Add-New-Components" tabindex="-1">Extending SindbadML: How to Add New Components <a class="header-anchor" href="#Extending-SindbadML:-How-to-Add-New-Components" aria-label="Permalink to &quot;Extending SindbadML: How to Add New Components {#Extending-SindbadML:-How-to-Add-New-Components}&quot;">​</a></h1><p>This guide shows how to add new <strong>activation functions</strong>, <strong>gradient methods</strong>, <strong>ML models</strong>, <strong>optimizers</strong>, and <strong>training methods</strong> by following the conventions in the <code>src/Types/MLTypes.jl</code> and related files.</p><hr><h2 id="1.-Adding-a-New-Activation-Function" tabindex="-1">1. Adding a New Activation Function <a class="header-anchor" href="#1.-Adding-a-New-Activation-Function" aria-label="Permalink to &quot;1. Adding a New Activation Function {#1.-Adding-a-New-Activation-Function}&quot;">​</a></h2><h3 id="Step-1:-Define-the-Activation-Type" tabindex="-1">Step 1: Define the Activation Type <a class="header-anchor" href="#Step-1:-Define-the-Activation-Type" aria-label="Permalink to &quot;Step 1: Define the Activation Type {#Step-1:-Define-the-Activation-Type}&quot;">​</a></h3><p>In <code>src/Types/MLTypes.jl</code>, add a new struct subtype of <code>ActivationType</code> and export it:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyActivation</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyActivation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ActivationType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{MyActivation}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Describe your activation function here&quot;</span></span></code></pre></div><h3 id="Step-2:-Implement-the-Activation-Function" tabindex="-1">Step 2: Implement the Activation Function <a class="header-anchor" href="#Step-2:-Implement-the-Activation-Function" aria-label="Permalink to &quot;Step 2: Implement the Activation Function {#Step-2:-Implement-the-Activation-Function}&quot;">​</a></h3><p>In <code>lib/SindbadML/src/activationFunctions.jl</code>, extend <code>activationFunction</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> activationFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_options, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyActivation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Example: Swish activation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    swish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sigmoid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> swish</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><hr><h2 id="2.-Adding-a-New-Gradient-Method" tabindex="-1">2. Adding a New Gradient Method <a class="header-anchor" href="#2.-Adding-a-New-Gradient-Method" aria-label="Permalink to &quot;2. Adding a New Gradient Method {#2.-Adding-a-New-Gradient-Method}&quot;">​</a></h2><h3 id="Step-1:-Define-the-Gradient-Type" tabindex="-1">Step 1: Define the Gradient Type <a class="header-anchor" href="#Step-1:-Define-the-Gradient-Type" aria-label="Permalink to &quot;Step 1: Define the Gradient Type {#Step-1:-Define-the-Gradient-Type}&quot;">​</a></h3><p>In <code>src/Types/MLTypes.jl</code>, add and export your new gradient type:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyGradMethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyGradMethod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MLGradType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{MyGradMethod}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Describe your gradient method&quot;</span></span></code></pre></div><h3 id="Step-2:-Implement-the-Gradient-Logic" tabindex="-1">Step 2: Implement the Gradient Logic <a class="header-anchor" href="#Step-2:-Implement-the-Gradient-Logic" aria-label="Permalink to &quot;Step 2: Implement the Gradient Logic {#Step-2:-Implement-the-Gradient-Logic}&quot;">​</a></h3><p>In <code>lib/SindbadML/src/mlGradient.jl</code>, extend <code>gradientSite</code> and/or <code>gradientBatch!</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gradientSite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyGradMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x_vals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, gradient_options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, loss_f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {F}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Implement your gradient calculation here</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> my_gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_vals, loss_f)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><hr><h2 id="3.-Adding-a-New-ML-Model" tabindex="-1">3. Adding a New ML Model <a class="header-anchor" href="#3.-Adding-a-New-ML-Model" aria-label="Permalink to &quot;3. Adding a New ML Model {#3.-Adding-a-New-ML-Model}&quot;">​</a></h2><h3 id="Step-1:-Define-the-Model-Type" tabindex="-1">Step 1: Define the Model Type <a class="header-anchor" href="#Step-1:-Define-the-Model-Type" aria-label="Permalink to &quot;Step 1: Define the Model Type {#Step-1:-Define-the-Model-Type}&quot;">​</a></h3><p>In <code>src/Types/MLTypes.jl</code>, add and export your new model type:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyMLModel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyMLModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MLModelType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{MyMLModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Describe your ML model&quot;</span></span></code></pre></div><h3 id="Step-2:-Implement-the-Model-Constructor" tabindex="-1">Step 2: Implement the Model Constructor <a class="header-anchor" href="#Step-2:-Implement-the-Model-Constructor" aria-label="Permalink to &quot;Step 2: Implement the Model Constructor {#Step-2:-Implement-the-Model-Constructor}&quot;">​</a></h3><p>In <code>lib/SindbadML/src/mlModels.jl</code>, extend <code>mlModel</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mlModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info, n_features, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyMLModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Build and return your model</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MyModelConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n_features, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><hr><h2 id="4.-Adding-a-New-Optimizer" tabindex="-1">4. Adding a New Optimizer <a class="header-anchor" href="#4.-Adding-a-New-Optimizer" aria-label="Permalink to &quot;4. Adding a New Optimizer {#4.-Adding-a-New-Optimizer}&quot;">​</a></h2><h3 id="Step-1:-Define-the-Optimizer-Type" tabindex="-1">Step 1: Define the Optimizer Type <a class="header-anchor" href="#Step-1:-Define-the-Optimizer-Type" aria-label="Permalink to &quot;Step 1: Define the Optimizer Type {#Step-1:-Define-the-Optimizer-Type}&quot;">​</a></h3><p>In <code>src/Types/MLTypes.jl</code>, add and export your optimizer type:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyOptimizer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyOptimizer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MLOptimizerType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{MyOptimizer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Describe your optimizer&quot;</span></span></code></pre></div><h3 id="Step-2:-Implement-the-Optimizer-Constructor" tabindex="-1">Step 2: Implement the Optimizer Constructor <a class="header-anchor" href="#Step-2:-Implement-the-Optimizer-Constructor" aria-label="Permalink to &quot;Step 2: Implement the Optimizer Constructor {#Step-2:-Implement-the-Optimizer-Constructor}&quot;">​</a></h3><p>In <code>lib/SindbadML/src/mlOptimizers.jl</code>, extend <code>mlOptimizer</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mlOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optimizer_options, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyOptimizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Return an optimizer object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MyOptimizerConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(optimizer_options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><hr><h2 id="5.-Adding-a-New-Training-Method" tabindex="-1">5. Adding a New Training Method <a class="header-anchor" href="#5.-Adding-a-New-Training-Method" aria-label="Permalink to &quot;5. Adding a New Training Method {#5.-Adding-a-New-Training-Method}&quot;">​</a></h2><h3 id="Step-1:-Define-the-Training-Type" tabindex="-1">Step 1: Define the Training Type <a class="header-anchor" href="#Step-1:-Define-the-Training-Type" aria-label="Permalink to &quot;Step 1: Define the Training Type {#Step-1:-Define-the-Training-Type}&quot;">​</a></h3><p>In <code>src/Types/MLTypes.jl</code>, add and export your training type:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyTrainingMethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyTrainingMethod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MLTrainingType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{MyTrainingMethod}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Describe your training method&quot;</span></span></code></pre></div><h3 id="Step-2:-Implement-the-Training-Function" tabindex="-1">Step 2: Implement the Training Function <a class="header-anchor" href="#Step-2:-Implement-the-Training-Function" aria-label="Permalink to &quot;Step 2: Implement the Training Function {#Step-2:-Implement-the-Training-Function}&quot;">​</a></h3><p>In <code>lib/SindbadML/src/mlTrain.jl</code>, extend <code>trainML</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> trainML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hybrid_helpers, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MyTrainingMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Implement your training loop here</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><hr><h2 id="6.-Register-and-Use-Your-New-Types" tabindex="-1">6. Register and Use Your New Types <a class="header-anchor" href="#6.-Register-and-Use-Your-New-Types" aria-label="Permalink to &quot;6. Register and Use Your New Types {#6.-Register-and-Use-Your-New-Types}&quot;">​</a></h2><ul><li><p><strong>Export</strong> your new types in <code>MLTypes.jl</code>.</p></li><li><p>Reference your new types in experiment or parameter JSON files (e.g., <code>&quot;activation_out&quot;: &quot;my_activation&quot;</code>).</p></li><li><p>Make sure your new types are imported where needed.</p></li></ul><hr><h2 id="Summary-Table" tabindex="-1">Summary Table <a class="header-anchor" href="#Summary-Table" aria-label="Permalink to &quot;Summary Table {#Summary-Table}&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:right;">Component</th><th style="text-align:right;">Abstract Type</th><th style="text-align:right;">File(s) to Edit</th><th style="text-align:right;">Function to Extend</th></tr></thead><tbody><tr><td style="text-align:right;">Activation</td><td style="text-align:right;"><code>ActivationType</code></td><td style="text-align:right;"><code>MLTypes.jl</code>, <code>activationFunctions.jl</code></td><td style="text-align:right;"><code>activationFunction</code></td></tr><tr><td style="text-align:right;">Gradient Method</td><td style="text-align:right;"><code>MLGradType</code></td><td style="text-align:right;"><code>MLTypes.jl</code>, <code>mlGradient.jl</code></td><td style="text-align:right;"><code>gradientSite</code>, <code>gradientBatch!</code></td></tr><tr><td style="text-align:right;">ML Model</td><td style="text-align:right;"><code>MLModelType</code></td><td style="text-align:right;"><code>MLTypes.jl</code>, <code>mlModels.jl</code></td><td style="text-align:right;"><code>mlModel</code></td></tr><tr><td style="text-align:right;">Optimizer</td><td style="text-align:right;"><code>MLOptimizerType</code></td><td style="text-align:right;"><code>MLTypes.jl</code>, <code>mlOptimizers.jl</code></td><td style="text-align:right;"><code>mlOptimizer</code></td></tr><tr><td style="text-align:right;">Training Method</td><td style="text-align:right;"><code>MLTrainingType</code></td><td style="text-align:right;"><code>MLTypes.jl</code>, <code>mlTrain.jl</code></td><td style="text-align:right;"><code>trainML</code></td></tr></tbody></table><hr><p><strong>Tip:</strong> Always add a <code>purpose(::Type{YourType})</code> method for documentation and introspection. <strong>Tip:</strong> Export your new types for use in other modules.</p><p>For more examples, see the existing code in the referenced files.</p>`,53)]))}const g=s(n,[["render",h]]);export{c as __pageData,g as default};
