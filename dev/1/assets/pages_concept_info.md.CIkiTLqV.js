import{_ as i,c as o,o as t,aA as n}from"./chunks/framework.CB6YZlnI.js";const a="/assets/sindbad_info.CIgeVVFf.png",h=JSON.parse('{"title":"SINDBAD info Structure","description":"","frontmatter":{},"headers":[],"relativePath":"pages/concept/info.md","filePath":"pages/concept/info.md","lastUpdated":null}'),r={name:"pages/concept/info.md"};function l(s,e,d,p,c,u){return t(),o("div",null,e[0]||(e[0]=[n('<h1 id="SINDBAD-info-Structure" tabindex="-1">SINDBAD <code>info</code> Structure <a class="header-anchor" href="#SINDBAD-info-Structure" aria-label="Permalink to &quot;SINDBAD `info` Structure {#SINDBAD-info-Structure}&quot;">​</a></h1><p>The <code>info</code> structure serves as the central information hub for SINDBAD experiments. During experiment initialization, the SINDBAD preprocessor parses configuration settings and consolidates them into a comprehensive <code>NamedTuple</code> named <code>info</code> that ensures consistency and type stability from input through model simulation to output.</p><div class="danger custom-block"><p class="custom-block-title">Reserved Variable</p><p>The <code>info</code> variable name is strictly reserved within SINDBAD and plays a critical role in the model execution and stability. Users <strong>must not</strong> overwrite or modify this variable.</p></div><h2 id="Purpose-and-Functionality" tabindex="-1">Purpose and Functionality <a class="header-anchor" href="#Purpose-and-Functionality" aria-label="Permalink to &quot;Purpose and Functionality {#Purpose-and-Functionality}&quot;">​</a></h2><p>The <code>info</code> structure acts as the central nervous system of a SINDBAD experiment, containing all necessary information for:</p><ul><li><p>Data ingestion and processing</p></li><li><p>Model initialization and execution</p></li><li><p>Optimization configuration</p></li><li><p>Output generation and analysis</p></li></ul><h2 id="Structure-Overview" tabindex="-1">Structure Overview <a class="header-anchor" href="#Structure-Overview" aria-label="Permalink to &quot;Structure Overview {#Structure-Overview}&quot;">​</a></h2><p>The <code>info</code> structure is organized into six main branches:</p><h3 id="1.-Experiment-Configuration-experiment" tabindex="-1">1. Experiment Configuration (<code>experiment</code>) <a class="header-anchor" href="#1.-Experiment-Configuration-experiment" aria-label="Permalink to &quot;1. Experiment Configuration (`experiment`) {#1.-Experiment-Configuration-experiment}&quot;">​</a></h3><p>Contains experiment metadata and file paths:</p><ul><li><p>Basic information: name, domain, version, user, execution date</p></li><li><p>Configuration file paths</p></li><li><p>settings for input data</p></li></ul><h3 id="2.-Terrestrial-Ecosystem-Model-models" tabindex="-1">2. Terrestrial Ecosystem Model (<code>models</code>) <a class="header-anchor" href="#2.-Terrestrial-Ecosystem-Model-models" aria-label="Permalink to &quot;2. Terrestrial Ecosystem Model (`models`) {#2.-Terrestrial-Ecosystem-Model-models}&quot;">​</a></h3><p>Stores model-specific information:</p><ul><li><p>Model processes</p></li><li><p>Spinup model selection</p></li><li><p>parameters of the model structure</p></li></ul><h3 id="3.-Simulation-Output-output" tabindex="-1">3. Simulation Output (<code>output</code>) <a class="header-anchor" href="#3.-Simulation-Output-output" aria-label="Permalink to &quot;3. Simulation Output (`output`) {#3.-Simulation-Output-output}&quot;">​</a></h3><p>Stores information related to output</p><ul><li><p>output format and directories</p></li><li><p>output variables</p></li></ul><h3 id="4.-Model-Spinup-spinup" tabindex="-1">4. Model Spinup (<code>spinup</code>) <a class="header-anchor" href="#4.-Model-Spinup-spinup" aria-label="Permalink to &quot;4. Model Spinup (`spinup`) {#4.-Model-Spinup-spinup}&quot;">​</a></h3><p>Information on how to do model spinup</p><ul><li><p>a path to restart file, if given</p></li><li><p>sequence of spinup steps</p></li></ul><h3 id="5.-Model-helpers-helpers" tabindex="-1">5. Model helpers (<code>helpers</code>) <a class="header-anchor" href="#5.-Model-helpers-helpers" aria-label="Permalink to &quot;5. Model helpers (`helpers`) {#5.-Model-helpers-helpers}&quot;">​</a></h3><p>Intermediary helper objects necessary for model run and type stability</p><ul><li><p>dates and time steps needed for temporal aggregation</p></li><li><p>initial instantiation of SINDBAD <code>land</code></p></li><li><p>numbers for selected <code>type</code> and numerical or mass-balance tolerance</p></li><li><p>runtime options and information of experiment</p></li></ul><h3 id="6.-Optimization-Settings-optimization" tabindex="-1">6. Optimization Settings (<code>optimization</code>) <a class="header-anchor" href="#6.-Optimization-Settings-optimization" aria-label="Permalink to &quot;6. Optimization Settings (`optimization`) {#6.-Optimization-Settings-optimization}&quot;">​</a></h3><p>Available when parameter estimation or model cost calculation is enabled:</p><ul><li><p>Optimization algorithm settings (<code>optimizer</code>)</p></li><li><p>Sensitivity analysis settings, when needed/set in <code>optimization.json</code> (<code>sensitivity_analysis</code>)</p></li><li><p>Cost function configuration (<code>cost_options</code>)</p></li><li><p>Parameter table with optimization parameters and their information</p></li><li><p>Options for running optimization (<code>run_options</code>)</p></li></ul><h3 id="7.-Hybrid-Modeling-hybrid" tabindex="-1">7. Hybrid Modeling (<code>hybrid</code>) <a class="header-anchor" href="#7.-Hybrid-Modeling-hybrid" aria-label="Permalink to &quot;7. Hybrid Modeling (`hybrid`) {#7.-Hybrid-Modeling-hybrid}&quot;">​</a></h3><p>The <code>hybrid</code> field in the <code>info</code> structure contains all configuration and runtime information related to hybrid (process-based + machine learning) modeling in SINDBAD. This field is present when hybrid or machine learning components are enabled in the experiment configuration through the passing of <code>hybrid</code> configuration file in <code>experiment.basics.config_files</code>.</p><p><code>info.hybrid</code> is a NamedTuple that holds various subfields, each representing different aspects of the hybrid modeling setup. It includes:</p><ul><li><p><code>ml_model</code>: Settings for the machine learning model (e.g., architecture, activation functions, number of layers/neurons, random seed).</p></li><li><p><code>ml_training</code>: Training configuration, such as method, batch size, number of epochs, loss function, data split ratios, and fold information for cross-validation.</p></li><li><p><code>ml_gradient</code>: Gradient computation method and options (e.g., which AD or finite difference library to use, chunk size).</p></li><li><p><code>ml_optimizer</code>: Optimizer settings for training the ML model (e.g., optimizer type, learning rate, momentum parameters).</p></li><li><p><code>covariates</code>: Information about covariate data used as ML features (e.g., file path, variables to use).</p></li><li><p><code>replace_value_for_gradient</code>: Value to use for missing or masked data during gradient computation.</p></li><li><p><code>save_checkpoint</code>: Boolean flag indicating whether to save model checkpoints during training.</p></li><li><p><code>random_seed</code>: Seed for reproducibility of ML training and data splits.</p></li></ul><p>This field is automatically populated by the SINDBAD preprocessor based on the relevant sections of your experiment&#39;s JSON configuration files (such as <code>parameter_learning.json</code> in example for hybrid modeling).</p><p>Example usage:</p><ul><li><p>Access ML model settings: <code>info.hybrid.ml_model</code></p></li><li><p>Get training options: <code>info.hybrid.ml_training.options</code></p></li><li><p>Retrieve optimizer configuration: <code>info.hybrid.ml_optimizer.options</code></p></li><li><p>Access covariate file path: <code>info.hybrid.covariates.path</code></p></li></ul><h2 id="Interactive-Exploration-of-SINDBAD-info" tabindex="-1">Interactive Exploration of <code>SINDBAD info</code> <a class="header-anchor" href="#Interactive-Exploration-of-SINDBAD-info" aria-label="Permalink to &quot;Interactive Exploration of `SINDBAD info` {#Interactive-Exploration-of-SINDBAD-info}&quot;">​</a></h2><p>Interactively <a href="http://sindbad-mdi.org/pages/concept/sindbad_info/sindbad_info.html" target="_blank" rel="noreferrer">view an example info from a SINDBAD experiment</a><img src="'+a+'" alt=""></p><h2 id="Usage-Guidelines" tabindex="-1">Usage Guidelines <a class="header-anchor" href="#Usage-Guidelines" aria-label="Permalink to &quot;Usage Guidelines {#Usage-Guidelines}&quot;">​</a></h2><ul><li><p>Access information using dot notation (e.g., <code>info.experiment.name</code>)</p></li><li><p>Refer to specific fields when configuring model components</p></li><li><p>Use the structure to track experiment settings and state and cross check if the json settings are correctly parsed and consolidated</p></li><li><p>Maintain consistency with configuration files</p></li></ul>',37)]))}const f=i(r,[["render",l]]);export{h as __pageData,f as default};
