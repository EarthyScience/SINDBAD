import{_ as n,C as p,c as d,o,j as i,aA as t,a,G as l}from"./chunks/framework.CCZvcHlP.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/code/ml.md","filePath":"pages/code/ml.md","lastUpdated":null}'),h={name:"pages/code/ml.md"},r={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""};function R(G,s,H,z,K,J){const e=p("Badge");return o(),d("div",null,[i("details",r,[i("summary",null,[s[0]||(s[0]=i("a",{id:"SindbadML",href:"#SindbadML"},[i("span",{class:"jlbinding"},"SindbadML")],-1)),s[1]||(s[1]=a()),l(e,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),s[2]||(s[2]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SindbadML</span></span></code></pre></div><p>This package provides the tools to train neural networks to predict model parameters from <code>process-based models (PBMs)</code> using automatic differentiation and finite differences. It also includes functions to train PBMs using a mixed gradient approach to optimize the neural network weights and the PBM parameters simultaneously.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>This package is still under development and is not yet ready for production use.</p></div>',3))]),s[87]||(s[87]=i("h2",{id:"Exported",tabindex:"-1"},[a("Exported "),i("a",{class:"header-anchor",href:"#Exported","aria-label":'Permalink to "Exported {#Exported}"'},"â€‹")],-1)),i("details",k,[i("summary",null,[s[3]||(s[3]=i("a",{id:"SindbadML.JoinDenseNN-Tuple{Tuple}",href:"#SindbadML.JoinDenseNN-Tuple{Tuple}"},[i("span",{class:"jlbinding"},"SindbadML.JoinDenseNN")],-1)),s[4]||(s[4]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[5]||(s[5]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JoinDenseNN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li>models :: a tuple of models, i.e. (m1, m2)</li></ul><p><strong>Returns:</strong></p><ul><li>all parameters as a vector or matrix (multiple samples)</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadML</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flux</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Random</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Random</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">seed!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m_big </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, relu), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Flux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sigmoid)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m_eta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Flux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sigmoid)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_big_a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_small_a1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_small_a2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JoinDenseNN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((m_big, m_eta))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((x_big_a, x_small_a2))</span></span></code></pre></div>`,7))]),i("details",c,[i("summary",null,[s[6]||(s[6]=i("a",{id:"SindbadML.denseNN-Tuple{Int64, Int64, Int64}",href:"#SindbadML.denseNN-Tuple{Int64, Int64, Int64}"},[i("span",{class:"jlbinding"},"SindbadML.denseNN")],-1)),s[7]||(s[7]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[8]||(s[8]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">denseNN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(in_dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_neurons</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, out_dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; extra_hlayers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, activation_hidden</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Flux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">relu, activation_out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sigmoid, seed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1618</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>in_dim</code>: input dimension</p></li><li><p><code>n_neurons</code>: number of neurons in each hidden layer</p></li><li><p><code>out_dim</code>: output dimension</p></li><li><p><code>extra_hlayers</code>=0: controls the number of extra hidden layers, default is <code>zero</code></p></li><li><p><code>activation_hidden</code>=Flux.relu: activation function within hidden layers, default is Relu</p></li><li><p><code>activation_out</code>= Flux.sigmoid: activation of output layer, default is sigmoid</p></li><li><p><code>seed=1618</code>: Random seed, default is ~ (1+âˆš5)/2</p></li></ul><p>Returns a <code>Flux.Chain</code> neural network.</p>',4))]),i("details",g,[i("summary",null,[s[9]||(s[9]=i("a",{id:"SindbadML.destructureNN-Tuple{Any}",href:"#SindbadML.destructureNN-Tuple{Any}"},[i("span",{class:"jlbinding"},"SindbadML.destructureNN")],-1)),s[10]||(s[10]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">destructureNN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model; nn_opt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Optimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Adam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Given a <code>model</code> returns a <code>flat</code> vector with all weights, a <code>re</code> structure of the neural network and the current <code>state</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>model</code>: a Flux.Chain neural network.</p></li><li><p><code>nn_opt</code>: Optimiser, the default is <code>Optimisers.Adam()</code>.</p></li></ul><p>Returns:</p><ul><li><p>flat :: a flat vector with all network weights</p></li><li><p>re :: an object containing the model structure, used later to <code>re</code>construct the neural network</p></li><li><p>opt_state :: the state of the optimiser</p></li></ul>',6))]),i("details",u,[i("summary",null,[s[12]||(s[12]=i("a",{id:"SindbadML.getCacheFromOutput",href:"#SindbadML.getCacheFromOutput"},[i("span",{class:"jlbinding"},"SindbadML.getCacheFromOutput")],-1)),s[13]||(s[13]=a()),l(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[14]||(s[14]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getCacheFromOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc_output, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GradType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getCacheFromOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc_output, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ForwardDiffGrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getCacheFromOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc_output, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PolyesterForwardDiffGrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the appropriate Cache type based on the automatic differentiation or finite differences package being used.</p><p><strong>Arguments</strong></p><ul><li><p><code>loc_output</code>: The local output</p></li><li><p>Second argument specifies the differentiation method:</p><ul><li><p><code>ForwardDiffGrad</code>: Uses ForwardDiff.jl for automatic differentiation</p></li><li><p><code>GradType</code>: All other libraries, e.g., FiniteDiff.jl,FiniteDifferences.jl, etc. for gradient calculations</p></li><li><p><code>PolyesterForwardDiffGrad</code>: Uses PolyesterForwardDiff.jl for automatic differentiation</p></li></ul></li></ul>`,4))]),i("details",E,[i("summary",null,[s[15]||(s[15]=i("a",{id:"SindbadML.getInnerArgs-NTuple{17, Any}",href:"#SindbadML.getInnerArgs-NTuple{17, Any}"},[i("span",{class:"jlbinding"},"SindbadML.getInnerArgs")],-1)),s[16]||(s[16]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[17]||(s[17]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getInnerArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(idx, grads_lib, scaled_params_batch, parameter_scaling_type, selected_models, space_forcing, space_spinup_forcing, loc_forcing_t, space_output, loc_land, tem_info, parameter_to_index, parameter_scaling_type, space_observations, cost_options, constraint_method, indices_batch, sites_batch)</span></span></code></pre></div><p>Function to get inner arguments for the loss function.</p><p><strong>Arguments</strong></p><ul><li><p><code>idx</code>: index batch value</p></li><li><p><code>grads_lib</code>: gradient library</p></li><li><p><code>scaled_params_batch</code>: scaled parameters batch</p></li><li><p><code>selected_models</code>: selected models</p></li><li><p><code>space_forcing</code>: forcing data location</p></li><li><p><code>space_spinup_forcing</code>: spinup forcing data location</p></li><li><p><code>loc_forcing_t</code>: forcing data time for one time step.</p></li><li><p><code>space_output</code>: output data location</p></li><li><p><code>loc_land</code>: initial land state</p></li><li><p><code>tem_info</code>: model information</p></li><li><p><code>parameter_to_index</code>: parameter to index</p></li><li><p><code>parameter_scaling_type</code>: type determining parameter scaling</p></li><li><p><code>loc_observations</code>: observation data location</p></li><li><p><code>cost_options</code>: cost options</p></li><li><p><code>constraint_method</code>: constraint method</p></li><li><p><code>indices_batch</code>: indices batch</p></li><li><p><code>sites_batch</code>: sites batch</p></li></ul>',4))]),i("details",y,[i("summary",null,[s[18]||(s[18]=i("a",{id:"SindbadML.getLossForSites-Union{Tuple{F}, Tuple{Any, F, Vararg{Any, 18}}} where F",href:"#SindbadML.getLossForSites-Union{Tuple{F}, Tuple{Any, F, Vararg{Any, 18}}} where F"},[i("span",{class:"jlbinding"},"SindbadML.getLossForSites")],-1)),s[19]||(s[19]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[20]||(s[20]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getLossForSites</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gradient_lib, loss_function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, loss_array_sites, loss_array_split, epoch_number, scaled_params, sites_list, indices_sites, models, space_forcing, space_spinup_forcing, loc_forcing_t, space_output, loc_land, tem_info, parameter_to_index, parameter_scaling_type, space_observations, cost_options, constraint_method) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {F}</span></span></code></pre></div><p>Calculates the loss for all sites. The loss is calculated using the <code>loss_function</code> function. The <code>loss_array_sites</code> and <code>loss_array_split</code> arrays are updated with the loss values. The <code>loss_array_sites</code> array stores the loss values for each site and epoch, while the <code>loss_array_split</code> array stores the loss values for each model output and epoch.</p><p><strong>Arguments</strong></p><ul><li><p><code>gradient_lib</code>: gradient library</p></li><li><p><code>loss_function</code>: loss function</p></li><li><p><code>loss_array_sites</code>: array to store the loss values for each site and epoch</p></li><li><p><code>loss_array_split</code>: array to store the loss values for each model output and epoch</p></li><li><p><code>epoch_number</code>: epoch number</p></li><li><p><code>scaled_params</code>: scaled parameters</p></li><li><p><code>sites_list</code>: list of sites</p></li><li><p><code>indices_sites</code>: indices of sites</p></li><li><p><code>models</code>: list of models</p></li><li><p><code>space_forcing</code>: forcing data location</p></li><li><p><code>space_spinup_forcing</code>: spinup forcing data location</p></li><li><p><code>loc_forcing_t</code>: forcing data time for one time step.</p></li><li><p><code>space_output</code>: output data location</p></li><li><p><code>loc_land</code>: initial land state</p></li><li><p><code>tem_info</code>: model information</p></li><li><p><code>parameter_to_index</code>: parameter to index</p></li><li><p><code>space_observations</code>: observation data location</p></li><li><p><code>cost_options</code>: cost options</p></li><li><p><code>constraint_method</code>: constraint method</p></li></ul>',4))]),i("details",_,[i("summary",null,[s[21]||(s[21]=i("a",{id:"SindbadML.getOutputFromCache",href:"#SindbadML.getOutputFromCache"},[i("span",{class:"jlbinding"},"SindbadML.getOutputFromCache")],-1)),s[22]||(s[22]=a()),l(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[23]||(s[23]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getOutputFromCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc_output, _, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GradType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getOutputFromCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc_output, new_params, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ForwardDiffGrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getOutputFromCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loc_output, new_params, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PolyesterForwardDiffGrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Retrieves output values from <code>Cache</code> based on the differentiation method being used.</p><p><strong>Arguments</strong></p><ul><li><p><code>loc_output</code>: The cached output values</p></li><li><p><code>_</code> or <code>new_params</code>: Additional parameters (only used with ForwardDiff)</p></li><li><p>Third argument specifies the differentiation method:</p><ul><li><p><code>GradType</code>: Returns cached output directly when using other libraries, e.g., FiniteDiff.jl, FiniteDifferences.jl, etc.</p></li><li><p><code>ForwardDiffGrad</code>: Processes cached output with new parameters when using ForwardDiff.jl, returns <code>get_tmp.(loc_output, (new_params,))</code></p></li><li><p><code>PolyesterForwardDiffGrad</code>: Calls cached output with new parameters using ForwardDiff.jl</p></li></ul></li></ul>`,4))]),i("details",b,[i("summary",null,[s[24]||(s[24]=i("a",{id:"SindbadML.getParamsAct-Tuple{Any, Any}",href:"#SindbadML.getParamsAct-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"SindbadML.getParamsAct")],-1)),s[25]||(s[25]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[26]||(s[26]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getParamsAct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, parameter_table)</span></span></code></pre></div><p>Scales <code>x</code> values in the [0,1] interval to some given lower <code>lo_b</code> and upper <code>up_b</code> bounds.</p><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: vector array</p></li><li><p><code>parameter_table</code>: a Table with input fields <code>default</code>, <code>lower</code> and <code>upper</code> that match the <code>x</code> vector.</p></li></ul><p>Returns a vector array with new values scaled into the new interval <code>[lower, upper]</code>.</p>',5))]),i("details",m,[i("summary",null,[s[27]||(s[27]=i("a",{id:"SindbadML.getPullback",href:"#SindbadML.getPullback"},[i("span",{class:"jlbinding"},"SindbadML.getPullback")],-1)),s[28]||(s[28]=a()),l(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[29]||(s[29]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getPullback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flat, re, features</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getPullback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flat, re, features</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><p>flat :: weight parameters.</p></li><li><p>re :: model structure (vanilla Chain Dense Layers).</p></li><li><p>features :: <code>n</code> predictors and <code>s</code> samples.</p><ul><li><p>A vector of predictors</p></li><li><p>A matrix of predictors: <code>(p_n x s)</code></p></li><li><p>A tuple vector of predictors: <code>(p1, p2)</code></p></li><li><p>A tuple of matrices of predictors: <code>[(p1_n x s), (p2_n x s)]</code></p></li></ul></li></ul><p><strong>Returns:</strong></p><ul><li>new parameters and pullback function</li></ul><p><strong>Example</strong></p><p>Here we do one input features vector or matrix.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadML</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flux</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, relu), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Flux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sigmoid)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># features</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_feat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># apply</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flat, re </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> destructureNN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Zygote</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_params, pullback_func </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getPullback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flat, re, _feat)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ? or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_feat_ns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># \`n\` predictors and \`s\` samples.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_params, pullback_func </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getPullback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flat, re, _feat_ns)</span></span></code></pre></div><p><strong>Example</strong></p><p>Here we do one multiple input features vector or matrix.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadML</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flux</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, relu), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Flux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sigmoid)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Flux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sigmoid)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">combo_ms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JoinDenseNN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((m1, m2))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># features</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_feat1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_feat2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># apply</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flat, re </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> destructureNN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(combo_ms)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Zygote</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_params, pullback_func </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getPullback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flat, re, (_feat1, _feat2))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ? or with multiple samples</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_feat1_ns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># \`n\` predictors and \`s\` samples.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_feat2_ns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># \`n\` predictors and \`s\` samples.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_params, pullback_func </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getPullback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flat, re, (_feat1_ns, _feat2_ns))</span></span></code></pre></div>`,11))]),i("details",F,[i("summary",null,[s[30]||(s[30]=i("a",{id:"SindbadML.gradientBatch!",href:"#SindbadML.gradientBatch!"},[i("span",{class:"jlbinding"},"SindbadML.gradientBatch!")],-1)),s[31]||(s[31]=a()),l(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[32]||(s[32]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gradientBatch!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(grads_lib, dx_batch, chunk_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, loss_f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, get_inner_args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, input_args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; showprog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Computes gradients for a batch of samples.</strong></p><p><strong>Arguments</strong></p><ul><li><p><code>grads_lib</code>:</p><ul><li><p>PolyesterForwardDiffGrad: uses PolyesterForwardDiff.jl for gradients computation.</p></li><li><p>GradType: For all the other package based gradients.</p></li></ul></li><li><p><code>dx_batch</code>: pre-allocated array for batched gradients.</p></li><li><p><code>chunk_size</code>: Int, chunk size for PolyesterForwardDiff&#39;s threads.</p></li><li><p><code>loss_f</code>: loss function to be applied.</p></li><li><p><code>get_inner_args</code>: function to obtain inner values of loss function.</p></li><li><p><code>input_args</code>: global input arguments.</p></li></ul><p><strong>Returns:</strong></p><p>A <code>n x m</code> matrix for <code>n parameters gradients</code> and <code>m</code> samples.</p>',6))]),i("details",C,[i("summary",null,[s[33]||(s[33]=i("a",{id:"SindbadML.gradientSite",href:"#SindbadML.gradientSite"},[i("span",{class:"jlbinding"},"SindbadML.gradientSite")],-1)),s[34]||(s[34]=a()),l(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[35]||(s[35]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gradientSite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(grads_lib, x_vals, chunk_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, loss</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Computes gradients using different libraries for a site</p><p><strong>Arguments</strong></p><ul><li><p><code>grads_lib</code>:</p><ul><li>PolyesterForwardDiffGrad: using <code>PolyesterForwardDiff.jl</code> for multi-threaded chunk splits. The optimal speed is ideally achieved with <code>one thread</code> when <code>chunk_size=1</code> and <code>n-threads</code> for <code>n</code> parameters. However, a good compromise between memory allocations and speed could be to set <code>chunk_size=3</code> and use <code>n-threads</code> for <code>2n parameters</code>. !!! warning</li></ul><p>For M1 systems we default to ForwardDiff.gradient! single-threaded. And we let the <code>GradientConfig</code> constructor to automatically select the appropriate <code>chunk_size</code>.</p><ul><li><p>ForwardDiffGrad: uses ForwardDiff.jl for gradients computation.</p></li><li><p>FiniteDiffGrad: uses FiniteDiff.jl for gradients computation.</p></li><li><p>FiniteDifferencesGrad: uses FiniteDifferences.jl for gradients computation.</p></li></ul></li><li><p><code>x_vals</code>: parameters values.</p></li><li><p><code>chunk_size</code>: Int, chunk size for PolyesterForwardDiff&#39;s threads.</p></li><li><p><code>loss_f</code>: loss function to be applied.</p></li><li><p><code>args...</code>: additional arguments for the loss function.</p></li></ul><p>Returns: a <code>âˆ‡x</code> array with all parameter&#39;s gradients.</p>',5))]),i("details",f,[i("summary",null,[s[36]||(s[36]=i("a",{id:"SindbadML.gradsNaNCheck!-NTuple{4, Any}",href:"#SindbadML.gradsNaNCheck!-NTuple{4, Any}"},[i("span",{class:"jlbinding"},"SindbadML.gradsNaNCheck!")],-1)),s[37]||(s[37]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[38]||(s[38]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gradsNaNCheck!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(grads_batch, _params_batch, sites_batch, parameter_table; show_params_for_nan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Utility function to check if some calculated gradients were NaN (if found please double check your approach). This function will replace those NaNs with 0.0f0.</p><p><strong>Arguments</strong></p><ul><li><p><code>grads_batch</code>: gradients array.</p></li><li><p><code>_params_batch</code>: parameters values.</p></li><li><p><code>sites_batch</code>: sites names.</p></li><li><p><code>parameter_table</code>: parameters table.</p></li><li><p><code>show_params_for_nan=false</code>: if true, it will show the parameters that caused the NaNs.</p></li></ul>',4))]),i("details",A,[i("summary",null,[s[39]||(s[39]=i("a",{id:"SindbadML.lcKAoneHotbatch-NTuple{4, Any}",href:"#SindbadML.lcKAoneHotbatch-NTuple{4, Any}"},[i("span",{class:"jlbinding"},"SindbadML.lcKAoneHotbatch")],-1)),s[40]||(s[40]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[41]||(s[41]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lcKAoneHotbatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lc_data, up_bound, lc_name, ka_labels)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>lc_data</code>: Vector array</p></li><li><p><code>up_bound</code>: last index class, the range goes from <code>1:up_bound</code>, and any case not in that range uses the <code>up_bound</code> value. For <code>PFT</code> use <code>17</code> and for <code>KG</code> <code>32</code>.</p></li><li><p><code>lc_name</code>: land cover approach, either <code>KG</code> or <code>PFT</code>.</p></li><li><p><code>ka_labels</code>: KeyedArray labels, i.e. site names</p></li></ul>',3))]),i("details",T,[i("summary",null,[s[42]||(s[42]=i("a",{id:"SindbadML.loadTrainedNN-Tuple{Any}",href:"#SindbadML.loadTrainedNN-Tuple{Any}"},[i("span",{class:"jlbinding"},"SindbadML.loadTrainedNN")],-1)),s[43]||(s[43]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[44]||(s[44]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loadTrainedNN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path_model)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><code>path_model</code>: path to the model.</li></ul>',3))]),i("details",v,[i("summary",null,[s[45]||(s[45]=i("a",{id:"SindbadML.lossSite-NTuple{14, Any}",href:"#SindbadML.lossSite-NTuple{14, Any}"},[i("span",{class:"jlbinding"},"SindbadML.lossSite")],-1)),s[46]||(s[46]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lossSite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(new_params, gradient_lib, models, loc_forcing, loc_spinup_forcing, loc_forcing_t, loc_output, land_init, tem_info, parameter_to_index, parameter_scaling_type, loc_obs, cost_options, constraint_method; optim_mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Function to calculate the loss for a given site. This is used for optimization, hence the <code>optim_mode</code> argument is set to <code>true</code> by default. Also, a gradient library should be set as well as new parameters to update the models. See all input arguments in the function:</p><p><strong>Arguments</strong></p><ul><li><p><code>new_params</code>: new parameters</p></li><li><p><code>gradient_lib</code>: gradient library</p></li><li><p><code>models</code>: list of models</p></li><li><p><code>loc_forcing</code>: forcing data location</p></li><li><p><code>loc_spinup_forcing</code>: spinup forcing data location</p></li><li><p><code>loc_forcing_t</code>: forcing data time for one time step.</p></li><li><p><code>loc_output</code>: output data location</p></li><li><p><code>land_init</code>: initial land state</p></li><li><p><code>tem_info</code>: model information</p></li><li><p><code>parameter_to_index</code>: parameter to index</p></li><li><p><code>loc_obs</code>: observation data location</p></li><li><p><code>cost_options</code>: cost options</p></li><li><p><code>constraint_method</code>: constraint method</p></li></ul>',4))]),i("details",j,[i("summary",null,[s[48]||(s[48]=i("a",{id:"SindbadML.mixedGradientTraining-NTuple{7, Any}",href:"#SindbadML.mixedGradientTraining-NTuple{7, Any}"},[i("span",{class:"jlbinding"},"SindbadML.mixedGradientTraining")],-1)),s[49]||(s[49]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[50]||(s[50]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mixedGradientTraining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(grads_lib, nn_model, train_refs, test_val_refs, loss_fargs, forward_args; n_epochs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, optimizer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Optimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Adam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), path_experiment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Training function that computes model parameters using a neural network, which are then used by process-based models (PBMs) to estimate parameter gradients. Neural network weights are updated using the product of these gradients with the neural network&#39;s Jacobian.</p><p><strong>Arguments</strong></p><ul><li><p><code>grads_lib</code>: Library to compute PBMs parameter gradients.</p></li><li><p><code>nn_model</code>: A <code>Flux.Chain</code> neural network.</p></li><li><p><code>train_refs</code>: training data features.</p></li><li><p><code>test_val_refs</code>: test and validation data features.</p></li><li><p><code>loss_fargs</code>: functions used to calculate the loss.</p></li><li><p><code>forward_args</code>: arguments to evaluate the PBMs.</p></li><li><p><code>path_experiment=&quot;/&quot;</code>: save model to path.</p></li></ul>',4))]),i("details",S,[i("summary",null,[s[51]||(s[51]=i("a",{id:"SindbadML.oneHotPFT-Tuple{Any, Any, Any}",href:"#SindbadML.oneHotPFT-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"SindbadML.oneHotPFT")],-1)),s[52]||(s[52]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[53]||(s[53]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">oneHotPFT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pft, up_bound, veg_class)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>pft</code>: (Plant Functional Type). Any entry not in 1:17 would be set to the last index, this includes NaN! Last index is water/NaN</p></li><li><p><code>up_bound</code>: last index class, the range goes from <code>1:up_bound</code>, and any case not in that range uses the <code>up_bound</code> value. For <code>PFT</code> use <code>17</code>.</p></li><li><p><code>veg_class</code>: <code>true</code> or <code>false</code>.</p></li></ul><p>Returns a vector.</p>',4))]),i("details",D,[i("summary",null,[s[54]||(s[54]=i("a",{id:"SindbadML.partitionBatches-Tuple{Any}",href:"#SindbadML.partitionBatches-Tuple{Any}"},[i("span",{class:"jlbinding"},"SindbadML.partitionBatches")],-1)),s[55]||(s[55]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[56]||(s[56]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">partitionBatches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n; batch_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return an Iterator partitioning a dataset into batches.</p><p><strong>Arguments</strong></p><ul><li><p><code>n</code>: number of samples</p></li><li><p><code>batch_size</code>: batch size</p></li></ul>',4))]),i("details",B,[i("summary",null,[s[57]||(s[57]=i("a",{id:"SindbadML.shuffleBatches-Tuple{Any, Any}",href:"#SindbadML.shuffleBatches-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"SindbadML.shuffleBatches")],-1)),s[58]||(s[58]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shuffleBatches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list, bs; seed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>bs</code>: Batch size</p></li><li><p><code>list</code>: an array of samples</p></li><li><p><code>seed</code>: Int</p></li></ul><p>Returns shuffled partitioned batches.</p>',4))]),i("details",x,[i("summary",null,[s[60]||(s[60]=i("a",{id:"SindbadML.shuffleList-Tuple{Any}",href:"#SindbadML.shuffleList-Tuple{Any}"},[i("span",{class:"jlbinding"},"SindbadML.shuffleList")],-1)),s[61]||(s[61]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[62]||(s[62]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shuffleList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list; seed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>list</code>: an array of samples</p></li><li><p><code>seed</code>: Int</p></li></ul>',3))]),i("details",M,[i("summary",null,[s[63]||(s[63]=i("a",{id:"SindbadML.siteNameToID-Tuple{Any, Any}",href:"#SindbadML.siteNameToID-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"SindbadML.siteNameToID")],-1)),s[64]||(s[64]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[65]||(s[65]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">siteNameToID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(site_name, sites_list)</span></span></code></pre></div><p>Returns the index of <code>site_name</code> in the <code>sites_list</code></p><p><strong>Arguments</strong></p><ul><li><p><code>site_name</code>: site name</p></li><li><p><code>sites_list</code>: list of site names</p></li></ul>',4))]),i("details",N,[i("summary",null,[s[66]||(s[66]=i("a",{id:"SindbadML.toClass-Tuple{Number}",href:"#SindbadML.toClass-Tuple{Number}"},[i("span",{class:"jlbinding"},"SindbadML.toClass")],-1)),s[67]||(s[67]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[68]||(s[68]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; vegetation_rules)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: a key <code>(Number)</code> from <code>vegetation_rules</code></p></li><li><p><code>vegetation_rules</code></p></li></ul>',3))]),i("details",L,[i("summary",null,[s[69]||(s[69]=i("a",{id:"SindbadML.vegKAoneHotbatch-Tuple{Any, Any}",href:"#SindbadML.vegKAoneHotbatch-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"SindbadML.vegKAoneHotbatch")],-1)),s[70]||(s[70]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[71]||(s[71]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vegKAoneHotbatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pft_data, ka_labels)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>pft_data</code>: Vector array</p></li><li><p><code>ka_labels</code>: KeyedArray labels, i.e. site names</p></li></ul>',3))]),i("details",w,[i("summary",null,[s[72]||(s[72]=i("a",{id:"SindbadML.vegOneHot-Tuple{Any}",href:"#SindbadML.vegOneHot-Tuple{Any}"},[i("span",{class:"jlbinding"},"SindbadML.vegOneHot")],-1)),s[73]||(s[73]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[74]||(s[74]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vegOneHot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v_class; vegetation_labels)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>v_class</code>: get it by doing <code>toClass(x; vegetation_rules)</code>.</p></li><li><p><code>vegetation_labels</code>: see them by typing <code>vegetation_labels</code>.</p></li></ul>',3))]),i("details",P,[i("summary",null,[s[75]||(s[75]=i("a",{id:"SindbadML.vegOneHotbatch-Tuple{Any}",href:"#SindbadML.vegOneHotbatch-Tuple{Any}"},[i("span",{class:"jlbinding"},"SindbadML.vegOneHotbatch")],-1)),s[76]||(s[76]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[77]||(s[77]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vegOneHotbatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(veg_classes; vegetation_labels)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p>veg_classes: get these from <code>toClass.([x1, x2,...])</code></p></li><li><p>vegetation_labels: see them by typing <code>vegetation_labels</code></p></li></ul>',3))]),s[88]||(s[88]=i("h2",{id:"Internal",tabindex:"-1"},[a("Internal "),i("a",{class:"header-anchor",href:"#Internal","aria-label":'Permalink to "Internal {#Internal}"'},"â€‹")],-1)),i("details",I,[i("summary",null,[s[78]||(s[78]=i("a",{id:"SindbadML.batchShuffler-Tuple{Any, Any, Any}",href:"#SindbadML.batchShuffler-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"SindbadML.batchShuffler")],-1)),s[79]||(s[79]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[80]||(s[80]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">batchShuffler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_forcings, ids_forcings, batch_size; bs_seed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Shuffles the batches of forcings and their corresponding indices.</p>',2))]),i("details",V,[i("summary",null,[s[81]||(s[81]=i("a",{id:"SindbadML.getLoss-NTuple{10, Any}",href:"#SindbadML.getLoss-NTuple{10, Any}"},[i("span",{class:"jlbinding"},"SindbadML.getLoss")],-1)),s[82]||(s[82]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[83]||(s[83]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getLoss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models, loc_forcing, loc_spinup_forcing, loc_forcing_t, loc_output, land_init, tem_info, loc_obs, cost_options, constraint_method; optim_mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculates the loss for a given site. At this stage model parameters should had been set. The loss is calculated using the <code>metricVector</code> and <code>combineMetric</code> functions. The <code>metricVector</code> function calculates the loss for each model output and the <code>combineMetric</code> function combines the losses into a single value.</p><p><strong>Arguments</strong></p><ul><li><p><code>models</code>: list of models</p></li><li><p><code>loc_forcing</code>: forcing data location</p></li><li><p><code>loc_spinup_forcing</code>: spinup forcing data location</p></li><li><p><code>loc_forcing_t</code>: forcing data time for one time step.</p></li><li><p><code>loc_output</code>: output data location</p></li><li><p><code>land_init</code>: initial land state</p></li><li><p><code>tem_info</code>: model information</p></li><li><p><code>loc_obs</code>: observation data location</p></li><li><p><code>cost_options</code>: cost options</p></li><li><p><code>constraint_method</code>: constraint method</p></li></ul><p>The optional argument <code>optim_mode</code> is used to return the loss value only when set to <code>true</code>. Otherwise, it returns the loss value, the loss vector, and the loss indices.</p>',5))]),i("details",O,[i("summary",null,[s[84]||(s[84]=i("a",{id:"SindbadML.scaleToBounds-Tuple{Any, Any, Any}",href:"#SindbadML.scaleToBounds-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"SindbadML.scaleToBounds")],-1)),s[85]||(s[85]=a()),l(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[86]||(s[86]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaleToBounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, lo_b, up_b)</span></span></code></pre></div><p>Scales values in the [0,1] interval to some given lower <code>lo_b</code> and upper <code>up_b</code> bounds.</p><p><strong>Arguments</strong></p><ul><li><p><code>x</code>: vector array</p></li><li><p><code>lo_b</code>: lower bound</p></li><li><p><code>up_b</code>: upper bound</p></li></ul>',4))])])}const $=n(h,[["render",R]]);export{q as __pageData,$ as default};
