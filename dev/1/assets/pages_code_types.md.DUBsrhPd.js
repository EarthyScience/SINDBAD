import{_ as n,C as l,c as p,o as r,j as i,aA as o,a as s,G as a}from"./chunks/framework.CB6YZlnI.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/code/types.md","filePath":"pages/code/types.md","lastUpdated":null}'),d={name:"pages/code/types.md"},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""};function I(N,e,j,w,B,M){const t=l("Badge");return r(),p("div",null,[i("details",c,[i("summary",null,[e[0]||(e[0]=i("a",{id:"Sindbad.Types",href:"#Sindbad.Types"},[i("span",{class:"jlbinding"},"Sindbad.Types")],-1)),e[1]||(e[1]=s()),a(t,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),e[2]||(e[2]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Types Module</span></span></code></pre></div><p>The <code>Types</code> module consolidates and organizes all the types used in the SINDBAD framework into a central location. This ensures a single line for type definitions, promoting consistency and reusability across all SINDBAD packages. It also provides helper functions and utilities for working with these types.</p><p><strong>Provided Types and Their Purpose</strong></p><p><strong>1. <code>SindbadTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Abstract type serving as the base for all Julia types in the SINDBAD framework.</p></li><li><p><strong>Use</strong>: Provides a unified hierarchy for SINDBAD-specific types.</p></li></ul><p><strong>2. <code>ModelTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Defines types for models in SINDBAD.</p></li><li><p><strong>Use</strong>: Represents various model/processes.</p></li></ul><p><strong>3. <code>TimeTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Defines types for handling time-related operations.</p></li><li><p><strong>Use</strong>: Manages temporal aggregation of data on the go.</p></li></ul><p><strong>4. <code>SpinupTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Defines types for spinup processes in SINDBAD.</p></li><li><p><strong>Use</strong>: Handles methods for initialization and equilibrium states for models.</p></li></ul><p><strong>5. <code>LandTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Defines types for collecting variable from <code>land</code> and saving them.</p></li><li><p><strong>Use</strong>: Builds land and array for model execution.</p></li></ul><p><strong>6. <code>ArrayTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Defines types for array structures used in SINDBAD.</p></li><li><p><strong>Use</strong>: Provides specialized array types for efficient data handling in model simulation and output.</p></li></ul><p><strong>7. <code>InputTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Defines types for input data and configurations.</p></li><li><p><strong>Use</strong>: Manages input flows and forcing data.</p></li></ul><p><strong>8. <code>ExperimentTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Defines types for experiments conducted in SINDBAD.</p></li><li><p><strong>Use</strong>: Represents experimental setups, configurations, and results.</p></li></ul><p><strong>9. <code>OptimizationTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Defines types for optimization-related functions and methods in SINDBAD.</p></li><li><p><strong>Use</strong>: Separates methods for optimization methods, cost functions, methods, etc.</p></li></ul><p><strong>10. <code>MetricsTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Defines types for metrics used to evaluate model performance in SINDBAD.</p></li><li><p><strong>Use</strong>: Represents performance metrics and cost evaluation.</p></li></ul><p><strong>11. <code>MLTypes</code></strong></p><ul><li><p><strong>Purpose</strong>: Defines types for machine learning components in SINDBAD.</p></li><li><p><strong>Use</strong>: Supports machine learning workflows and data structures.</p></li></ul><p><strong>12. <code>LongTuple</code></strong></p><ul><li><p><strong>Purpose</strong>: Provides definitions and methods for working with <code>longTuple</code> type.</p></li><li><p><strong>Use</strong>: Facilitates operations on tuples with many elements to break them down into smaller tuples.</p></li></ul><p><strong>13. <code>TypesFunctions</code></strong></p><ul><li><p><strong>Purpose</strong>: Provides helper functions related to SINDBAD types.</p></li><li><p><strong>Use</strong>: Includes utilities for introspection, type manipulation, and documentation.</p></li></ul><p><strong>Key Functionality</strong></p><p><strong><code>purpose(T::Type)</code></strong></p><ul><li><p><strong>Description</strong>: Returns a string describing the purpose of a type in the SINDBAD framework.</p></li><li><p><strong>Use</strong>: Provides a descriptive string for each type, explaining its role or functionality.</p></li><li><p><strong>Example</strong>:</p></li></ul><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{BayesOptKMaternARD5}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Bayesian Optimization using Matern 5/2 kernel with Automatic Relevance Determination from BayesOpt.jl&quot;</span></span></code></pre></div><p><strong>Notes</strong></p><ul><li><p>The <code>Types</code> module serves as the backbone for type definitions in SINDBAD, ensuring modularity and extensibility.</p></li><li><p>Each type is documented with its purpose, making it easier for developers to understand and extend the framework.</p></li></ul>',35))]),e[54]||(e[54]=i("h2",{id:"Exported",tabindex:"-1"},[s("Exported "),i("a",{class:"header-anchor",href:"#Exported","aria-label":'Permalink to "Exported {#Exported}"'},"â€‹")],-1)),i("details",u,[i("summary",null,[e[3]||(e[3]=i("a",{id:"Sindbad.Types.ArrayView",href:"#Sindbad.Types.ArrayView"},[i("span",{class:"jlbinding"},"Sindbad.Types.ArrayView")],-1)),e[4]||(e[4]=s()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[5]||(e[5]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ArrayView{T,N,S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{&lt;:Any,N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Fields:</strong></p><ul><li><p><code>s::S</code>: The underlying array being viewed.</p></li><li><p><code>groupname::Symbol</code>: The name of the group containing the array.</p></li><li><p><code>arrayname::Symbol</code>: The name of the array being accessed.</p></li></ul>',3))]),i("details",g,[i("summary",null,[e[6]||(e[6]=i("a",{id:"Sindbad.Types.GroupView",href:"#Sindbad.Types.GroupView"},[i("span",{class:"jlbinding"},"Sindbad.Types.GroupView")],-1)),e[7]||(e[7]=s()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[8]||(e[8]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GroupView{S}</span></span></code></pre></div><p><strong>Fields:</strong></p><ul><li><p><code>groupname::Symbol</code>: The name of the group being accessed.</p></li><li><p><code>s::S</code>: The underlying data structure containing the group.</p></li></ul>',3))]),i("details",h,[i("summary",null,[e[9]||(e[9]=i("a",{id:"Sindbad.Types.LandWrapper",href:"#Sindbad.Types.LandWrapper"},[i("span",{class:"jlbinding"},"Sindbad.Types.LandWrapper")],-1)),e[10]||(e[10]=s()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[11]||(e[11]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LandWrapper{S}</span></span></code></pre></div><p><strong>Fields:</strong></p><ul><li><code>s::S</code>: The underlying NamedTuple or data structure being wrapped.</li></ul>',3))]),i("details",y,[i("summary",null,[e[12]||(e[12]=i("a",{id:"Sindbad.Types.LongTuple",href:"#Sindbad.Types.LongTuple"},[i("span",{class:"jlbinding"},"Sindbad.Types.LongTuple")],-1)),e[13]||(e[13]=s()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[14]||(e[14]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LongTuple{NSPLIT,T}</span></span></code></pre></div><p>A data structure that represents a tuple split into smaller chunks for better memory management and performance.</p><p><strong>Fields</strong></p><ul><li><p><code>data::T</code>: The underlying tuple data</p></li><li><p><code>n::Val{NSPLIT}</code>: The number of splits as a value type</p></li></ul><p><strong>Type Parameters</strong></p><ul><li><p><code>NSPLIT</code>: The number of elements in each split</p></li><li><p><code>T</code>: The type of the underlying tuple</p></li></ul>',6))]),i("details",m,[i("summary",null,[e[15]||(e[15]=i("a",{id:"Sindbad.Types.SindbadTypes",href:"#Sindbad.Types.SindbadTypes"},[i("span",{class:"jlbinding"},"Sindbad.Types.SindbadTypes")],-1)),e[16]||(e[16]=s()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[17]||(e[17]=o("<p><strong>SindbadTypes</strong></p><p>Abstract type for all Julia types in SINDBAD</p><p><strong>Type Hierarchy</strong></p><p><code>SindbadTypes &lt;: Any</code></p><hr><p><strong>Extended help</strong></p><p><strong>Available methods/subtypes:</strong></p><ul><li><p><code>ArrayTypes</code>: Abstract type for all array types in SINDBAD</p><ul><li><p><code>ModelArrayType</code>: Abstract type for internal model array types in SINDBAD</p><ul><li><p><code>ModelArrayArray</code>: Use standard Julia arrays for model variables</p></li><li><p><code>ModelArrayStaticArray</code>: Use StaticArrays for model variables</p></li><li><p><code>ModelArrayView</code>: Use array views for model variables</p></li></ul></li><li><p><code>OutputArrayType</code>: Abstract type for output array types in SINDBAD</p><ul><li><p><code>OutputArray</code>: Use standard Julia arrays for output</p></li><li><p><code>OutputMArray</code>: Use MArray for output</p></li><li><p><code>OutputSizedArray</code>: Use SizedArray for output</p></li><li><p><code>OutputYAXArray</code>: Use YAXArray for output</p></li></ul></li></ul></li><li><p><code>ExperimentTypes</code>: Abstract type for model run flags and experimental setup and simulations in SINDBAD</p><ul><li><p><code>OutputStrategy</code>: Abstract type for model output strategies in SINDBAD</p><ul><li><p><code>DoNotOutputAll</code>: Disable output of all model variables</p></li><li><p><code>DoNotSaveSingleFile</code>: Save output variables in separate files</p></li><li><p><code>DoOutputAll</code>: Enable output of all model variables</p></li><li><p><code>DoSaveSingleFile</code>: Save all output variables in a single file</p></li></ul></li><li><p><code>ParallelizationPackage</code>: Abstract type for using different parallelization packages in SINDBAD</p><ul><li><p><code>QbmapParallelization</code>: Use Qbmap for parallelization</p></li><li><p><code>ThreadsParallelization</code>: Use Julia threads for parallelization</p></li></ul></li><li><p><code>RunFlag</code>: Abstract type for model run configuration flags in SINDBAD</p><ul><li><p><code>DoCalcCost</code>: Enable cost calculation between model output and observations</p></li><li><p><code>DoDebugModel</code>: Enable model debugging mode</p></li><li><p><code>DoFilterNanPixels</code>: Enable filtering of NaN values in spatial data</p></li><li><p><code>DoInlineUpdate</code>: Enable inline updates of model state</p></li><li><p><code>DoNotCalcCost</code>: Disable cost calculation between model output and observations</p></li><li><p><code>DoNotDebugModel</code>: Disable model debugging mode</p></li><li><p><code>DoNotFilterNanPixels</code>: Disable filtering of NaN values in spatial data</p></li><li><p><code>DoNotInlineUpdate</code>: Disable inline updates of model state</p></li><li><p><code>DoNotRunForward</code>: Disable forward model run</p></li><li><p><code>DoNotRunOptimization</code>: Disable model parameter optimization</p></li><li><p><code>DoNotSaveInfo</code>: Disable saving of model information</p></li><li><p><code>DoNotSpinupTEM</code>: Disable terrestrial ecosystem model spinup</p></li><li><p><code>DoNotStoreSpinup</code>: Disable storing of spinup results</p></li><li><p><code>DoNotUseForwardDiff</code>: Disable forward mode automatic differentiation</p></li><li><p><code>DoRunForward</code>: Enable forward model run</p></li><li><p><code>DoRunOptimization</code>: Enable model parameter optimization</p></li><li><p><code>DoSaveInfo</code>: Enable saving of model information</p></li><li><p><code>DoSpinupTEM</code>: Enable terrestrial ecosystem model spinup</p></li><li><p><code>DoStoreSpinup</code>: Enable storing of spinup results</p></li><li><p><code>DoUseForwardDiff</code>: Enable forward mode automatic differentiation</p></li></ul></li></ul></li><li><p><code>InputTypes</code>: Abstract type for input data and processing related options in SINDBAD</p><ul><li><p><code>DataFormatBackend</code>: Abstract type for input data backends in SINDBAD</p><ul><li><p><code>BackendNetcdf</code>: Use NetCDF format for input data</p></li><li><p><code>BackendZarr</code>: Use Zarr format for input data</p></li></ul></li><li><p><code>ForcingTime</code>: Abstract type for forcing variable types in SINDBAD</p><ul><li><p><code>ForcingWithTime</code>: Forcing variable with time dimension</p></li><li><p><code>ForcingWithoutTime</code>: Forcing variable without time dimension</p></li></ul></li><li><p><code>InputArrayBackend</code>: Abstract type for input data array types in SINDBAD</p><ul><li><p><code>InputArray</code>: Use standard Julia arrays for input data</p></li><li><p><code>InputKeyedArray</code>: Use keyed arrays for input data</p></li><li><p><code>InputNamedDimsArray</code>: Use named dimension arrays for input data</p></li><li><p><code>InputYaxArray</code>: Use YAXArray for input data</p></li></ul></li><li><p><code>SpatialSubsetter</code>: Abstract type for spatial subsetting methods in SINDBAD</p><ul><li><p><code>SpaceID</code>: Use site ID (all caps) for spatial subsetting</p></li><li><p><code>SpaceId</code>: Use site ID (capitalized) for spatial subsetting</p></li><li><p><code>Spaceid</code>: Use site ID for spatial subsetting</p></li><li><p><code>Spacelat</code>: Use latitude for spatial subsetting</p></li><li><p><code>Spacelatitude</code>: Use full latitude for spatial subsetting</p></li><li><p><code>Spacelon</code>: Use longitude for spatial subsetting</p></li><li><p><code>Spacelongitude</code>: Use full longitude for spatial subsetting</p></li><li><p><code>Spacesite</code>: Use site location for spatial subsetting</p></li></ul></li></ul></li><li><p><code>LandTypes</code>: Abstract type for land related types that are typically used in preparing objects for model runs in SINDBAD</p><ul><li><p><code>LandWrapperType</code>: Abstract type for land wrapper types in SINDBAD</p><ul><li><p><code>GroupView</code>: Represents a group of data within a <code>LandWrapper</code>, allowing access to specific groups of variables.</p></li><li><p><code>LandWrapper</code>: Wraps the nested fields of a NamedTuple output of SINDBAD land into a nested structure of views that can be easily accessed with dot notation.</p></li></ul></li><li><p><code>PreAlloc</code>: Abstract type for preallocated land helpers types in prepTEM of SINDBAD</p><ul><li><p><code>PreAllocArray</code>: use a preallocated array for model output</p></li><li><p><code>PreAllocArrayAll</code>: use a preallocated array to output all land variables</p></li><li><p><code>PreAllocArrayFD</code>: use a preallocated array for finite difference (FD) hybrid experiments</p></li><li><p><code>PreAllocArrayMT</code>: use arrays of nThreads size for land model output for replicates of multiple threads</p></li><li><p><code>PreAllocStacked</code>: save output as a stacked vector of land using map over temporal dimension</p></li><li><p><code>PreAllocTimeseries</code>: save land output as a preallocated vector for time series of land</p></li><li><p><code>PreAllocYAXArray</code>: use YAX arrays for model output</p></li></ul></li></ul></li><li><p><code>MLTypes</code>: Abstract type for types in machine learning related methods in SINDBAD</p><ul><li><p><code>ActivationType</code>: Abstract type for activation functions used in ML models</p><ul><li><p><code>CustomSigmoid</code>: Use a custom sigmoid activation function. In this case, the <code>k_Ïƒ</code> parameter in ml_model sections of the settings is used to control the steepness of the sigmoid function.</p></li><li><p><code>FluxRelu</code>: Use Flux.jl ReLU activation function</p></li><li><p><code>FluxSigmoid</code>: Use Flux.jl Sigmoid activation function</p></li><li><p><code>FluxTanh</code>: Use Flux.jl Tanh activation function</p></li></ul></li><li><p><code>MLGradType</code>: Abstract type for automatic differentiation or finite differences for gradient calculations</p><ul><li><p><code>EnzymeGrad</code>: Use Enzyme.jl for automatic differentiation</p></li><li><p><code>FiniteDiffGrad</code>: Use FiniteDiff.jl for finite difference calculations</p></li><li><p><code>FiniteDifferencesGrad</code>: Use FiniteDifferences.jl for finite difference calculations</p></li><li><p><code>ForwardDiffGrad</code>: Use ForwardDiff.jl for automatic differentiation</p></li><li><p><code>PolyesterForwardDiffGrad</code>: Use PolyesterForwardDiff.jl for automatic differentiation</p></li><li><p><code>ZygoteGrad</code>: Use Zygote.jl for automatic differentiation</p></li></ul></li><li><p><code>MLModelType</code>: Abstract type for machine learning models used in SINDBAD</p><ul><li><code>FluxDenseNN</code>: simple dense neural network model implemented in Flux.jl</li></ul></li><li><p><code>MLOptimizerType</code>: Abstract type for optimizers used for training ML models in SINDBAD</p><ul><li><p><code>OptimisersAdam</code>: Use Optimisers.jl Adam optimizer for training ML models in SINDBAD</p></li><li><p><code>OptimisersDescent</code>: Use Optimisers.jl Descent optimizer for training ML models in SINDBAD</p></li></ul></li><li><p><code>MLTrainingType</code>: Abstract type for training a hybrid algorithm in SINDBAD</p><ul><li><p><code>CalcFoldFromSplit</code>: Use a split of the data to calculate the folds for cross-validation. The default wat to calculate the folds is by splitting the data into k-folds. In this case, the split is done on the go based on the values given in ml_training.split_ratios and n_folds.</p></li><li><p><code>LoadFoldFromFile</code>: Use precalculated data to load the folds for cross-validation. In this case, the data path has to be set under ml_training.fold_path and ml_training.which_fold. The data has to be in the format of a jld2 file with the following structure: /folds/0, /folds/1, /folds/2, ... /folds/n_folds. Each fold has to be a tuple of the form (train_indices, test_indices).</p></li><li><p><code>LossModelObsML</code>: Loss function using metrics between the predicted model and observation as defined in optimization.json</p></li><li><p><code>MixedGradient</code>: Use a mixed gradient approach for training using gradient from multiple methods and combining them with pullback from zygote</p></li></ul></li></ul></li><li><p><code>MetricTypes</code>: Abstract type for performance metrics and cost calculation methods in SINDBAD</p><ul><li><p><code>DataAggrOrder</code>: Abstract type for data aggregation order in SINDBAD</p><ul><li><p><code>SpaceTime</code>: Aggregate data first over space, then over time</p></li><li><p><code>TimeSpace</code>: Aggregate data first over time, then over space</p></li></ul></li><li><p><code>PerfMetric</code>: Abstract type for performance metrics in SINDBAD</p><ul><li><p><code>MSE</code>: Mean Squared Error: Measures the average squared difference between predicted and observed values</p></li><li><p><code>NAME1R</code>: Normalized Absolute Mean Error with 1/R scaling: Measures the absolute difference between means normalized by the range of observations</p></li><li><p><code>NMAE1R</code>: Normalized Mean Absolute Error with 1/R scaling: Measures the average absolute error normalized by the range of observations</p></li><li><p><code>NNSE</code>: Normalized Nash-Sutcliffe Efficiency: Measures model performance relative to the mean of observations, normalized to [0,1] range</p></li><li><p><code>NNSEInv</code>: Inverse Normalized Nash-Sutcliffe Efficiency: Inverse of NNSE for minimization problems, normalized to [0,1] range</p></li><li><p><code>NNSEÏƒ</code>: Normalized Nash-Sutcliffe Efficiency with uncertainty: Incorporates observation uncertainty in the normalized performance measure</p></li><li><p><code>NNSEÏƒInv</code>: Inverse Normalized Nash-Sutcliffe Efficiency with uncertainty: Inverse of NNSEÏƒ for minimization problems</p></li><li><p><code>NPcor</code>: Normalized Pearson Correlation: Measures linear correlation between predictions and observations, normalized to [0,1] range</p></li><li><p><code>NPcorInv</code>: Inverse Normalized Pearson Correlation: Inverse of NPcor for minimization problems</p></li><li><p><code>NSE</code>: Nash-Sutcliffe Efficiency: Measures model performance relative to the mean of observations</p></li><li><p><code>NSEInv</code>: Inverse Nash-Sutcliffe Efficiency: Inverse of NSE for minimization problems</p></li><li><p><code>NSEÏƒ</code>: Nash-Sutcliffe Efficiency with uncertainty: Incorporates observation uncertainty in the performance measure</p></li><li><p><code>NSEÏƒInv</code>: Inverse Nash-Sutcliffe Efficiency with uncertainty: Inverse of NSEÏƒ for minimization problems</p></li><li><p><code>NScor</code>: Normalized Spearman Correlation: Measures monotonic relationship between predictions and observations, normalized to [0,1] range</p></li><li><p><code>NScorInv</code>: Inverse Normalized Spearman Correlation: Inverse of NScor for minimization problems</p></li><li><p><code>Pcor</code>: Pearson Correlation: Measures linear correlation between predictions and observations</p></li><li><p><code>Pcor2</code>: Squared Pearson Correlation: Measures the strength of linear relationship between predictions and observations</p></li><li><p><code>Pcor2Inv</code>: Inverse Squared Pearson Correlation: Inverse of Pcor2 for minimization problems</p></li><li><p><code>PcorInv</code>: Inverse Pearson Correlation: Inverse of Pcor for minimization problems</p></li><li><p><code>Scor</code>: Spearman Correlation: Measures monotonic relationship between predictions and observations</p></li><li><p><code>Scor2</code>: Squared Spearman Correlation: Measures the strength of monotonic relationship between predictions and observations</p></li><li><p><code>Scor2Inv</code>: Inverse Squared Spearman Correlation: Inverse of Scor2 for minimization problems</p></li><li><p><code>ScorInv</code>: Inverse Spearman Correlation: Inverse of Scor for minimization problems</p></li></ul></li><li><p><code>SpatialDataAggr</code>: Abstract type for spatial data aggregation methods in SINDBAD</p></li><li><p><code>SpatialMetricAggr</code>: Abstract type for spatial metric aggregation methods in SINDBAD</p><ul><li><p><code>MetricMaximum</code>: Take maximum value across spatial dimensions</p></li><li><p><code>MetricMinimum</code>: Take minimum value across spatial dimensions</p></li><li><p><code>MetricSpatial</code>: Apply spatial aggregation to metrics</p></li><li><p><code>MetricSum</code>: Sum values across spatial dimensions</p></li></ul></li></ul></li><li><p><code>ModelTypes</code>: Abstract type for model types in SINDBAD</p><ul><li><p><code>DoCatchModelErrors</code>: Enable error catching during model execution</p></li><li><p><code>DoNotCatchModelErrors</code>: Disable error catching during model execution</p></li><li><p><code>LandEcosystem</code>: Abstract type for all SINDBAD land ecosystem models/approaches</p></li></ul></li><li><p><code>OptimizationTypes</code>: Abstract type for optimization related functions and methods in SINDBAD</p><ul><li><p><code>CostMethod</code>: Abstract type for cost calculation methods in SINDBAD</p><ul><li><p><code>CostModelObs</code>: cost calculation between model output and observations</p></li><li><p><code>CostModelObsLandTS</code>: cost calculation between land model output and time series observations</p></li><li><p><code>CostModelObsMT</code>: multi-threaded cost calculation between model output and observations</p></li><li><p><code>CostModelObsPriors</code>: cost calculation between model output, observations, and priors. NOTE THAT THIS METHOD IS JUST A PLACEHOLDER AND DOES NOT CALCULATE PRIOR COST PROPERLY YET</p></li></ul></li><li><p><code>GSAMethod</code>: Abstract type for global sensitivity analysis methods in SINDBAD</p><ul><li><p><code>GSAMorris</code>: Morris method for global sensitivity analysis</p></li><li><p><code>GSASobol</code>: Sobol method for global sensitivity analysis</p></li><li><p><code>GSASobolDM</code>: Sobol method with derivative-based measures for global sensitivity analysis</p></li></ul></li><li><p><code>OptimizationMethod</code>: Abstract type for optimization methods in SINDBAD</p><ul><li><p><code>BayesOptKMaternARD5</code>: Bayesian Optimization using Matern 5/2 kernel with Automatic Relevance Determination from BayesOpt.jl</p></li><li><p><code>CMAEvolutionStrategyCMAES</code>: Covariance Matrix Adaptation Evolution Strategy (CMA-ES) from CMAEvolutionStrategy.jl</p></li><li><p><code>EvolutionaryCMAES</code>: Evolutionary version of CMA-ES optimization from Evolutionary.jl</p></li><li><p><code>OptimBFGS</code>: Broyden-Fletcher-Goldfarb-Shanno (BFGS) from Optim.jl</p></li><li><p><code>OptimLBFGS</code>: Limited-memory Broyden-Fletcher-Goldfarb-Shanno (L-BFGS) from Optim.jl</p></li><li><p><code>OptimizationBBOadaptive</code>: Black Box Optimization with adaptive parameters from Optimization.jl</p></li><li><p><code>OptimizationBBOxnes</code>: Black Box Optimization using Natural Evolution Strategy (xNES) from Optimization.jl</p></li><li><p><code>OptimizationBFGS</code>: BFGS optimization with box constraints from Optimization.jl</p></li><li><p><code>OptimizationFminboxGradientDescent</code>: Gradient descent optimization with box constraints from Optimization.jl</p></li><li><p><code>OptimizationFminboxGradientDescentFD</code>: Gradient descent optimization with box constraints using forward differentiation from Optimization.jl</p></li><li><p><code>OptimizationGCMAESDef</code>: Global CMA-ES optimization with default settings from Optimization.jl</p></li><li><p><code>OptimizationGCMAESFD</code>: Global CMA-ES optimization using forward differentiation from Optimization.jl</p></li><li><p><code>OptimizationMultistartOptimization</code>: Multi-start optimization to find global optimum from Optimization.jl</p></li><li><p><code>OptimizationNelderMead</code>: Nelder-Mead simplex optimization method from Optimization.jl</p></li><li><p><code>OptimizationQuadDirect</code>: Quadratic Direct optimization method from Optimization.jl</p></li></ul></li><li><p><code>ParameterScaling</code>: Abstract type for parameter scaling methods in SINDBAD</p><ul><li><p><code>ScaleBounds</code>: Scale parameters relative to their bounds</p></li><li><p><code>ScaleDefault</code>: Scale parameters relative to default values</p></li><li><p><code>ScaleNone</code>: No parameter scaling applied</p></li></ul></li></ul></li><li><p><code>SpinupTypes</code>: Abstract type for model spinup related functions and methods in SINDBAD</p><ul><li><p><code>SpinupMode</code>: Abstract type for model spinup modes in SINDBAD</p><ul><li><p><code>AllForwardModels</code>: Use all forward models for spinup</p></li><li><p><code>EtaScaleA0H</code>: scale carbon pools using diagnostic scalars for Î·H and c_remain</p></li><li><p><code>EtaScaleA0HCWD</code>: scale carbon pools of CWD (cLitSlow) using Î·H and set vegetation pools to c_remain</p></li><li><p><code>EtaScaleAH</code>: scale carbon pools using diagnostic scalars for Î·H and Î·A</p></li><li><p><code>EtaScaleAHCWD</code>: scale carbon pools of CWD (cLitSlow) using Î·H and scale vegetation pools by Î·A</p></li><li><p><code>NlsolveFixedpointTrustregionCEco</code>: use a fixed-point nonlinear solver with trust region for carbon pools (cEco)</p></li><li><p><code>NlsolveFixedpointTrustregionCEcoTWS</code>: use a fixed-point nonlinear solver with trust region for both cEco and TWS</p></li><li><p><code>NlsolveFixedpointTrustregionTWS</code>: use a fixed-point nonlinearsolver with trust region for Total Water Storage (TWS)</p></li><li><p><code>ODEAutoTsit5Rodas5</code>: use the AutoVern7(Rodas5) method from DifferentialEquations.jl for solving ODEs</p></li><li><p><code>ODEDP5</code>: use the DP5 method from DifferentialEquations.jl for solving ODEs</p></li><li><p><code>ODETsit5</code>: use the Tsit5 method from DifferentialEquations.jl for solving ODEs</p></li><li><p><code>SSPDynamicSSTsit5</code>: use the SteadyState solver with DynamicSS and Tsit5 methods</p></li><li><p><code>SSPSSRootfind</code>: use the SteadyState solver with SSRootfind method</p></li><li><p><code>SelSpinupModels</code>: run only the models selected for spinup in the model structure</p></li><li><p><code>Spinup_TWS</code>: Spinup spinup_mode for Total Water Storage (TWS)</p></li><li><p><code>Spinup_cEco</code>: Spinup spinup_mode for cEco</p></li><li><p><code>Spinup_cEco_TWS</code>: Spinup spinup_mode for cEco and TWS</p></li></ul></li><li><p><code>SpinupSequence</code>: Basic Spinup sequence without time aggregation</p></li><li><p><code>SpinupSequenceWithAggregator</code>: Spinup sequence with time aggregation for corresponding forcingtime series</p></li></ul></li><li><p><code>TimeTypes</code>: Abstract type for implementing time subset and aggregation types in SINDBAD</p><ul><li><p><code>TimeAggregation</code>: Abstract type for time aggregation methods in SINDBAD</p><ul><li><p><code>TimeAllYears</code>: aggregation/slicing to include all years</p></li><li><p><code>TimeArray</code>: use array-based time aggregation</p></li><li><p><code>TimeDay</code>: aggregation to daily time steps</p></li><li><p><code>TimeDayAnomaly</code>: aggregation to daily anomalies</p></li><li><p><code>TimeDayIAV</code>: aggregation to daily IAV</p></li><li><p><code>TimeDayMSC</code>: aggregation to daily MSC</p></li><li><p><code>TimeDayMSCAnomaly</code>: aggregation to daily MSC anomalies</p></li><li><p><code>TimeDiff</code>: aggregation to time differences, e.g. monthly anomalies</p></li><li><p><code>TimeFirstYear</code>: aggregation/slicing of the first year</p></li><li><p><code>TimeHour</code>: aggregation to hourly time steps</p></li><li><p><code>TimeHourAnomaly</code>: aggregation to hourly anomalies</p></li><li><p><code>TimeHourDayMean</code>: aggregation to mean of hourly data over days</p></li><li><p><code>TimeIndexed</code>: aggregation using time indices, e.g., TimeFirstYear</p></li><li><p><code>TimeMean</code>: aggregation to mean over all time steps</p></li><li><p><code>TimeMonth</code>: aggregation to monthly time steps</p></li><li><p><code>TimeMonthAnomaly</code>: aggregation to monthly anomalies</p></li><li><p><code>TimeMonthIAV</code>: aggregation to monthly IAV</p></li><li><p><code>TimeMonthMSC</code>: aggregation to monthly MSC</p></li><li><p><code>TimeMonthMSCAnomaly</code>: aggregation to monthly MSC anomalies</p></li><li><p><code>TimeNoDiff</code>: aggregation without time differences</p></li><li><p><code>TimeRandomYear</code>: aggregation/slicing of a random year</p></li><li><p><code>TimeShuffleYears</code>: aggregation/slicing/selection of shuffled years</p></li><li><p><code>TimeSizedArray</code>: aggregation to a sized array</p></li><li><p><code>TimeYear</code>: aggregation to yearly time steps</p></li><li><p><code>TimeYearAnomaly</code>: aggregation to yearly anomalies</p></li></ul></li><li><p><code>TimeAggregator</code>: define a type for temporal aggregation of an array</p></li></ul></li></ul>",8))]),i("details",f,[i("summary",null,[e[18]||(e[18]=i("a",{id:"Sindbad.Types.TimeAggregator",href:"#Sindbad.Types.TimeAggregator"},[i("span",{class:"jlbinding"},"Sindbad.Types.TimeAggregator")],-1)),e[19]||(e[19]=s()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[20]||(e[20]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TimeAggregator{I, aggr_func}</span></span></code></pre></div><p>define a type for temporal aggregation of an array</p><p><strong>Fields:</strong></p><ul><li><p><code>indices::I</code>: indices to be collected for aggregation</p></li><li><p><code>aggr_func::aggr_func</code>: a function to use for aggregation, defaults to mean</p></li></ul>',4))]),i("details",k,[i("summary",null,[e[21]||(e[21]=i("a",{id:"Sindbad.Types.TimeAggregatorViewInstance",href:"#Sindbad.Types.TimeAggregatorViewInstance"},[i("span",{class:"jlbinding"},"Sindbad.Types.TimeAggregatorViewInstance")],-1)),e[22]||(e[22]=s()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[23]||(e[23]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TimeAggregatorViewInstance{T, N, D, P, AV </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TimeAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Fields:</strong></p><ul><li><p><code>parent::P</code>: the parent data</p></li><li><p><code>agg::AV</code>: a view of the parent data</p></li><li><p><code>dim::Val{D}</code>: a val instance of the type that stores the dimension to be aggregated on</p></li></ul>',3))]),i("details",b,[i("summary",null,[e[24]||(e[24]=i("a",{id:"Sindbad.Types.getSindbadDefinitions-Tuple{Any, Any}",href:"#Sindbad.Types.getSindbadDefinitions-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"Sindbad.Types.getSindbadDefinitions")],-1)),e[25]||(e[25]=s()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[26]||(e[26]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getSindbadDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sindbad_module, what_to_get; internal_only</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns all defined (and optionally internal) objects in the SINDBAD framework.</p><p><strong>Arguments</strong></p><ul><li><p><code>sindbad_module</code>: The module to search for defined things</p></li><li><p><code>what_to_get</code>: The type of things to get (e.g., Type, Function)</p></li><li><p><code>internal_only</code>: Whether to only include internal definitions (default: true)</p></li></ul><p><strong>Returns</strong></p><ul><li>An array of all defined things in the SINDBAD framework</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Get all defined types in the SINDBAD framework</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">defined_types </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getSindbadDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sindbad, Type)</span></span></code></pre></div>`,8))]),i("details",T,[i("summary",null,[e[27]||(e[27]=i("a",{id:"Sindbad.Types.getTypeDocString-Tuple{Type}",href:"#Sindbad.Types.getTypeDocString-Tuple{Type}"},[i("span",{class:"jlbinding"},"Sindbad.Types.getTypeDocString")],-1)),e[28]||(e[28]=s()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[29]||(e[29]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getTypeDocString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate a docstring for a type in a formatted way.</p><p><strong>Description</strong></p><p>This function generates a formatted docstring for a type, including its purpose and type hierarchy.</p><p><strong>Arguments</strong></p><ul><li><code>T</code>: The type for which the docstring is to be generated</li></ul><p><strong>Returns</strong></p><ul><li>A string containing the formatted docstring for the type.</li></ul>',8))]),i("details",S,[i("summary",null,[e[30]||(e[30]=i("a",{id:"Sindbad.Types.loopWriteTypeDocString-Tuple{Any, Any}",href:"#Sindbad.Types.loopWriteTypeDocString-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"Sindbad.Types.loopWriteTypeDocString")],-1)),e[31]||(e[31]=s()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[32]||(e[32]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loopWriteTypeDocString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o_file, T)</span></span></code></pre></div><p>Write a docstring for a type to a file.</p><p><strong>Description</strong></p><p>This function writes a docstring for a type to a file.</p><p><strong>Arguments</strong></p><ul><li><p><code>o_file</code>: The file to write the docstring to</p></li><li><p><code>T</code>: The type for which the docstring is to be generated</p></li></ul><p><strong>Returns</strong></p><ul><li><code>o_file</code>: The file with the docstring written to it</li></ul>',8))]),i("details",A,[i("summary",null,[e[33]||(e[33]=i("a",{id:"Sindbad.Types.methodsOf",href:"#Sindbad.Types.methodsOf"},[i("span",{class:"jlbinding"},"Sindbad.Types.methodsOf")],-1)),e[34]||(e[34]=s()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[35]||(e[35]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">methodsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; ds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, is_subtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bullet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; - &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">methodsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; the_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type, internal_only</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Display subtypes and their purposes for a type or module in a formatted way.</p><p><strong>Description</strong></p><p>This function provides a hierarchical display of subtypes and their purposes for a given type or module. For types, it shows a tree-like structure of subtypes and their purposes. For modules, it shows all defined types and their subtypes.</p><p><strong>Arguments</strong></p><ul><li><p><code>T::Type</code>: The type whose subtypes should be displayed</p></li><li><p><code>M::Module</code>: The module whose types should be displayed</p></li><li><p><code>ds::String</code>: Delimiter string between entries (default: newline)</p></li><li><p><code>is_subtype::Bool</code>: Whether to include nested subtypes (default: false)</p></li><li><p><code>bullet::String</code>: Bullet point for each entry (default: &quot; - &quot;)</p></li><li><p><code>the_type::Type</code>: Type of objects to display in module (default: Type)</p></li><li><p><code>internal_only::Bool</code>: Whether to only show internal definitions (default: true)</p></li></ul><p><strong>Returns</strong></p><ul><li>A formatted string showing the hierarchy of subtypes and their purposes</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Display subtypes of a type</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">methodsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LandEcosystem)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Display with custom formatting</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">methodsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LandEcosystem; ds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bullet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; * &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Display including nested subtypes</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">methodsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LandEcosystem; is_subtype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Display types in a module</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">methodsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sindbad)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Display specific types in a module</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">methodsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sindbad; the_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Function)</span></span></code></pre></div><p><strong>Extended help</strong></p><p>The output format for types is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>## TypeName</span></span>
<span class="line"><span>Purpose of the type</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Available methods/subtypes:</span></span>
<span class="line"><span> - subtype1: purpose</span></span>
<span class="line"><span> - subtype2: purpose</span></span>
<span class="line"><span>    - nested_subtype1: purpose</span></span>
<span class="line"><span>    - nested_subtype2: purpose</span></span></code></pre></div><p>If no subtypes exist, it will show &quot; - <code>None</code>&quot;.</p>`,14))]),i("details",E,[i("summary",null,[e[36]||(e[36]=i("a",{id:"Sindbad.Types.purpose",href:"#Sindbad.Types.purpose"},[i("span",{class:"jlbinding"},"Sindbad.Types.purpose")],-1)),e[37]||(e[37]=s()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[38]||(e[38]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns a string describing the purpose of a type in the SINDBAD framework.</p><p><strong>Description</strong></p><ul><li><p>This is a base function that should be extended by each package for their specific types.</p></li><li><p>When in SINDBAD models, purpose is a descriptive string that explains the role or functionality of the model or approach within the SINDBAD framework. If the purpose is not defined for a specific model or approach, it provides guidance on how to define it.</p></li><li><p>When in SINDBAD lib, purpose is a descriptive string that explains the dispatch on the type for the specific function. For instance, metricTypes.jl has a purpose for the types of metrics that can be computed.</p></li></ul><p><strong>Arguments</strong></p><ul><li><code>T::Type</code>: The type whose purpose should be described</li></ul><p><strong>Returns</strong></p><ul><li>A string describing the purpose of the type</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define the purpose for a specific model</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{BayesOptKMaternARD5}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Bayesian Optimization using Matern 5/2 kernel with Automatic Relevance Determination from BayesOpt.jl&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Retrieve the purpose</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">purpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BayesOptKMaternARD5))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: &quot;Bayesian Optimization using Matern 5/2 kernel with Automatic Relevance Determination from BayesOpt.jl&quot;</span></span></code></pre></div>`,10))]),i("details",D,[i("summary",null,[e[39]||(e[39]=i("a",{id:"Sindbad.Types.showMethodsOf-Tuple{Any}",href:"#Sindbad.Types.showMethodsOf-Tuple{Any}"},[i("span",{class:"jlbinding"},"Sindbad.Types.showMethodsOf")],-1)),e[40]||(e[40]=s()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[41]||(e[41]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">showMethodsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T)</span></span></code></pre></div><p>Display the subtypes and their purposes of a type in a formatted way.</p><p><strong>Description</strong></p><p>This function displays the hierarchical structure of subtypes and their purposes for a given type. It uses <code>methodsOf</code> internally to generate the formatted output and prints it to the console.</p><p><strong>Arguments</strong></p><ul><li><code>T</code>: The type whose subtypes and purposes should be displayed</li></ul><p><strong>Returns</strong></p><ul><li><code>nothing</code></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Display subtypes of LandEcosystem</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">showMethodsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LandEcosystem)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Display subtypes of a specific model type</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">showMethodsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ambientCO2)</span></span></code></pre></div><p><strong>Extended help</strong></p><p>The output format is the same as <code>methodsOf</code>, showing:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>## TypeName</span></span>
<span class="line"><span>Purpose of the type</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Available methods/subtypes:</span></span>
<span class="line"><span> - subtype1: purpose</span></span>
<span class="line"><span> - subtype2: purpose</span></span>
<span class="line"><span>    - nested_subtype1: purpose</span></span>
<span class="line"><span>    - nested_subtype2: purpose</span></span></code></pre></div><p>This function is a convenience wrapper around <code>methodsOf</code> that automatically prints the output to the console.</p>`,14))]),i("details",v,[i("summary",null,[e[42]||(e[42]=i("a",{id:"Sindbad.Types.writeTypeDocString-Tuple{Any, Any}",href:"#Sindbad.Types.writeTypeDocString-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"Sindbad.Types.writeTypeDocString")],-1)),e[43]||(e[43]=s()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[44]||(e[44]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">writeTypeDocString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o_file, T)</span></span></code></pre></div><p>Write a docstring for a type to a file.</p><p><strong>Description</strong></p><p>This function writes a docstring for a type to a file.</p><p><strong>Arguments</strong></p><ul><li><p><code>o_file</code>: The file to write the docstring to</p></li><li><p><code>T</code>: The type for which the docstring is to be generated</p></li></ul><p><strong>Returns</strong></p><ul><li><code>o_file</code>: The file with the docstring written to it</li></ul>',8))]),e[55]||(e[55]=i("h2",{id:"Internal",tabindex:"-1"},[s("Internal "),i("a",{class:"header-anchor",href:"#Internal","aria-label":'Permalink to "Internal {#Internal}"'},"â€‹")],-1)),i("details",C,[i("summary",null,[e[45]||(e[45]=i("a",{id:"Base.getproperty-Tuple{GroupView, Symbol}",href:"#Base.getproperty-Tuple{GroupView, Symbol}"},[i("span",{class:"jlbinding"},"Base.getproperty")],-1)),e[46]||(e[46]=s()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[47]||(e[47]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getproperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GroupView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, aggr_func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Accesses a specific array within a group of data in a <code>GroupView</code>.</p><p><strong>Returns:</strong></p><p>An <code>ArrayView</code> object for the specified array.</p>',4))]),i("details",_,[i("summary",null,[e[48]||(e[48]=i("a",{id:"Base.propertynames-Tuple{GroupView}",href:"#Base.propertynames-Tuple{GroupView}"},[i("span",{class:"jlbinding"},"Base.propertynames")],-1)),e[49]||(e[49]=s()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[50]||(e[50]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">propertynames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GroupView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the property names of a group in a <code>GroupView</code>.</p>',2))]),i("details",F,[i("summary",null,[e[51]||(e[51]=i("a",{id:"Base.show-Tuple{IO, GroupView}",href:"#Base.show-Tuple{IO, GroupView}"},[i("span",{class:"jlbinding"},"Base.show")],-1)),e[52]||(e[52]=s()),a(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[53]||(e[53]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, gv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GroupView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Displays a summary of the contents of a <code>GroupView</code>.</p>',2))])])}const P=n(d,[["render",I]]);export{x as __pageData,P as default};
