import{_ as s,c as a,o as e,aA as n}from"./chunks/framework.W9DcKwru.js";const c=JSON.parse('{"title":"SINDBAD Array Handling Functions","description":"","frontmatter":{},"headers":[],"relativePath":"pages/develop/array_handling.md","filePath":"pages/develop/array_handling.md","lastUpdated":null}'),t={name:"pages/develop/array_handling.md"};function l(h,i,p,r,o,k){return e(),a("div",null,i[0]||(i[0]=[n('<h1 id="SINDBAD-Array-Handling-Functions" tabindex="-1">SINDBAD Array Handling Functions <a class="header-anchor" href="#SINDBAD-Array-Handling-Functions" aria-label="Permalink to &quot;SINDBAD Array Handling Functions {#SINDBAD-Array-Handling-Functions}&quot;">​</a></h1><p>This document describes the array handling functions available in SINDBAD, which are designed to optimize performance and maintain consistency across the framework. These functions are implemented in <code>src/utilsCore.jl</code> as they are accessed within SINDBAD models..</p><h2 id="Overview" tabindex="-1">Overview <a class="header-anchor" href="#Overview" aria-label="Permalink to &quot;Overview {#Overview}&quot;">​</a></h2><p>SINDBAD provides several specialized array handling functions that are optimized for performance and memory efficiency. These functions are particularly useful when working with large datasets and model outputs.</p><h2 id="Core-Array-Functions" tabindex="-1">Core Array Functions <a class="header-anchor" href="#Core-Array-Functions" aria-label="Permalink to &quot;Core Array Functions {#Core-Array-Functions}&quot;">​</a></h2><h3 id="repElem" tabindex="-1"><code>repElem</code> <a class="header-anchor" href="#repElem" aria-label="Permalink to &quot;`repElem` {#repElem}&quot;">​</a></h3><p>Replace an element of a vector or static vector with a new value. This function is optimized for performance by avoiding unnecessary array copies.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> repElem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Replace the second element with 10.0</span></span></code></pre></div><h3 id="@rep_elem-Macro" tabindex="-1"><code>@rep_elem</code> Macro <a class="header-anchor" href="#@rep_elem-Macro" aria-label="Permalink to &quot;`@rep_elem` Macro {#@rep_elem-Macro}&quot;">​</a></h3><p>A macro that simplifies replacing elements in vectors defined in <code>land.pools</code>. The macro expands to a <code>repElem</code> call during compilation.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@rep_elem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pout[l] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cEco, lc, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:cEco</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">You can inspect the macro expansion using:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@macroexpand</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @rep_elem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pout[l] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cEco, lc, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:cEco</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></div><h3 id="addToElem" tabindex="-1"><code>addToElem</code> <a class="header-anchor" href="#addToElem" aria-label="Permalink to &quot;`addToElem` {#addToElem}&quot;">​</a></h3><p>Add a value to a specific element of a vector or static vector. This function is optimized for in-place modifications.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> addToElem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add 5.0 to the second element</span></span></code></pre></div><h3 id="@add_to_elem-Macro" tabindex="-1"><code>@add_to_elem</code> Macro <a class="header-anchor" href="#@add_to_elem-Macro" aria-label="Permalink to &quot;`@add_to_elem` Macro {#@add_to_elem-Macro}&quot;">​</a></h3><p>A macro that simplifies adding values to elements in vectors defined in <code>land.pools</code>. The macro expands to an <code>addToElem</code> call during compilation.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@add_to_elem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">evaporation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⇒</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ΔsoilW, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:soilW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="addVec" tabindex="-1"><code>addVec</code> <a class="header-anchor" href="#addVec" aria-label="Permalink to &quot;`addVec` {#addVec}&quot;">​</a></h3><p>Add two vectors element-wise. This function is optimized for vectorized operations.</p><h3 id="repVec" tabindex="-1"><code>repVec</code> <a class="header-anchor" href="#repVec" aria-label="Permalink to &quot;`repVec` {#repVec}&quot;">​</a></h3><p>Replace the values of a vector with a new vector. Also available as the <code>@rep_vec</code> macro for vectors in <code>land.pools</code>.</p><h3 id="cumSum!" tabindex="-1"><code>cumSum!</code> <a class="header-anchor" href="#cumSum!" aria-label="Permalink to &quot;`cumSum!` {#cumSum!}&quot;">​</a></h3><p>Compute the cumulative sum of elements in an input vector and store the result in an output vector. This function is optimized for in-place operations.</p><h3 id="getFrac" tabindex="-1"><code>getFrac</code> <a class="header-anchor" href="#getFrac" aria-label="Permalink to &quot;`getFrac` {#getFrac}&quot;">​</a></h3><p>Return either a ratio or numerator depending on whether the denominator is zero. This function is useful for handling division operations safely.</p><h3 id="getZix" tabindex="-1"><code>getZix</code> <a class="header-anchor" href="#getZix" aria-label="Permalink to &quot;`getZix` {#getZix}&quot;">​</a></h3><p>A helper function to get the indices of certain components (e.g., cVeg) within a larger vector of ecosystem pools (e.g., cEco).</p><h2 id="Performance-Considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#Performance-Considerations" aria-label="Permalink to &quot;Performance Considerations {#Performance-Considerations}&quot;">​</a></h2><ol><li><strong>Memory Efficiency</strong></li></ol><ul><li><p>Functions like <code>repElem</code> and <code>addToElem</code> avoid unnecessary array copies</p></li><li><p>In-place operations are used where possible (e.g., <code>cumSum!</code>)</p></li><li><p>Views are created instead of copies when appropriate</p></li></ul><ol start="2"><li><strong>Vectorization</strong></li></ol><ul><li><p>Operations are vectorized where possible</p></li><li><p>Specialized for common array operations</p></li><li><p>Optimized for both small and large arrays</p></li></ul><ol start="3"><li><strong>Type Stability</strong></li></ol><ul><li><p>Functions maintain type stability</p></li><li><p>Support both static and dynamic arrays</p></li><li><p>Handle different numeric types efficiently</p></li></ul><h2 id="Best-Practices" tabindex="-1">Best Practices <a class="header-anchor" href="#Best-Practices" aria-label="Permalink to &quot;Best Practices {#Best-Practices}&quot;">​</a></h2><ol><li><strong>Use Macros for Land Pools</strong></li></ol><ul><li><p>Prefer <code>@rep_elem</code> and <code>@add_to_elem</code> for <code>land.pools</code> operations</p></li><li><p>Macros provide compile-time optimization</p></li><li><p>Ensure type safety and consistency</p></li></ul><ol start="2"><li><strong>In-Place Operations</strong></li></ol><ul><li><p>Use in-place operations (functions ending with <code>!</code>) when possible</p></li><li><p>Reduces memory allocation</p></li><li><p>Improves performance for large arrays</p></li></ul><ol start="3"><li><strong>Vectorized Operations</strong></li></ol><ul><li><p>Use vectorized operations instead of loops</p></li><li><p>Take advantage of SIMD instructions</p></li><li><p>Better performance for large datasets</p></li></ul><ol start="4"><li><strong>Type Annotations</strong></li></ol><ul><li><p>Provide type annotations when possible</p></li><li><p>Helps compiler optimize code</p></li><li><p>Improves type stability</p></li></ul><h2 id="Example-Usage" tabindex="-1">Example Usage <a class="header-anchor" href="#Example-Usage" aria-label="Permalink to &quot;Example Usage {#Example-Usage}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Efficient element replacement</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> repElem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In-place cumulative sum</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> similar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cumSum!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out, v)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Safe division</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numerator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">denominator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getFrac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numerator, denominator)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Component indexing</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cEco </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cVeg_indices </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getZix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cEco, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:cVeg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>',46)]))}const E=s(t,[["render",l]]);export{c as __pageData,E as default};
