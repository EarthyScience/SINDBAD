import{_ as o,C as l,c as r,o as p,j as s,aA as t,a,G as n}from"./chunks/framework.CCZvcHlP.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pages/code/metrics.md","filePath":"pages/code/metrics.md","lastUpdated":null}'),d={name:"pages/code/metrics.md"},c={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""};function C(S,i,F,_,A,T){const e=l("Badge");return p(),r("div",null,[s("details",c,[s("summary",null,[i[0]||(i[0]=s("a",{id:"SindbadMetrics",href:"#SindbadMetrics"},[s("span",{class:"jlbinding"},"SindbadMetrics")],-1)),i[1]||(i[1]=a()),n(e,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),i[2]||(i[2]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SindbadMetrics</span></span></code></pre></div><p>The <code>SindbadMetrics</code> package provides tools for evaluating the performance of SINDBAD models. It includes a variety of metrics for comparing model outputs with observations, calculating statistical measures, and updating model parameters based on evaluation results.</p><p><strong>Purpose:</strong></p><p>This package is designed to define and compute metrics that assess the accuracy and reliability of SINDBAD models. It supports a wide range of statistical and performance metrics, enabling robust model evaluation and calibration.</p><p>It has heavy usage in <code>SindbadOptimization</code> but the package is separated to reduce to import burdens of optimization schemes. This allows for import into independent workflows for model evaluation and parameter estimation, e.g., in hybrid modeling.</p><p><strong>Dependencies:</strong></p><ul><li><p><code>Sindbad</code>: Provides the core SINDBAD models and types.</p></li><li><p><code>SindbadUtils</code>: Provides utility functions for handling data and NamedTuples, which are essential for metric calculations.</p></li></ul><p><strong>Included Files:</strong></p><ol><li><strong><code>handleDataForLoss.jl</code></strong>:</li></ol><ul><li>Implements functions for preprocessing and handling data before calculating loss functions or metrics.</li></ul><ol start="2"><li><strong><code>getMetrics.jl</code></strong>:</li></ol><ul><li>Provides functions for retrieving and organizing metrics based on model outputs and observations.</li></ul><ol start="3"><li><strong><code>metrics.jl</code></strong>:</li></ol><ul><li>Contains the core metric definitions, including statistical measures (e.g., RMSE, correlation) and custom metrics for SINDBAD experiments.</li></ul><div class="tip custom-block"><p class="custom-block-title">Note</p><ul><li><p>The package is designed to be extensible, allowing users to define custom metrics for specific use cases.</p></li><li><p>Metrics are computed in a modular fashion, ensuring compatibility with SINDBAD&#39;s optimization and evaluation workflows.</p></li><li><p>Supports both standard statistical metrics and domain-specific metrics tailored to SINDBAD experiments.</p></li></ul></div><p><strong>Examples:</strong></p><ol><li><strong>Calculating RMSE</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadMetrics</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rmse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_output, observations, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RMSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><ol><li><strong>Computing correlation</strong>:</li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SindbadMetrics</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">correlation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> metric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_output, observations, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pcor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div>`,20))]),i[33]||(i[33]=s("h2",{id:"Exported",tabindex:"-1"},[a("Exported "),s("a",{class:"header-anchor",href:"#Exported","aria-label":'Permalink to "Exported {#Exported}"'},"â€‹")],-1)),s("details",h,[s("summary",null,[i[3]||(i[3]=s("a",{id:"SindbadMetrics.combineMetric",href:"#SindbadMetrics.combineMetric"},[s("span",{class:"jlbinding"},"SindbadMetrics.combineMetric")],-1)),i[4]||(i[4]=a()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[5]||(i[5]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">combineMetric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metric_vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MetricSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">combineMetric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metric_vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MetricMinimum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">combineMetric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metric_vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MetricMaximum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">combineMetric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metric_vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, percentile_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>combines the metric from all constraints based on the type of combination.</p><p><strong>Arguments:</strong></p><ul><li><code>metric_vector</code>: a vector of metrics for variables</li></ul><p><strong>methods for combining the metric</strong></p><ul><li><p><code>::MetricSum</code>: return the total sum as the metric.</p></li><li><p><code>::MetricMinimum</code>: return the minimum of the <code>metric_vector</code> as the metric.</p></li><li><p><code>::MetricMaximum</code>: return the maximum of the <code>metric_vector</code> as the metric.</p></li><li><p><code>percentile_value::T</code>: <code>percentile_value^th</code> percentile of metric of each constraint as the overall metric</p></li></ul>`,6))]),s("details",k,[s("summary",null,[i[6]||(i[6]=s("a",{id:"SindbadMetrics.getData",href:"#SindbadMetrics.getData"},[s("span",{class:"jlbinding"},"SindbadMetrics.getData")],-1)),i[7]||(i[7]=a()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[8]||(i[8]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LandWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, observations, cost_option)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, observations, cost_option)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, observations, cost_option)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><p><code>model_output</code>: a collection of SINDBAD model output time series as a time series of stacked land NT or as a preallocated array.</p></li><li><p><code>observations</code>: a NT or a vector of arrays of observations, their uncertainties, and mask to use for calculation of performance metric/loss</p></li><li><p><code>cost_option</code>: information for a observation constraint on how it should be used to calculate the loss/metric of model performance</p></li></ul>`,3))]),s("details",g,[s("summary",null,[i[9]||(i[9]=s("a",{id:"SindbadMetrics.getDataWithoutNaN",href:"#SindbadMetrics.getDataWithoutNaN"},[s("span",{class:"jlbinding"},"SindbadMetrics.getDataWithoutNaN")],-1)),i[10]||(i[10]=a()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[11]||(i[11]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getDataWithoutNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, yÏƒ, Å·, idxs)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getDataWithoutNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, yÏƒ, Å·)</span></span></code></pre></div><p>return model and obs data excluding for the common <code>NaN</code> or for the valid pixels <code>idxs</code>.</p><p><strong>Arguments:</strong></p><ul><li><p><code>y</code>: observation data</p></li><li><p><code>yÏƒ</code>: observational uncertainty data</p></li><li><p><code>Å·</code>: model simulation data/estimate</p></li><li><p><code>idxs</code>: indices of valid data points</p></li></ul>`,4))]),s("details",u,[s("summary",null,[i[12]||(i[12]=s("a",{id:"SindbadMetrics.getModelOutputView-Union{Tuple{AbstractArray{<:Any, N}}, Tuple{N}} where N",href:"#SindbadMetrics.getModelOutputView-Union{Tuple{AbstractArray{<:Any, N}}, Tuple{N}} where N"},[s("span",{class:"jlbinding"},"SindbadMetrics.getModelOutputView")],-1)),i[13]||(i[13]=a()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[14]||(i[14]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> getModelOutputView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_dat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{&lt;:Any,N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N</span></span></code></pre></div>',1))]),s("details",m,[s("summary",null,[i[15]||(i[15]=s("a",{id:"SindbadMetrics.metric",href:"#SindbadMetrics.metric"},[s("span",{class:"jlbinding"},"SindbadMetrics.metric")],-1)),i[16]||(i[16]=a()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[17]||(i[17]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">metric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, yÏƒ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Å·</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PerfMetric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>calculate the performance/loss metric for given observation and model simulation data stream</p><p><strong>Arguments:</strong></p><ul><li><p><code>y</code>: observation data</p></li><li><p><code>yÏƒ</code>: observational uncertainty data</p></li><li><p><code>Å·</code>: model simulation data</p></li></ul><p><strong>Returns:</strong></p><ul><li><code>metric</code>: The calculated metric value</li></ul><p><strong>PerfMetric</strong></p><p>Abstract type for performance metrics in SINDBAD</p><p><strong>Available methods/subtypes:</strong></p><ul><li><p><code>MSE</code>: Mean Squared Error: Measures the average squared difference between predicted and observed values</p></li><li><p><code>NAME1R</code>: Normalized Absolute Mean Error with 1/R scaling: Measures the absolute difference between means normalized by the range of observations</p></li><li><p><code>NMAE1R</code>: Normalized Mean Absolute Error with 1/R scaling: Measures the average absolute error normalized by the range of observations</p></li><li><p><code>NNSE</code>: Normalized Nash-Sutcliffe Efficiency: Measures model performance relative to the mean of observations, normalized to [0,1] range</p></li><li><p><code>NNSEInv</code>: Inverse Normalized Nash-Sutcliffe Efficiency: Inverse of NNSE for minimization problems, normalized to [0,1] range</p></li><li><p><code>NNSEÏƒ</code>: Normalized Nash-Sutcliffe Efficiency with uncertainty: Incorporates observation uncertainty in the normalized performance measure</p></li><li><p><code>NNSEÏƒInv</code>: Inverse Normalized Nash-Sutcliffe Efficiency with uncertainty: Inverse of NNSEÏƒ for minimization problems</p></li><li><p><code>NPcor</code>: Normalized Pearson Correlation: Measures linear correlation between predictions and observations, normalized to [0,1] range</p></li><li><p><code>NPcorInv</code>: Inverse Normalized Pearson Correlation: Inverse of NPcor for minimization problems</p></li><li><p><code>NSE</code>: Nash-Sutcliffe Efficiency: Measures model performance relative to the mean of observations</p></li><li><p><code>NSEInv</code>: Inverse Nash-Sutcliffe Efficiency: Inverse of NSE for minimization problems</p></li><li><p><code>NSEÏƒ</code>: Nash-Sutcliffe Efficiency with uncertainty: Incorporates observation uncertainty in the performance measure</p></li><li><p><code>NSEÏƒInv</code>: Inverse Nash-Sutcliffe Efficiency with uncertainty: Inverse of NSEÏƒ for minimization problems</p></li><li><p><code>NScor</code>: Normalized Spearman Correlation: Measures monotonic relationship between predictions and observations, normalized to [0,1] range</p></li><li><p><code>NScorInv</code>: Inverse Normalized Spearman Correlation: Inverse of NScor for minimization problems</p></li><li><p><code>Pcor</code>: Pearson Correlation: Measures linear correlation between predictions and observations</p></li><li><p><code>Pcor2</code>: Squared Pearson Correlation: Measures the strength of linear relationship between predictions and observations</p></li><li><p><code>Pcor2Inv</code>: Inverse Squared Pearson Correlation: Inverse of Pcor2 for minimization problems</p></li><li><p><code>PcorInv</code>: Inverse Pearson Correlation: Inverse of Pcor for minimization problems</p></li><li><p><code>Scor</code>: Spearman Correlation: Measures monotonic relationship between predictions and observations</p></li><li><p><code>Scor2</code>: Squared Spearman Correlation: Measures the strength of monotonic relationship between predictions and observations</p></li><li><p><code>Scor2Inv</code>: Inverse Squared Spearman Correlation: Inverse of Scor2 for minimization problems</p></li><li><p><code>ScorInv</code>: Inverse Spearman Correlation: Inverse of Scor for minimization problems</p></li></ul>',10))]),s("details",y,[s("summary",null,[i[18]||(i[18]=s("a",{id:"SindbadMetrics.metricVector",href:"#SindbadMetrics.metricVector"},[s("span",{class:"jlbinding"},"SindbadMetrics.metricVector")],-1)),i[19]||(i[19]=a()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[20]||(i[20]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">metricVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LandWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, observations, cost_options)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">metricVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_output, observations, cost_options)</span></span></code></pre></div><p>returns a vector of metrics for variables in info.cost_options.observational_constraints</p><p><strong>Arguments:</strong></p><ul><li><p><code>observations</code>: a NT or a vector of arrays of observations, their uncertainties, and mask to use for calculation of performance metric/loss</p></li><li><p><code>model_output</code>: a collection of SINDBAD model output time series as a time series of stacked land NT</p></li><li><p><code>cost_options</code>: a table listing each observation constraint and how it should be used to calculate the loss/metric of model performance</p></li></ul>`,4))]),i[34]||(i[34]=s("h2",{id:"Internal",tabindex:"-1"},[a("Internal "),s("a",{class:"header-anchor",href:"#Internal","aria-label":'Permalink to "Internal {#Internal}"'},"â€‹")],-1)),s("details",b,[s("summary",null,[i[21]||(i[21]=s("a",{id:"SindbadMetrics.aggregateData",href:"#SindbadMetrics.aggregateData"},[s("span",{class:"jlbinding"},"SindbadMetrics.aggregateData")],-1)),i[22]||(i[22]=a()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[23]||(i[23]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aggregateData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dat, cost_option, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeSpace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aggregateData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dat, cost_option, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SpaceTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>aggregate the data based on the order of aggregation.</p><p><strong>Arguments:</strong></p><ul><li><p><code>dat</code>: a data array/vector to aggregate</p></li><li><p><code>cost_option</code>: information for a observation constraint on how it should be used to calculate the loss/metric of model performance</p></li><li><p><code>::TimeSpace</code>: appropriate type dispatch for the order of aggregation</p></li><li><p><code>::SpaceTime</code>: appropriate type dispatch for the order of aggregation</p></li></ul>`,4))]),s("details",E,[s("summary",null,[i[24]||(i[24]=s("a",{id:"SindbadMetrics.aggregateObsData",href:"#SindbadMetrics.aggregateObsData"},[s("span",{class:"jlbinding"},"SindbadMetrics.aggregateObsData")],-1)),i[25]||(i[25]=a()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[26]||(i[26]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aggregateObsData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, yÏƒ, cost_option, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoAggrObs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aggregateObsData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, yÏƒ, _, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoNotAggrObs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><p><code>y</code>: observation data</p></li><li><p><code>yÏƒ</code>: observational uncertainty data</p></li><li><p><code>cost_option</code>: information for a observation constraint on how it should be used to calculate the loss/metric of model performance</p></li><li><p><code>::DoAggrObs</code>: appropriate type dispatch for aggregation of observation data</p></li><li><p><code>::DoNotAggrObs</code>: appropriate type dispatch for not aggregating observation data</p></li></ul>`,3))]),s("details",f,[s("summary",null,[i[27]||(i[27]=s("a",{id:"SindbadMetrics.applySpatialWeight",href:"#SindbadMetrics.applySpatialWeight"},[s("span",{class:"jlbinding"},"SindbadMetrics.applySpatialWeight")],-1)),i[28]||(i[28]=a()),n(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[29]||(i[29]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">applySpatialWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, yÏƒ, yÌ‚, cost_option, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoSpatialWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">applySpatialWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, yÏƒ, yÌ‚, _, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoNotSpatialWeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>return model and obs data after applying the area weight.</p><p><strong>Arguments:</strong></p><ul><li><p><code>y</code>: observation data</p></li><li><p><code>yÏƒ</code>: observational uncertainty data</p></li><li><p><code>Å·</code>: model simulation data/estimate</p></li><li><p><code>::DoSpatialWeight</code>: type dispatch for doing area weight</p></li><li><p><code>::DoNotSpatialWeight</code>: type dispatch for not doing area weight</p></li></ul>`,4))]),s("details",v,[s("summary",null,[i[30]||(i[30]=s("a",{id:"SindbadMetrics.doSpatialAggregation-Tuple{Any, Any, ConcatData}",href:"#SindbadMetrics.doSpatialAggregation-Tuple{Any, Any, ConcatData}"},[s("span",{class:"jlbinding"},"SindbadMetrics.doSpatialAggregation")],-1)),i[31]||(i[31]=a()),n(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[32]||(i[32]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">doSpatialAggregation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dat, _, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ConcatData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments:</strong></p><ul><li><p><code>dat</code>: a data array/vector to aggregate</p></li><li><p><code>_</code>: unused argument</p></li><li><p><code>::ConcatData</code>: A type indicating that the data should not be aggregated spatially</p></li></ul>',3))])])}const M=o(d,[["render",C]]);export{D as __pageData,M as default};
