import{_ as a,c as i,o as t,aA as r}from"./chunks/framework.W9DcKwru.js";const h=JSON.parse('{"title":"Land Data Structure","description":"","frontmatter":{},"headers":[],"relativePath":"pages/concept/land.md","filePath":"pages/concept/land.md","lastUpdated":null}'),s={name:"pages/concept/land.md"};function l(o,e,n,d,c,p){return t(),i("div",null,e[0]||(e[0]=[r('<h1 id="Land-Data-Structure" tabindex="-1">Land Data Structure <a class="header-anchor" href="#Land-Data-Structure" aria-label="Permalink to &quot;Land Data Structure {#Land-Data-Structure}&quot;">​</a></h1><p>The <code>land</code> structure is a <code>NamedTuple</code> that serves as the primary data container for SINDBAD models, facilitating information exchange between different model components.</p><h2 id="Structure-Organization" tabindex="-1">Structure Organization <a class="header-anchor" href="#Structure-Organization" aria-label="Permalink to &quot;Structure Organization {#Structure-Organization}&quot;">​</a></h2><p>The <code>land</code> variables are organized hierarchically with exactly two levels:</p><ol><li><p><strong>Field</strong>: Groups variables by their functional category</p></li><li><p><strong>Subfield</strong>: Contains the actual data values</p></li></ol><h2 id="Field-Categories" tabindex="-1">Field Categories <a class="header-anchor" href="#Field-Categories" aria-label="Permalink to &quot;Field Categories {#Field-Categories}&quot;">​</a></h2><p>Variables are grouped into the following categories based on their characteristics and usage:</p><h3 id="Shared-Fields" tabindex="-1">Shared Fields <a class="header-anchor" href="#Shared-Fields" aria-label="Permalink to &quot;Shared Fields {#Shared-Fields}&quot;">​</a></h3><p>These fields contain variables used across multiple models:</p><ul><li><p><strong>constants</strong>: Helper variables and structure-dependent parameters that remain constant throughout the simulation</p></li><li><p><strong>diagnostics</strong>: Derived variables indicating stressors, controllers, and rates based on forcing, pools, or states</p></li><li><p><strong>fluxes</strong>: Mass/area/time variables representing ecosystem fluxes</p></li><li><p><strong>models</strong>: Type-based instances used for soil property calculations and pool updates</p></li><li><p><strong>pools</strong>: Storage variables automatically generated from <code>model_structure.json</code></p></li><li><p><strong>properties</strong>: Land surface characteristics (soil, vegetation) and their derivatives</p></li><li><p><strong>states</strong>: Ecosystem states and derived variables</p></li></ul><h3 id="Model-Specific-Fields" tabindex="-1">Model-Specific Fields <a class="header-anchor" href="#Model-Specific-Fields" aria-label="Permalink to &quot;Model-Specific Fields {#Model-Specific-Fields}&quot;">​</a></h3><p>Variables used exclusively by a single model are stored under the model name (e.g., <code>cCycleBase</code>).</p><h2 id="Structure-Validation" tabindex="-1">Structure Validation <a class="header-anchor" href="#Structure-Validation" aria-label="Permalink to &quot;Structure Validation {#Structure-Validation}&quot;">​</a></h2><p>To ensure proper organization and prevent potential issues, use the following command to examine the <code>land</code> structure:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tcPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(land)</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">Important Considerations</p><ul><li><p>No automatic checks prevent variable overwriting</p></li><li><p>Avoid duplicating fields across different groups</p></li><li><p>Maintain consistent naming conventions</p></li><li><p>Ensure proper variable grouping</p></li></ul></div><h2 id="Best-Practices" tabindex="-1">Best Practices <a class="header-anchor" href="#Best-Practices" aria-label="Permalink to &quot;Best Practices {#Best-Practices}&quot;">​</a></h2><ol><li><strong>Organization</strong></li></ol><ul><li><p>Keep variables in their appropriate categories</p></li><li><p>Use consistent naming conventions</p></li><li><p>Document any model-specific fields</p></li></ul><ol start="2"><li><strong>Validation</strong></li></ol><ul><li><p>Regularly check structure using <code>tcPrint</code></p></li><li><p>Verify variable grouping</p></li><li><p>Ensure no unintended overwrites</p></li></ul><ol start="3"><li><strong>Maintenance</strong></li></ol><ul><li><p>Update documentation when adding new fields</p></li><li><p>Review structure after model modifications</p></li><li><p>Maintain clear variable categorization</p></li></ul>',23)]))}const g=a(s,[["render",l]]);export{h as __pageData,g as default};
