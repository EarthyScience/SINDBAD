import{_ as o,c as t,o as i,aA as a}from"./chunks/framework.CCZvcHlP.js";const h=JSON.parse('{"title":"SINDBAD Types Module Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"pages/develop/sindbad_types.md","filePath":"pages/develop/sindbad_types.md","lastUpdated":null}'),s={name:"pages/develop/sindbad_types.md"};function p(r,e,d,n,l,c){return i(),t("div",null,e[0]||(e[0]=[a('<h1 id="SINDBAD-Types-Module-Documentation" tabindex="-1">SINDBAD Types Module Documentation <a class="header-anchor" href="#SINDBAD-Types-Module-Documentation" aria-label="Permalink to &quot;SINDBAD Types Module Documentation {#SINDBAD-Types-Module-Documentation}&quot;">​</a></h1><p>This page serves as an overview of the type definitions and modules within the SINDBAD framework. Each section below corresponds to a separate Julia source file located in the <code>src/Types</code> directory.</p><h2 id="Types.jl" tabindex="-1">Types.jl <a class="header-anchor" href="#Types.jl" aria-label="Permalink to &quot;Types.jl {#Types.jl}&quot;">​</a></h2><p><strong>Main module file that defines the core type system and includes type definitions for SINDBAD.</strong></p><p>This file establishes the <code>purpose</code> function, which provides descriptive information about types in the SINDBAD framework. It defines the base <code>SindbadTypes</code> abstract type from which all other SINDBAD types inherit. The file includes all other type definition files and provides documentation for the type system.</p><h2 id="ModelTypes.jl" tabindex="-1">ModelTypes.jl <a class="header-anchor" href="#ModelTypes.jl" aria-label="Permalink to &quot;ModelTypes.jl {#ModelTypes.jl}&quot;">​</a></h2><p><strong>Defines the core model type hierarchy for SINDBAD.</strong></p><p>This file establishes the <code>ModelTypes</code> abstract type and its subtypes, particularly focusing on land ecosystem models. It includes:</p><ul><li><p><code>LandEcosystem</code>: Abstract type for all land ecosystem models</p></li><li><p>Error handling types: <code>DoCatchModelErrors</code> and <code>DoNotCatchModelErrors</code></p></li></ul><p>The file also implements recursive purpose retrieval for model types.</p><h2 id="TimeTypes.jl" tabindex="-1">TimeTypes.jl <a class="header-anchor" href="#TimeTypes.jl" aria-label="Permalink to &quot;TimeTypes.jl {#TimeTypes.jl}&quot;">​</a></h2><p><strong>Defines time-related types for temporal subsetting and aggregation.</strong></p><p>This file defines <code>TimeTypes</code> abstract type and provides a comprehensive set of time-related types for handling different temporal scales and aggregation methods:</p><ul><li><p><code>TimeAggregator</code>: Core structure for temporal aggregation</p></li><li><p>Various time scales: <code>TimeHour</code>, <code>TimeDay</code>, <code>TimeMonth</code>, <code>TimeYear</code></p></li><li><p>Specialized time slice views: <code>TimeAllYears</code>, <code>TimeFirstYear</code>, <code>TimeRandomYear</code></p></li><li><p>Statistical time aggregations: <code>TimeMean</code>, <code>TimeDiff</code>, <code>TimeIAV</code> (Inter-Annual Variability)</p></li><li><p>Mean Seasonal Cycle (MSC) types: <code>TimeDayMSC</code>, <code>TimeMonthMSC</code></p></li><li><p>Anomaly types: <code>TimeHourAnomaly</code>, <code>TimeDayAnomaly</code>, etc.</p></li></ul><h2 id="SpinupTypes.jl" tabindex="-1">SpinupTypes.jl <a class="header-anchor" href="#SpinupTypes.jl" aria-label="Permalink to &quot;SpinupTypes.jl {#SpinupTypes.jl}&quot;">​</a></h2><p><strong>Defines types for model spinup procedures and sequences.</strong></p><p>This file defines the <code>SpinupTypes</code> abstract type and its subtypes, which contains types for different spinup modes and methods:</p><ul><li><p><code>SpinupMode</code>: Abstract type with numerous concrete implementations</p></li><li><p>Scaling methods: <code>EtaScaleA0H</code>, <code>EtaScaleAH</code>, etc.</p></li><li><p>Solver methods: <code>NlsolveFixedpointTrustregion</code>, <code>ODETsit5</code>, etc.</p></li><li><p>Spinup sequence types: <code>SpinupSequence</code>, <code>SpinupSequenceWithAggregator</code></p></li></ul><p>These types control how models reach equilibrium states before simulation.</p><h2 id="LandTypes.jl" tabindex="-1">LandTypes.jl <a class="header-anchor" href="#LandTypes.jl" aria-label="Permalink to &quot;LandTypes.jl {#LandTypes.jl}&quot;">​</a></h2><p><strong>Defines types for land model data structures and helpers.</strong></p><p>This file defines the <code>LandTypes</code> abstract type and its subtypes, which provides types for handling SINDBAD <code>land</code> and how the model output in every time step is organized:</p><ul><li><p><code>PreAlloc</code>: Types for preallocating memory for model outputs</p></li><li><p><code>LandWrapper</code>: A wrapper for nested data structures with dot notation access</p></li><li><p><code>GroupView</code>: For accessing groups of data within a <code>LandWrapper</code></p></li><li><p><code>ArrayView</code>: For accessing specific arrays within groups</p></li></ul><p>Includes methods for pretty-printing and accessing data in these structures.</p><h2 id="ArrayTypes.jl" tabindex="-1">ArrayTypes.jl <a class="header-anchor" href="#ArrayTypes.jl" aria-label="Permalink to &quot;ArrayTypes.jl {#ArrayTypes.jl}&quot;">​</a></h2><p><strong>Defines array types used throughout the SINDBAD framework.</strong></p><p>This file defines <code>ArrayTypes</code> and contains two main categories of array types:</p><ul><li><p><code>ModelArrayType</code>: For internal model variables (standard arrays, static arrays, views)</p></li><li><p><code>OutputArrayType</code>: For model outputs (standard arrays, MArrays, SizedArrays, YAXArrays)</p></li></ul><p>These types control how data is stored and manipulated within the model and output processes.</p><h2 id="InputTypes.jl" tabindex="-1">InputTypes.jl <a class="header-anchor" href="#InputTypes.jl" aria-label="Permalink to &quot;InputTypes.jl {#InputTypes.jl}&quot;">​</a></h2><p><strong>Defines types for handling input data and processing.</strong></p><p>This file defines the <code>InputTypes</code> abstract type and its subtypes, which includes types for:</p><ul><li><p>Data backends: <code>BackendNetcdf</code>, <code>BackendZarr</code></p></li><li><p>Input array types: <code>InputArray</code>, <code>InputKeyedArray</code>, <code>InputNamedDimsArray</code>, <code>InputYaxArray</code></p></li><li><p>Forcing variable types: <code>ForcingWithTime</code>, <code>ForcingWithoutTime</code></p></li><li><p>Spatial subsetting methods: <code>Spaceid</code>, <code>Spacelatitude</code>, <code>Spacelon</code>, etc.</p></li></ul><p>These types control how input data is loaded and processed.</p><h2 id="ExperimentTypes.jl" tabindex="-1">ExperimentTypes.jl <a class="header-anchor" href="#ExperimentTypes.jl" aria-label="Permalink to &quot;ExperimentTypes.jl {#ExperimentTypes.jl}&quot;">​</a></h2><p><strong>Defines types for experiment configuration and execution.</strong></p><p>This file defines the <code>ExperimentTypes</code> abstract type and its subtypes, which contains types for controlling model runs:</p><ul><li><p><code>RunFlag</code>: Boolean flags for various model behaviors (e.g., <code>DoSpinupTEM</code>, <code>DoSaveInfo</code>)</p></li><li><p><code>ParallelizationPackage</code>: Options for parallelization (<code>ThreadsParallelization</code>, <code>QbmapParallelization</code>)</p></li><li><p><code>OutputStrategy</code>: Controls for model output behavior (<code>DoOutputAll</code>, <code>DoSaveSingleFile</code>)</p></li></ul><p>These types configure how model experiments are executed.</p><h2 id="OptimizationTypes.jl" tabindex="-1">OptimizationTypes.jl <a class="header-anchor" href="#OptimizationTypes.jl" aria-label="Permalink to &quot;OptimizationTypes.jl {#OptimizationTypes.jl}&quot;">​</a></h2><p><strong>Defines types for model optimization and parameter estimation.</strong></p><p>This file defines the <code>OptimizationTypes</code> abstract type and its subtypes, which includes:</p><ul><li><p><code>OptimizationMethod</code>: Various optimization algorithms (BFGS, CMA-ES, Nelder-Mead, etc.)</p></li><li><p><code>GSAMethod</code>: Global sensitivity analysis methods (Morris, Sobol)</p></li><li><p><code>CostMethod</code>: Methods for calculating cost between model and observations</p></li><li><p><code>ParameterScaling</code>: Methods for scaling parameters during optimization</p></li></ul><p>These types control how model parameters are optimized.</p><h2 id="MetricsTypes.jl" tabindex="-1">MetricsTypes.jl <a class="header-anchor" href="#MetricsTypes.jl" aria-label="Permalink to &quot;MetricsTypes.jl {#MetricsTypes.jl}&quot;">​</a></h2><p><strong>Defines types for model performance metrics and evaluation.</strong></p><p>This file defines <code>MetricTypes</code> abstract type and its subtypes, which contains:</p><ul><li><p><code>PerfMetric</code>: Performance metrics (NSE, correlation, MSE, etc.)</p></li><li><p><code>DataAggrOrder</code>: Controls order of data aggregation (space-then-time or time-then-space)</p></li><li><p><code>SpatialDataAggr</code>: Methods for spatial data aggregation</p></li><li><p><code>SpatialMetricAggr</code>: Methods for aggregating metrics spatially</p></li></ul><p>These types control how model performance is evaluated.</p><h2 id="MLTypes.jl" tabindex="-1">MLTypes.jl <a class="header-anchor" href="#MLTypes.jl" aria-label="Permalink to &quot;MLTypes.jl {#MLTypes.jl}&quot;">​</a></h2><p><strong>Defines types for machine learning and gradient calculations.</strong></p><p>This file defines <code>MLTypes</code> abstract type and its subtypes, which focuses on gradient calculation methods:</p><ul><li><p><code>GradType</code>: Abstract type for gradient calculation methods</p></li><li><p>Various automatic differentiation methods: <code>ForwardDiffGrad</code>, <code>ZygoteGrad</code>, <code>EnzymeGrad</code></p></li><li><p>Finite difference methods: <code>FiniteDiffGrad</code>, <code>FiniteDifferencesGrad</code></p></li></ul><p>These types control how gradients are calculated for optimization.</p><h2 id="LongTuple.jl" tabindex="-1">LongTuple.jl <a class="header-anchor" href="#LongTuple.jl" aria-label="Permalink to &quot;LongTuple.jl {#LongTuple.jl}&quot;">​</a></h2><p><strong>Defines a specialized tuple type for handling large collections of data.</strong></p><p>This file implements the <code>LongTuple</code> type, which splits large tuples into smaller chunks for better memory management and performance. It includes methods for indexing, mapping, and displaying these <code>LongTuple</code>s.</p><h2 id="TypesFunctions.jl" tabindex="-1">TypesFunctions.jl <a class="header-anchor" href="#TypesFunctions.jl" aria-label="Permalink to &quot;TypesFunctions.jl {#TypesFunctions.jl}&quot;">​</a></h2><p><strong>Provides utility functions for working with SINDBAD types.</strong></p><p>This file contains functions for:</p><ul><li><p><code>getSindbadDefinitions</code>: Retrieving defined objects in SINDBAD</p></li><li><p><code>getTypeDocString</code>: Generating formatted documentation for types</p></li><li><p><code>methodsOf</code>: Displaying subtypes and their purposes</p></li><li><p><code>writeTypeDocString</code>: Writing type documentation to files</p></li></ul><p>These functions support documentation and introspection of the type system.</p><h2 id="docStringForTypes.jl" tabindex="-1">docStringForTypes.jl <a class="header-anchor" href="#docStringForTypes.jl" aria-label="Permalink to &quot;docStringForTypes.jl {#docStringForTypes.jl}&quot;">​</a></h2><p><strong>Contains generated documentation for SINDBAD types.</strong></p><p>This file contains pre-generated documentation strings for all SINDBAD types, including their purpose, type hierarchy, and available subtypes. These docstrings are attached to the corresponding types at runtime.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This file should not be edited manually; it&#39;s automatically generated by when <code>SindbadSetup</code> is precompiled, and changes are tracked when a new type is defined.</p></div>',66)]))}const y=o(s,[["render",p]]);export{h as __pageData,y as default};
