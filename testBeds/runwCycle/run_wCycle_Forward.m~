% a script to run an experiment with the default parameters for 1000 pixel in the Northern
% hemisphere (Trautmann, TWS paper, HESS 2018)
gone

% %% load the default results of the paper
% load('M:\people\ttraut\MATLAB\Paper.Data\ExpStruct_newStudy_E2bScal_1000pix_Cal_Paper.mat')
% load('M:\people\ttraut\MATLAB\Paper.Data\ModelSettings_Paper.mat')
% load('M:\people\ttraut\MATLAB\Paper.Results\Output\Optim_NewStudy_Default\Default1000_bergBasicCMAES_Paper.mat')
% 
% 
% clearvars -except Results ExpStruct ModelSettings

%% setup paths
for fn = {'tools','model','optimization'}
    addpath(genpath(['../../' fn{1}]),'-begin')
end

%% provide an experiment configuration file
expConfigFile               =   'testBeds/runwCycle/settings_runwCycle/experiment_wCycle.json';

%% run the experiment
[f,fe,fx,s,d,p,precOnceData,fSU,feSU,fxSU,sSU,dSU,precOnceDataSU,info,obs,cost] = workflowExperiment(expConfigFile,'info.tem.model.flags.runOpti',true,'info.tem.model.flags.runGenCode',false);

% [f,fe,fx,s,d,p,precOnceData,fSU,feSU,fxSU,sSU,dSU,precOnceDataSU,info,obs,cost] = workflowExperiment(expConfigFile,'info.tem.model.flags.runOpti',true,'info.tem.model.flags.runGenCode',false);
% without runGenCode
% [f2,fe2,fx2,s2,d2,p2,precOnceData,sSU,dSU,info] = workflowExperiment(expConfigFile,'info.tem.model.flags.runGenCode',false);

%% compare the params
p_def = NaN(1,numel(info.opti.params.names));
for i =   1:numel(info.opti.params.names)
   p_def(1,i) = info.opti.params.defaults(i);
end

pa_def
ModelSettings.BergBasic.Params.default

%% FIGURES
fNamesf=fields(f);
fNamesfx=fields(fx);
fNamesd=fields(d.storedStates);
for fn = 1:numel(fNamesf)
    figure
    scatter(mean(f.(fNamesf{fn}),1),mean(f.(fNamesf{fn}),1))
    title(['forcing: ' fNamesf{fn}])
end
for fn = 1:numel(fNamesfx)
    figure
    scatter(mean(fx.(fNamesfx{fn}),1),mean(fx.(fNamesfx{fn}),1))
    title(['flux: ' fNamesfx{fn}])
end
for fn = 1:numel(fNamesd)
    figure
    scatter(mean(squeeze(d.storedStates.(fNamesd{fn})),1),mean(squeeze(d.storedStates.(fNamesd{fn})),1))
    title(['diagnostic stored states: ' fNamesd{fn}])
end


%% looking at Q
figure, scatter(mean(fx.Q,1),mean(fx.Qb,1)),xlabel('Q'), ylabel('Qb')
figure, scatter(mean(fx.Q,1),mean(fx.Qint,1)),xlabel('Q'), ylabel('Qint')
figure, scatter(mean(fx.Q,1),mean(fx.Qint+fx.Qb,1)),xlabel('Q'), ylabel('Qint+Qb')

%% compare
names = {'FSC','pot ET', 'ET soil', 'ET Sub', 'Snow melt', 'Qbase', 'Snow fall','Rain fall','SWE','SM', 'GW'}
sDatas = {'squeeze(d.storedStates.wSnwFr)','f.PET', 'fx.EvapSoil', 'fx.EvapSub', 'fx.Qsnow', 'fx.Qb', 'f.Snow', 'f.Rain', 'squeeze(d.storedStates.wSnow)',...
'squeeze(d.storedStates.wSoil)', 'squeeze(d.storedStates.wGW)'}
oDatas = {'FSC','potET', 'actET','ETSub', 'M', 'Q', 'SF', 'P_liq', 'SWE', 'SM', 'GW'}

for ii=1:numel(names)
name  = names{ii};
sData = eval(sDatas{ii});
oData = eval(['Results.ModelOutput.' oDatas{ii}]);

diffData = oData-sData;
figure,set(gcf, 'Position', [10 10 15 10]), plot(mean(diffData,1)), title(name)
%[ diffData ] = plotComparison(name, oData, sData);

%sum(oData(:))<sum(sData(:))

end
% for fn = {'tools','model','optimization'}
%     rmpath(genpath(['../../' fn{1}]))
% end
