export soilProperties_Saxton2006, kSaxton2006, soilParamsSaxton2006

@bounds @describe @units @with_kw struct soilProperties_Saxton2006{T1, T2, T3, T4, T5} <: soilProperties
	DF::T1 = 1.0 | (0.9, 1.3) | "Density correction factor" | ""
	Rw::T2 = 0.0 | (0.0, 1.0) | "Weight fraction of gravel (decimal)" | "g g-1"
	matricSoilDensity::T3 = 2.65 | (2.5, 3.0) | "Matric soil density" | "g cm-3"
	gravelDensity::T4 = 2.65 | (2.5, 3.0) | "density of gravel material" | "g cm-3"
	EC::T5 = 36.0 | (30.0, 40.0) | "SElectrical conductance of a saturated soil extract" | "dS m-1 (dS/m = mili-mho cm-1)"
end

function precompute(o::soilProperties_Saxton2006, forcing, land::NamedTuple, helpers::NamedTuple)
	@unpack_soilProperties_Saxton2006 o

	@unpack_land begin
		numType ‚àà helpers.numbers
		(st_CLAY, st_ORGM, st_SAND) ‚àà land.soilTexture
	end
	## instantiate variables
	sp_Œ± = ones(numType, length(st_CLAY))
	sp_Œ≤ = ones(numType, length(st_CLAY))
	sp_kFC = ones(numType, length(st_CLAY))
	sp_Œ∏FC = ones(numType, length(st_CLAY))
	sp_œàFC = ones(numType, length(st_CLAY))
	sp_kWP = ones(numType, length(st_CLAY))
	sp_Œ∏WP = ones(numType, length(st_CLAY))
	sp_œàWP = ones(numType, length(st_CLAY))
	sp_kSat = ones(numType, length(st_CLAY))
	sp_Œ∏Sat = ones(numType, length(st_CLAY))
	sp_œàSat = ones(numType, length(st_CLAY))

	## calculate variables
	# number of layers & creation of arrays
	# calculate & set the soil hydraulic properties for each layer
	for sl in 1:length(st_CLAY)
		# (Œ±, Œ≤, kSat, Œ∏Sat, œàSat, kFC, Œ∏FC, œàFC, kWP, Œ∏WP, œàWP) = soilParamsSaxton2006(land, helpers, sl)
		CLAY = st_CLAY[sl]
		SAND = st_SAND[sl]
		# ORGM = sp_ORGM[sl]
		ORGM = 0.0
		# CLAY = CLAY
		# SAND = SAND
		# ORGM = ORGM
		## Moisture regressions
		# Œ∏_1500t: 1500 kPa moisture; first solution; #v
		# Œ∏_1500: 1500 kPa moisture; #v
		Œ∏_1500t = -0.024 * SAND + 0.487 * CLAY + 0.006 * ORGM + 0.005 * (SAND * ORGM) - 0.013 * (CLAY * ORGM) + 0.068 * (SAND * CLAY) + 0.031
		Œ∏_1500 = Œ∏_1500t + (0.14 * Œ∏_1500t - 0.02)
		# Œ∏_33t: 33 kPa moisture; first solution; #v
		# Œ∏_33: 33 kPa moisture; normal density; #v
		Œ∏_33t = -0.251 * SAND + 0.195 * CLAY + 0.011 * ORGM + 0.006 * (SAND * ORGM) - 0.027 * (CLAY * ORGM) + 0.452 * (SAND * CLAY) + 0.299
		Œ∏_33 = Œ∏_33t + (1.283 * (Œ∏_33t) ^ 2 - 0.374 * Œ∏_33t - 0.015)
		# Œ∏_s_33t: SAT-33 kPa moisture; first solution; #v
		# Œ∏_s_33: SAT-33 kPa moisture; normal density #v
		Œ∏_s_33t = 0.278 * SAND + 0.034 * CLAY + 0.022 * ORGM - 0.018 * (SAND * ORGM) - 0.027 * (CLAY * ORGM) - 0.584 * (SAND * CLAY) + 0.078
		Œ∏_s_33 = Œ∏_s_33t + (0.636 * Œ∏_s_33t - 0.107)
		# œà_et: Tension at air entry; first solution; kPa
		# œà_e: Tension at air entry [bubbling pressure], kPa
		œà_et = abs(-21.67 * SAND - 27.93 * CLAY - 81.97 * Œ∏_s_33 + 71.12 * (SAND * Œ∏_s_33) + 8.29 * (CLAY * Œ∏_s_33)
		- 14.05 * (SAND * CLAY) + 27.16)
		œà_e = abs(œà_et + (0.02 * (œà_et ^ 2) - 0.113 * œà_et - 0.70))
		# Œ∏_s: Saturated moisture [0 kPa], normal density, #v
		# rho_N: Normal density; g cm-3
		Œ∏_s = Œ∏_33 + Œ∏_s_33 - 0.097 * SAND + 0.043
		rho_N = (1.0 - Œ∏_s) * 2.65
		## Density effects
		# rho_DF: Adjusted density; g cm-3
		# Œ∏_s_DF: Saturated moisture [0 kPa], adjusted density, #v
		# Œ∏_33_DF: 33 kPa moisture; adjusted density; #v
		# Œ∏_s_33_DF: SAT-33 kPa moisture; adjusted density; #v
		# DF: Density adjustment Factor [0.9-1.3]
		rho_DF = rho_N * DF
		# Œ∏_s_DF = 1 - (rho_DF / 2.65); # original but does not include Œ∏_s
		Œ∏_s_DF = Œ∏_s * (1.0 - (rho_DF / 2.65)); # may be includes Œ∏_s
		Œ∏_33_DF = Œ∏_33 - 0.2 * (Œ∏_s - Œ∏_s_DF)
		Œ∏_1500_DF = Œ∏_1500 - 0.2 * (Œ∏_s - Œ∏_s_DF)
		Œ∏_s_33_DF = Œ∏_s_DF - Œ∏_33_DF
		## Moisture-Tension
		# A, B: Coefficients of moisture-tension, Eq. [11]
		# œà_Œ∏: Tension at moisture Œ∏; kPa
		B = (log(1500) - log(33)) / (log(Œ∏_33) - log(Œ∏_1500))
		A = exp(log(33) + B * log(Œ∏_33))
		# œà_Œ∏ = A * ((Œ∏) ^ (-B))
		# œà_33 = 33.0 - ((Œ∏ - Œ∏_33) * (33.0 - œà_e)) / (Œ∏_s - Œ∏_33)
		## Moisture-Conductivity
		# Œª: Slope of logarithmic tension-moisture curve
		# Ks: Saturated conductivity [matric soil], mm h-1
		# K_Œ∏: Unsaturated conductivity at moisture Œ∏; mm h-1
		Œª = 1 / B
		Ks = 1930 * ((Œ∏_s - Œ∏_33) ^ (3 - Œª)) * 24
		# K_Œ∏ = Ks * ((Œ∏ / Œ∏_s) ^ (3 + (2 / Œª)))
		## Gravel Effects
		# rho_B: Bulk soil density [matric plus gravel], g cm-3
		# Œ±Rho: Matric soil density/gravel density [2.65] = rho/2.65
		# Rv: Volume fraction of gravel [decimal], g cm -3
		# Rw: Weight fraction of gravel [decimal], g g-1
		# Kb: Saturated conductivity [bulk soil], mm h-1
		Œ±Rho = matricSoilDensity / gravelDensity
		Rv = (Œ±Rho * Rw) / (1.0 - Rw * (1.0 - Œ±Rho))
		rho_B = rho_N * (1.0 - Rv) + Rv * 2.65
		# PAW_B = PAW * (1.0 - Rv)
		Kb = Ks * ((1.0 - Rw) / (1.0 - Rw * (1.0 - (3 * Œ±Rho / 2))))
		## Salinity Effects
		# œï_o: Osmotic potential at Œ∏ = Œ∏_s; kPa
		# œï_o_Œ∏: Osmotic potential at Œ∏ < Œ∏_s; kPa
		# EC: Electrical conductance of a saturated soil extract, dS m-1 [dS/m = mili-mho cm-1]
		phi_o = 36 * EC
		# œï_o_Œ∏ = (Œ∏_s / Œ∏) * 36 / EC
		## Assign the variables for returning
		Œ± = A
		Œ≤ = B
		# Œ∏Sat = Œ∏_s_DF
		Œ∏Sat = Œ∏_s
		kSat = Kb
		œàSat = 0.0
		# Œ∏FC = Œ∏_33_DF
		Œ∏FC = Œ∏_33
		kFC = kSat * ((Œ∏FC / Œ∏Sat) ^ (3 + (2 / Œª)))
		œàFC = 33
		# Œ∏WP = Œ∏_1500_DF
		Œ∏WP = Œ∏_1500
		œàWP = 1500
		kWP = kSat * ((Œ∏WP / Œ∏Sat) ^ (3 + (2 / Œª)))
		# @show CLAY, SAND, Œ±, Œ≤, kSat, Œ∏Sat, œàSat, kFC, Œ∏FC, œàFC, kWP, Œ∏WP, œàWP

		sp_Œ±[sl] = Œ±
		sp_Œ≤[sl] = Œ≤
		sp_kFC[sl] = kFC
		sp_Œ∏FC[sl] = Œ∏FC
		sp_œàFC[sl] = œàFC
		sp_kWP[sl] = kWP
		sp_Œ∏WP[sl] = Œ∏WP
		sp_œàWP[sl] = œàWP
		sp_kSat[sl] = kSat
		sp_Œ∏Sat[sl] = Œ∏Sat
		sp_œàSat[sl] = œàSat
	end
	# generate the function handle to calculate soil hydraulic property
	unsatK = kSaxton2006

	## pack land variables
	@pack_land (sp_kFC, sp_kSat, unsatK, sp_kWP, sp_Œ±, sp_Œ≤, sp_Œ∏FC, sp_Œ∏Sat, sp_Œ∏WP, sp_œàFC, sp_œàSat, sp_œàWP) => land.soilProperties
	return land
end

@doc """
assigns the soil hydraulic properties based on Saxton; 2006 to land.soilProperties.sp_

# Parameters
$(PARAMFIELDS)

---

# compute:
Soil properties (hydraulic properties) using soilProperties_Saxton2006

*Inputs*
 - : texture-based Saxton parameters
 - calcSoilParamsSaxton2006: function to calculate hydraulic properties
 - info
 - land.soilTexture.sp_[CLAY/SAND]

*Outputs*
 - hydraulic conductivity [k], matric potention [œà] & porosity  (Œ∏) at saturation [Sat], field capacity [FC], & wilting point  (WP)
 - land.soilProperties.sp_[Œ±/Œ≤]: properties of moisture-retention curves
 - land.soilProperties.sp_Œ∏FC/kFC/œàFC/sFC
 - land.soilProperties.sp_Œ∏Sat/kSat/œàSat/sSat
 - land.soilProperties.sp_Œ∏WP/kWP/œàWP/sWP

# precompute:
precompute/instantiate time-invariant variables for soilProperties_Saxton2006


---

# Extended help

*References*
 - Saxton, K. E., & Rawls, W. J. (2006). Soil water characteristic estimates by  texture & organic matter for hydrologic solutions.  Soil science society of America Journal, 70[5], 1569-1578.

*Versions*
 - 1.0 on 21.11.2019
 - 1.1 on 03.12.2019 [skoirala]: handling potentail vertical distribution of soil texture  

*Created by:*
 - Nuno Carvalhais [ncarval]
 - skoirala
"""
soilProperties_Saxton2006

"""
calculates the soil hydraulic conductivity for a given moisture based on Saxton; 2006

# Inputs:
 - land.pools.soilW[sl]
 - land.soilWBase.sp_[wSat/Œ≤/kSat]: hydraulic parameters for each soil layer

# Outputs:
 - K: the hydraulic conductivity at unsaturated land.pools.soilW [in mm/day]
 - is calculated using original equation if helpers.flags.useLookupK == 0.0
 - uses precomputed lookup table if helpers.flags.useLookupK == 1

# Modifies:

# Extended help

# References:
 - Saxton, K. E., & Rawls, W. J. (2006). Soil water characteristic estimates by  texture & organic matter for hydrologic solutions.  Soil science society of America Journal, 70[5], 1569-1578.

# Versions:
 - 1.0 on 22.11.2019 [skoirala]:
 - 1.1 on 03.12.2019 [skoirala]: included the option to handle lookup table when set to true  from modelRun.json  

# Created by:
 - skoirala

# Notes:
 - This function is a part of pSoil; but making the looking up table & setting the soil  properties is handled by soilWBase [by calling this function]
 - is also used by all approaches depending on kUnsat within time loop of coreTEM
"""
function kSaxton2006(land, helpers, sl)
	@unpack_land begin
		(p_Œ≤, p_kSat, p_wSat) ‚àà land.soilWBase
		soilW ‚àà land.pools
		ŒîsoilW ‚àà land.states
		(ùüò, ùüô) ‚àà helpers.numbers
	end

	## calculate variables
	# if useLookUp is set to true in modelRun.json; run the original non-linear equation
	wSat = p_wSat[sl]
	Œ∏_dos = (soilW[sl] + ŒîsoilW[sl])/ wSat
	Œ∏_dos = clamp(Œ∏_dos, ùüò, ùüô)	
	Œ≤ = p_Œ≤[sl]
	kSat = p_kSat[sl]
	Œª = ùüô / Œ≤
	K = kSat * ((Œ∏_dos) ^ (3.0 + (2.0 / Œª)))
	return K
end

"""
calculates the soil hydraulic properties based on Saxton 2006

# Inputs:
 - : texture-based parameters
 - info
 - land.soilTexture.sp_[CLAY/SAND]: in fraction
 - sl: soil layer to calculate property for

# Outputs:
 - hydraulic conductivity [k], matric potention [œà] & porosity  (Œ∏) at saturation [Sat], field capacity [FC], & wilting point  (WP)
 - properties of moisture-retention curves: (Œ± & Œ≤)

# Modifies:

# Extended help

# References:
 - Saxton, K. E., & Rawls, W. J. (2006). Soil water characteristic estimates by  texture & organic matter for hydrologic solutions.  Soil science society of America Journal, 70[5], 1569-1578.

# Versions:
 - 1.0 on 22.11.2019 [skoirala]:

# Created by:
 - skoirala

# Notes:
 - FC: Field Capacity moisture [33 kPa], #v  
 - PAW: Plant Avail. moisture [33-1500 kPa, matric soil], #v
 - PAWB: Plant Avail. moisture [33-1500 kPa, bulk soil], #v
 - SAT: Saturation moisture [0 kPa], #v
 - WP: Wilting point moisture [1500 kPa], #v
"""
function soilParamsSaxton2006(land, helpers, sl)

	# @unpack_soilProperties_Saxton2006 o

	@unpack_land (st_CLAY, sp_ORGM, sp_SAND) ‚àà land.soilTexture


	## calculate variables
	# Get sand; clay; & organic matter contents
	# CLAY: Clay; #w
	# SAND: Sand; #w
	# ORGM: Organic Matter; #w
	# CLAY = CLAY / 100
	# SAND = SAND / 100
	# ORGM = ORGM / 100
	# p_CLAY
	CLAY = p_CLAY[sl]
	SAND = sp_SAND[sl]
	ORGM = sp_ORGM[sl]
	# CLAY = CLAY
	# SAND = SAND
	# ORGM = ORGM
	## Moisture regressions
	# Œ∏_1500t: 1500 kPa moisture; first solution; #v
	# Œ∏_1500: 1500 kPa moisture; #v
	Œ∏_1500t = -0.024 * SAND + 0.487 * CLAY + 0.006 * ORGM + 0.005 * (SAND * ORGM) - 0.013 * (CLAY * ORGM) + 0.068 * (SAND * CLAY) + 0.031
	Œ∏_1500 = Œ∏_1500t + (0.14 * Œ∏_1500t - 0.02)
	# Œ∏_33t: 33 kPa moisture; first solution; #v
	# Œ∏_33: 33 kPa moisture; normal density; #v
	Œ∏_33t = -0.251 * SAND + 0.195 * CLAY + 0.011 * ORGM + 0.006 * (SAND * ORGM) - 0.027 * (CLAY * ORGM) + 0.452 * (SAND * CLAY) + 0.299
	Œ∏_33 = Œ∏_33t + (1.283 * (Œ∏_33t) ^ 2 - 0.374 * Œ∏_33t - 0.015)
	# Œ∏_s_33t: SAT-33 kPa moisture; first solution; #v
	# Œ∏_s_33: SAT-33 kPa moisture; normal density #v
	Œ∏_s_33t = 0.278 * SAND + 0.034 * CLAY + 0.022 * ORGM - 0.018 * (SAND * ORGM) - 0.027 * (CLAY * ORGM) - 0.584 * (SAND * CLAY) + 0.078
	Œ∏_s_33 = Œ∏_s_33t + (0.636 * Œ∏_s_33t - 0.107)
	# œà_et: Tension at air entry; first solution; kPa
	# œà_e: Tension at air entry [bubbling pressure], kPa
	œà_et = abs(-21.67 * SAND - 27.93 * CLAY - 81.97 * Œ∏_s_33 + 71.12 * (SAND * Œ∏_s_33) + 8.29 * (CLAY * Œ∏_s_33)
	- 14.05 * (SAND * CLAY) + 27.16)
	œà_e = abs(œà_et + (0.02 * (œà_et ^ 2) - 0.113 * œà_et - 0.70))
	# Œ∏_s: Saturated moisture [0 kPa], normal density, #v
	# rho_N: Normal density; g cm-3
	Œ∏_s = Œ∏_33 + Œ∏_s_33 - 0.097 * SAND + 0.043
	rho_N = (1.0 - Œ∏_s) * 2.65
	## Density effects
	# rho_DF: Adjusted density; g cm-3
	# Œ∏_s_DF: Saturated moisture [0 kPa], adjusted density, #v
	# Œ∏_33_DF: 33 kPa moisture; adjusted density; #v
	# Œ∏_s_33_DF: SAT-33 kPa moisture; adjusted density; #v
	# DF: Density adjustment Factor [0.9-1.3]
	rho_DF = rho_N * DF
	# Œ∏_s_DF = 1 - (rho_DF / 2.65); # original but does not include Œ∏_s
	Œ∏_s_DF = Œ∏_s * (1.0 - (rho_DF / 2.65)); # may be includes Œ∏_s
	Œ∏_33_DF = Œ∏_33 - 0.2 * (Œ∏_s - Œ∏_s_DF)
	Œ∏_1500_DF = Œ∏_1500 - 0.2 * (Œ∏_s - Œ∏_s_DF)
	Œ∏_s_33_DF = Œ∏_s_DF - Œ∏_33_DF
	## Moisture-Tension
	# A, B: Coefficients of moisture-tension, Eq. [11]
	# œà_Œ∏: Tension at moisture Œ∏; kPa
	B = (log(1500) - log(33)) / (log(Œ∏_33) - log(Œ∏_1500))
	A = exp(log(33) + B * log(Œ∏_33))
	# œà_Œ∏ = A * ((Œ∏) ^ (-B))
	# œà_33 = 33.0 - ((Œ∏ - Œ∏_33) * (33.0 - œà_e)) / (Œ∏_s - Œ∏_33)
	## Moisture-Conductivity
	# Œª: Slope of logarithmic tension-moisture curve
	# Ks: Saturated conductivity [matric soil], mm h-1
	# K_Œ∏: Unsaturated conductivity at moisture Œ∏; mm h-1
	Œª = 1 / B
	Ks = 1930 * ((Œ∏_s - Œ∏_33) ^ (3 - Œª)) * 24
	# K_Œ∏ = Ks * ((Œ∏ / Œ∏_s) ^ (3 + (2 / Œª)))
	## Gravel Effects
	# rho_B: Bulk soil density [matric plus gravel], g cm-3
	# Œ±Rho: Matric soil density/gravel density [2.65] = rho/2.65
	# Rv: Volume fraction of gravel [decimal], g cm -3
	# Rw: Weight fraction of gravel [decimal], g g-1
	# Kb: Saturated conductivity [bulk soil], mm h-1
	Œ±Rho = matricSoilDensity / gravelDensity
	Rv = (Œ±Rho * Rw) / (1.0 - Rw * (1.0 - Œ±Rho))
	rho_B = rho_N * (1.0 - Rv) + Rv * 2.65
	# PAW_B = PAW * (1.0 - Rv)
	Kb = Ks * ((1.0 - Rw) / (1.0 - Rw * (1.0 - (3 * Œ±Rho / 2))))
	## Salinity Effects
	# œï_o: Osmotic potential at Œ∏ = Œ∏_s; kPa
	# œï_o_Œ∏: Osmotic potential at Œ∏ < Œ∏_s; kPa
	# EC: Electrical conductance of a saturated soil extract, dS m-1 [dS/m = mili-mho cm-1]
	phi_o = 36 * EC
	# œï_o_Œ∏ = (Œ∏_s / Œ∏) * 36 / EC
	## Assign the variables for returning
	Œ± = A
	Œ≤ = B
	# Œ∏Sat = Œ∏_s_DF
	Œ∏Sat = Œ∏_s
	kSat = Kb
	œàSat = 0.0
	# Œ∏FC = Œ∏_33_DF
	Œ∏FC = Œ∏_33
	kFC = kSat * ((Œ∏FC / Œ∏Sat) ^ (3 + (2 / Œª)))
	œàFC = 33
	# Œ∏WP = Œ∏_1500_DF
	Œ∏WP = Œ∏_1500
	œàWP = 1500
	kWP = kSat * ((Œ∏WP / Œ∏Sat) ^ (3 + (2 / Œª)))

	## pack land variables
	return Œ±, Œ≤, kSat, Œ∏Sat, œàSat, kFC, Œ∏FC, œàFC, kWP, Œ∏WP, œàWP
end

