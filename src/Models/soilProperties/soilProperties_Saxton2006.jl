export soilProperties_Saxton2006, kSaxton2006, soilParamsSaxton2006

#! format: off
@bounds @describe @units @with_kw struct soilProperties_Saxton2006{T1,T2,T3,T4,T5,TN} <: soilProperties
    DF::T1 = 1.0 | (0.9, 1.3) | "Density correction factor" | ""
    Rw::T2 = 0.0 | (0.0, 1.0) | "Weight fraction of gravel (decimal)" | "g g-1"
    matricSoilDensity::T3 = 2.65 | (2.5, 3.0) | "Matric soil density" | "g cm-3"
    gravelDensity::T4 = 2.65 | (2.5, 3.0) | "density of gravel material" | "g cm-3"
    EC::T5 = 36.0 | (30.0, 40.0) | "SElectrical conductance of a saturated soil extract" | "dS m-1 (dS/m = mili-mho cm-1)"
    a1::TN = -0.024 | (nothing, nothing) | "Saxton Parameters" | ""
    a2::TN = 0.487 | (nothing, nothing) | "Saxton Parameters" | ""
    a3::TN = 0.006 | (nothing, nothing) | "Saxton Parameters" | ""
    a4::TN = 0.005 | (nothing, nothing) | "Saxton Parameters" | ""
    a5::TN = 0.013 | (nothing, nothing) | "Saxton Parameters" | ""
    a6::TN = 0.068 | (nothing, nothing) | "Saxton Parameters" | ""
    a7::TN = 0.031 | (nothing, nothing) | "Saxton Parameters" | ""
    b1::TN = 0.14 | (nothing, nothing) | "Saxton Parameters" | ""
    b2::TN = 0.02 | (nothing, nothing) | "Saxton Parameters" | ""
    c1::TN = -0.251 | (nothing, nothing) | "Saxton Parameters" | ""
    c2::TN = 0.195 | (nothing, nothing) | "Saxton Parameters" | ""
    c3::TN = 0.011 | (nothing, nothing) | "Saxton Parameters" | ""
    c4::TN = 0.006 | (nothing, nothing) | "Saxton Parameters" | ""
    c5::TN = 0.027 | (nothing, nothing) | "Saxton Parameters" | ""
    c6::TN = 0.452 | (nothing, nothing) | "Saxton Parameters" | ""
    c7::TN = 0.299 | (nothing, nothing) | "Saxton Parameters" | ""
    d1::TN = 1.283 | (nothing, nothing) | "Saxton Parameters" | ""
    d2::TN = 0.374 | (nothing, nothing) | "Saxton Parameters" | ""
    d3::TN = 0.015 | (nothing, nothing) | "Saxton Parameters" | ""
    e1::TN = 0.278 | (nothing, nothing) | "Saxton Parameters" | ""
    e2::TN = 0.034 | (nothing, nothing) | "Saxton Parameters" | ""
    e3::TN = 0.022 | (nothing, nothing) | "Saxton Parameters" | ""
    e4::TN = 0.018 | (nothing, nothing) | "Saxton Parameters" | ""
    e5::TN = 0.027 | (nothing, nothing) | "Saxton Parameters" | ""
    e6::TN = 0.584 | (nothing, nothing) | "Saxton Parameters" | ""
    e7::TN = 0.078 | (nothing, nothing) | "Saxton Parameters" | ""
    f1::TN = 0.636 | (nothing, nothing) | "Saxton Parameters" | ""
    f2::TN = 0.107 | (nothing, nothing) | "Saxton Parameters" | ""
    g1::TN = -21.67 | (nothing, nothing) | "Saxton Parameters" | ""
    g2::TN = 27.93 | (nothing, nothing) | "Saxton Parameters" | ""
    g3::TN = 81.97 | (nothing, nothing) | "Saxton Parameters" | ""
    g4::TN = 71.12 | (nothing, nothing) | "Saxton Parameters" | ""
    g5::TN = 8.29 | (nothing, nothing) | "Saxton Parameters" | ""
    g6::TN = 14.05 | (nothing, nothing) | "Saxton Parameters" | ""
    g7::TN = 27.16 | (nothing, nothing) | "Saxton Parameters" | ""
    h1::TN = 0.02 | (nothing, nothing) | "Saxton Parameters" | ""
    h2::TN = 0.113 | (nothing, nothing) | "Saxton Parameters" | ""
    h3::TN = 0.70 | (nothing, nothing) | "Saxton Parameters" | ""
    i1::TN = 0.097 | (nothing, nothing) | "Saxton Parameters" | ""
    i2::TN = 0.043 | (nothing, nothing) | "Saxton Parameters" | ""
    n02::TN = 0.2 | (nothing, nothing) | "Saxton Parameters" | ""
    n2::TN = 2.0 | (nothing, nothing) | "Saxton Parameters" | ""
    n24::TN = 24.0 | (nothing, nothing) | "Saxton Parameters" | ""
    n3::TN = 3.0 | (nothing, nothing) | "Saxton Parameters" | ""
    n33::TN = 33.0 | (nothing, nothing) | "Saxton Parameters" | ""
    n36::TN = 36.0 | (nothing, nothing) | "Saxton Parameters" | ""
    n1500::TN = 1500.0 | (nothing, nothing) | "Saxton Parameters" | ""
    n1930::TN = 1930.0 | (nothing, nothing) | "Saxton Parameters" | ""

end
# b::T =  | nothing | "Saxton Parameters" | ""

function define(p_struct::soilProperties_Saxton2006, forcing, land, helpers)
    @unpack_soilProperties_Saxton2006 p_struct

    @unpack_land begin
        (ùüò, ùüô, num_type, sNT) ‚àà helpers.numbers
        (st_CLAY, st_ORGM, st_SAND) ‚àà land.soilTexture
    end
    ## instantiate variables
    sp_Œ± = zero(land.pools.soilW)
    sp_Œ≤ = zero(land.pools.soilW)
    sp_kFC = zero(land.pools.soilW)
    sp_Œ∏FC = zero(land.pools.soilW)
    sp_œàFC = zero(land.pools.soilW)
    sp_kWP = zero(land.pools.soilW)
    sp_Œ∏WP = zero(land.pools.soilW)
    sp_œàWP = zero(land.pools.soilW)
    sp_kSat = zero(land.pools.soilW)
    sp_Œ∏Sat = zero(land.pools.soilW)
    sp_œàSat = zero(land.pools.soilW)

    # generate the function handle to calculate soil hydraulic property
    unsatK = kSaxton2006::typeof(kSaxton2006)

    ## pack land variables
    @pack_land (sp_kFC, sp_kSat, unsatK, sp_kWP, sp_Œ±, sp_Œ≤, sp_Œ∏FC, sp_Œ∏Sat, sp_Œ∏WP, sp_œàFC, sp_œàSat, sp_œàWP, n2, n3) => land.soilProperties
    return land
end


function precompute(p_struct::soilProperties_Saxton2006, forcing, land, helpers)
    @unpack_soilProperties_Saxton2006 p_struct

    @unpack_land begin
        (sp_kFC, sp_kSat, unsatK, sp_kWP, sp_Œ±, sp_Œ≤, sp_Œ∏FC, sp_Œ∏Sat, sp_Œ∏WP, sp_œàFC, sp_œàSat, sp_œàWP) ‚àà land.soilProperties
    end
    ## calculate variables
    # calculate & set the soil hydraulic properties for each layer
    for sl in eachindex(sp_Œ±)
        (Œ±, Œ≤, kSat, Œ∏Sat, œàSat, kFC, Œ∏FC, œàFC, kWP, Œ∏WP, œàWP) = calcPropsSaxton2006(p_struct, land, helpers, sl)
        @rep_elem Œ± => (sp_Œ±, sl, :soilW)
        @rep_elem Œ≤ => (sp_Œ≤, sl, :soilW)
        @rep_elem kFC => (sp_kFC, sl, :soilW)
        @rep_elem Œ∏FC => (sp_Œ∏FC, sl, :soilW)
        @rep_elem œàFC => (sp_œàFC, sl, :soilW)
        @rep_elem kWP => (sp_kWP, sl, :soilW)
        @rep_elem Œ∏WP => (sp_Œ∏WP, sl, :soilW)
        @rep_elem œàWP => (sp_œàWP, sl, :soilW)
        @rep_elem kSat => (sp_kSat, sl, :soilW)
        @rep_elem Œ∏Sat => (sp_Œ∏Sat, sl, :soilW)
        @rep_elem œàSat => (sp_œàSat, sl, :soilW)
    end

    ## pack land variables
    @pack_land (sp_kFC, sp_kSat, unsatK, sp_kWP, sp_Œ±, sp_Œ≤, sp_Œ∏FC, sp_Œ∏Sat, sp_Œ∏WP, sp_œàFC, sp_œàSat, sp_œàWP) => land.soilProperties
    return land
end

@doc """
assigns the soil hydraulic properties based on Saxton; 2006 to land.soilProperties.sp_

# Parameters
$(PARAMFIELDS)

---

# compute:
Soil properties (hydraulic properties) using soilProperties_Saxton2006

*Inputs*
 - : texture-based Saxton parameters
 - calcSoilParamsSaxton2006: function to calculate hydraulic properties
 - info
 - land.soilTexture.sp_[CLAY/SAND]

*Outputs*
 - hydraulic conductivity [k], matric potention [œà] & porosity  (Œ∏) at saturation [Sat], field capacity [FC], & wilting point  (WP)
 - land.soilProperties.sp_[Œ±/Œ≤]: properties of moisture-retention curves
 - land.soilProperties.sp_Œ∏FC/kFC/œàFC/sFC
 - land.soilProperties.sp_Œ∏Sat/kSat/œàSat/sSat
 - land.soilProperties.sp_Œ∏WP/kWP/œàWP/sWP

# instantiate:
instantiate/instantiate time-invariant variables for soilProperties_Saxton2006


---

# Extended help

*References*
 - Saxton, K. E., & Rawls, W. J. (2006). Soil water characteristic estimates by  texture & organic matter for hydrologic solutions.  Soil science society of America Journal, 70[5], 1569-1578.

*Versions*
 - 1.0 on 21.11.2019
 - 1.1 on 03.12.2019 [skoirala]: handling potentail vertical distribution of soil texture  

*Created by:*
 - Nuno Carvalhais [ncarval]
 - skoirala
"""
soilProperties_Saxton2006

"""
calculates the soil hydraulic conductivity for a given moisture based on Saxton; 2006

# Inputs:
 - land.pools.soilW[sl]
 - land.soilWBase.sp_[wSat/Œ≤/kSat]: hydraulic parameters for each soil layer

# Outputs:
 - K: the hydraulic conductivity at unsaturated land.pools.soilW [in mm/day]
 - is calculated using original equation if helpers.flags.useLookupK == 0.0
 - uses instantiated lookup table if helpers.flags.useLookupK == 1

# Modifies:

# Extended help

# References:
 - Saxton, K. E., & Rawls, W. J. (2006). Soil water characteristic estimates by  texture & organic matter for hydrologic solutions.  Soil science society of America Journal, 70[5], 1569-1578.

# Versions:
 - 1.0 on 22.11.2019 [skoirala]:
 - 1.1 on 03.12.2019 [skoirala]: included the option to handle lookup table when set to true  from model_run.json  

# Created by:
 - skoirala

# Notes:
 - This function is a part of pSoil; but making the looking up table & setting the soil  properties is handled by soilWBase [by calling this function]
 - is also used by all approaches depending on kUnsat within time loop of coreTEM
"""
function kSaxton2006(land, helpers, sl)
    @unpack_land begin
        (n2, n3) ‚àà land.soilProperties
        (p_Œ≤, p_kSat, p_wSat) ‚àà land.soilWBase
        soilW ‚àà land.pools
        ŒîsoilW ‚àà land.states
        (ùüò, ùüô) ‚àà helpers.numbers
    end

    ## calculate variables
    wSat = p_wSat[sl]
    Œ∏_dos = (soilW[sl] + ŒîsoilW[sl]) / wSat
    Œ∏_dos = clamp_01(Œ∏_dos)
    Œ≤ = p_Œ≤[sl]
    kSat = p_kSat[sl]
    Œª = ùüô / Œ≤
    K = kSat * ((Œ∏_dos)^(n3 + (n2 / Œª)))
    return K
end

"""
calculates the soil hydraulic properties based on Saxton 2006

# Inputs:
 - : texture-based parameters
 - info
 - land.soilTexture.sp_[CLAY/SAND]: in fraction
 - sl: soil layer to calculate property for

# Outputs:
 - hydraulic conductivity [k], matric potention [œà] & porosity  (Œ∏) at saturation [Sat], field capacity [FC], & wilting point  (WP)
 - properties of moisture-retention curves: (Œ± & Œ≤)

# Modifies:

# Extended help

# References:
 - Saxton, K. E., & Rawls, W. J. (2006). Soil water characteristic estimates by  texture & organic matter for hydrologic solutions.  Soil science society of America Journal, 70[5], 1569-1578.

# Versions:
 - 1.0 on 22.11.2019 [skoirala]:

# Created by:
 - skoirala

# Notes:
 - FC: Field Capacity moisture [33 kPa], #v  
 - PAW: Plant Avail. moisture [33-1500 kPa, matric soil], #v
 - PAWB: Plant Avail. moisture [33-1500 kPa, bulk soil], #v
 - SAT: Saturation moisture [0 kPa], #v
 - WP: Wilting point moisture [1500 kPa], #v
"""
function calcPropsSaxton2006(p_struct::soilProperties_Saxton2006, land, helpers, sl)

    @unpack_soilProperties_Saxton2006 p_struct
    @unpack_land begin
        (ùüò, ùüô, num_type, sNT) ‚àà helpers.numbers
        (st_CLAY, st_ORGM, st_SAND) ‚àà land.soilTexture
    end

    CLAY = st_CLAY[sl]
    SAND = st_SAND[sl]
    ORGM = st_ORGM[sl]
    # ORGM = sp_ORGM[sl]
    # ORGM = ùüò
    # CLAY = CLAY
    # SAND = SAND
    # ORGM = ORGM
    ## Moisture regressions
    # Œ∏_1500t: 1500 kPa moisture; first solution; #v
    # Œ∏_1500: 1500 kPa moisture; #v
    Œ∏_1500t = a1 * SAND + a2 * CLAY + a3 * ORGM + a4 * (SAND * ORGM) - a5 * (CLAY * ORGM) + a6 * (SAND * CLAY) + a7
    Œ∏_1500 = Œ∏_1500t + (b1 * Œ∏_1500t - b2)
    # Œ∏_33t: 33 kPa moisture; first solution; #v
    # Œ∏_33: 33 kPa moisture; normal density; #v
    Œ∏_33t = c1 * SAND + c2 * CLAY + c3 * ORGM + c4 * (SAND * ORGM) - c5 * (CLAY * ORGM) + c6 * (SAND * CLAY) + c7
    Œ∏_33 = Œ∏_33t + (d1 * (Œ∏_33t)^n2 - d2 * Œ∏_33t - d3)
    # Œ∏_s_33t: SAT-33 kPa moisture; first solution; #v
    # Œ∏_s_33: SAT-33 kPa moisture; normal density #v
    Œ∏_s_33t = e1 * SAND + e2 * CLAY + e3 * ORGM - e4 * (SAND * ORGM) - e5 * (CLAY * ORGM) - e6 * (SAND * CLAY) + e7
    Œ∏_s_33 = Œ∏_s_33t + (f1 * Œ∏_s_33t - f2)
    # œà_et: Tension at air entry; first solution; kPa
    # œà_e: Tension at air entry [bubbling pressure], kPa
    œà_et = abs(g1 * SAND - g2 * CLAY - g3 * Œ∏_s_33 + g4 * (SAND * Œ∏_s_33) + g5 * (CLAY * Œ∏_s_33) - g6 * (SAND * CLAY) + g7)
    œà_e = abs(œà_et + (h1 * (œà_et^n2) - h2 * œà_et - h3))
    # Œ∏_s: Saturated moisture [0 kPa], normal density, #v
    # rho_N: Normal density; g cm-3
    Œ∏_s = Œ∏_33 + Œ∏_s_33 - i1 * SAND + i2
    rho_N = (ùüô - Œ∏_s) * gravelDensity
    ## Density effects
    # rho_DF: Adjusted density; g cm-3
    # Œ∏_s_DF: Saturated moisture [0 kPa], adjusted density, #v
    # Œ∏_33_DF: 33 kPa moisture; adjusted density; #v
    # Œ∏_s_33_DF: SAT-33 kPa moisture; adjusted density; #v
    # DF: Density adjustment Factor [0.9-1.3]
    rho_DF = rho_N * DF
    # Œ∏_s_DF = 1 - (rho_DF / gravelDensity); # original but does not include Œ∏_s
    Œ∏_s_DF = Œ∏_s * (ùüô - (rho_DF / gravelDensity)) # may be includes Œ∏_s
    Œ∏_33_DF = Œ∏_33 - n02 * (Œ∏_s - Œ∏_s_DF)
    Œ∏_1500_DF = Œ∏_1500 - n02 * (Œ∏_s - Œ∏_s_DF)
    Œ∏_s_33_DF = Œ∏_s_DF - Œ∏_33_DF
    ## Moisture-Tension
    # A, B: Coefficients of moisture-tension, Eq. [11]
    # œà_Œ∏: Tension at moisture Œ∏; kPa
    B = (log(n1500) - log(n33)) / (log(Œ∏_33) - log(Œ∏_1500))
    A = exp(log(n33) + B * log(Œ∏_33))
    # œà_Œ∏ = A * ((Œ∏) ^ (-B))
    # œà_33 = 33.0 - ((Œ∏ - Œ∏_33) * (33.0 - œà_e)) / (Œ∏_s - Œ∏_33)
    ## Moisture-Conductivity
    # Œª: Slope of logarithmic tension-moisture curve
    # Ks: Saturated conductivity [matric soil], mm h-1
    # K_Œ∏: Unsaturated conductivity at moisture Œ∏; mm h-1
    Œª = ùüô / B
    Ks = n1930 * ((Œ∏_s - Œ∏_33)^(n3 - Œª)) * n24
    # K_Œ∏ = Ks * ((Œ∏ / Œ∏_s) ^ (3 + (2 / Œª)))
    ## Gravel Effects
    # rho_B: Bulk soil density [matric plus gravel], g cm-3
    # Œ±Rho: Matric soil density/gravel density [gravelDensity] = rho/2.65
    # Rv: Volume fraction of gravel [decimal], g cm -3
    # Rw: Weight fraction of gravel [decimal], g g-1
    # Kb: Saturated conductivity [bulk soil], mm h-1
    Œ±Rho = matricSoilDensity / gravelDensity
    Rv = (Œ±Rho * Rw) / (ùüô - Rw * (ùüô - Œ±Rho))
    rho_B = rho_N * (ùüô - Rv) + Rv * gravelDensity
    # PAW_B = PAW * (ùüô - Rv)
    Kb = Ks * ((ùüô - Rw) / (ùüô - Rw * (ùüô - (n3 * Œ±Rho / n2))))
    ## Salinity Effects
    # œï_o: Osmotic potential at Œ∏ = Œ∏_s; kPa
    # œï_o_Œ∏: Osmotic potential at Œ∏ < Œ∏_s; kPa
    # EC: Electrical conductance of a saturated soil extract, dS m-1 [dS/m = mili-mho cm-1]
    phi_o = n36 * EC
    # œï_o_Œ∏ = (Œ∏_s / Œ∏) * n36 / EC
    ## Assign the variables for returning
    Œ± = A
    Œ≤ = B
    # Œ∏Sat = Œ∏_s_DF
    Œ∏Sat = Œ∏_s
    kSat = Kb
    œàSat = ùüò
    # Œ∏FC = Œ∏_33_DF
    Œ∏FC = Œ∏_33
    kFC = kSat * ((Œ∏FC / Œ∏Sat)^(n3 + (n2 / Œª)))
    œàFC = n33
    # Œ∏WP = Œ∏_1500_DF
    Œ∏WP = Œ∏_1500
    œàWP = n1500
    kWP = kSat * ((Œ∏WP / Œ∏Sat)^(n3 + (n2 / Œª)))

    ## pack land variables
    return Œ±, Œ≤, kSat, Œ∏Sat, œàSat, kFC, Œ∏FC, œàFC, kWP, Œ∏WP, œàWP
end
